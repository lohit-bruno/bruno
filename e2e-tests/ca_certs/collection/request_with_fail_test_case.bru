meta {
  name: request_with_fail_test_case
  type: http
  seq: 1
}

get {
  url: https://localhost:8090
  body: none
  auth: inherit
}

script:pre-request {
  const runtime = req.getRuntime();
  if (runtime !== 'quickjs') {
    req.onFail(function(err) {
    /**
     * relevant only for the below test cases
     * 
     * cli test:
     * `.github/workflows/ca_certs_tests_for_linux.yml`
     * 
     * with INVALID custom CA cert and NO default/system CA certs:
     * node ../../../packages/bruno-cli/bin/bru.js run ./request_with_fail_test_case.bru --cacert ../server/certs/ca-key.pem --ignore-truststore
     * 
     * e2e test:
     * `e2e-tests/ca_certs/tests/with-only-VALID-custom-ca-certs-and-NO-system-certs`
     */
      test('should return ssl verification error', () => {
        expect(err.code).to.eql('UNABLE_TO_VERIFY_LEAF_SIGNATURE');
      });
    });  
  }
}

tests {
  const executionMode = req.getExecutionMode();
  if (executionMode == 'cli') {
    /**
     * relevant only for the below test cases
     * 
     * cli test:
     * `.github/workflows/ca_certs_tests_for_linux.yml`
     * 
     * With INVALID custom CA cert and NO default/system CA certs:
     * node ../../../packages/bruno-cli/bin/bru.js run ./request_with_fail_test_case.bru --cacert ../server/certs/ca-key.pem --ignore-truststore
     */
    test('request should give an tls verification error, should not reach this point.', () => {
      expect(true).to.eql(false);
    });  
  }
}

settings {
  encodeUrl: true
}
