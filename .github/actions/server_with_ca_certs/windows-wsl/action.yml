name: 'setup server with ca certs for windows os using WSL'
description: 'generate CA certificates using WSL, configure Windows system trust, and prepare HTTPS test server'

runs:
  using: 'composite'
  steps:
    - name: verify WSL and OpenSSL availability
      shell: wsl-bash {0}
      run: |
        set -euo pipefail
        
        echo "WSL Environment:"
        uname -a
        
        # Check if OpenSSL is available in WSL
        if command -v openssl &> /dev/null; then
          echo "OpenSSL found: $(openssl version)"
        else
          echo "ERROR: OpenSSL not found in WSL environment"
          echo "Installing OpenSSL..."
          sudo apt-get update
          sudo apt-get install -y openssl ca-certificates
        fi
        
        echo "OpenSSL verified for WSL"

    - name: create certificate directories
      shell: wsl-bash {0}
      run: |
        set -euo pipefail

        rm -rf e2e-tests/ca_certs/server/certs
        mkdir -p e2e-tests/ca_certs/server/certs

        echo "certificate directory \`certs\` created successfully"

    - name: generate CA certificates using WSL
      id: generate-certs
      shell: wsl-bash {0}
      working-directory: e2e-tests/ca_certs/server
      run: |
        set -euo pipefail

        # Use Linux certificate generation script in WSL
        chmod +x generate_certs.sh
        ./generate_certs.sh

        # Convert PEM to DER format for Windows truststore
        openssl x509 -in certs/ca-cert.pem -outform DER -out certs/ca-cert.cer

        CA_CERT_PATH="$(pwd)/certs/ca-cert.pem"
        CA_CERT_DER_PATH="$(pwd)/certs/ca-cert.cer"

        echo "certificates generated successfully at $CA_CERT_PATH"
        echo "Windows DER certificate at $CA_CERT_DER_PATH"

    - name: verify generated certificates
      shell: wsl-bash {0}
      working-directory: e2e-tests/ca_certs/server/certs
      run: |
        set -euo pipefail

        # Check that all required certificate files exist
        if [[ ! -f "ca-cert.pem" || ! -f "ca-cert.cer" || ! -f "localhost-cert.pem" || ! -f "localhost-key.pem" ]]; then
          echo "error: required certificate files are missing"
          ls -la || true
          exit 1
        fi
        
        # display certificate information for verification
        echo "CA certificate information:"
        openssl x509 -in ca-cert.pem -text -noout | head -20
        
        echo "server certificate information:"
        openssl x509 -in localhost-cert.pem -text -noout | head -20
        
        echo "certificate verification completed successfully"

    - name: convert WSL path to Windows path for truststore
      shell: powershell
      run: |
        $ErrorActionPreference = "Stop"
        
        # Get the Windows path for the certificate
        $wslPath = "/mnt/c/Users/runneradmin/work/$env:GITHUB_REPOSITORY"
        $wslPath = $wslPath.Replace("$env:GITHUB_REPOSITORY_OWNER/", "")
        $winPath = "C:\Users\runneradmin\work\$env:GITHUB_REPOSITORY\e2e-tests\ca_certs\server\certs\ca-cert.cer"
        
        Write-Output "Certificate will be loaded from: $winPath"
        Write-Output "cert_path=$winPath" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: add CA certificate to Windows truststore
      shell: powershell
      working-directory: e2e-tests/ca_certs/server/certs
      run: |
        $ErrorActionPreference = "Stop"
        Write-Output "Adding CA certificate to Windows truststore"
        
        # Import CA certificate to Trusted Root Certification Authorities store
        $certPath = "$PWD\ca-cert.cer"
        Write-Output "Certificate path: $certPath"
        
        if (Test-Path $certPath) {
          Import-Certificate -FilePath $certPath -CertStoreLocation Cert:\LocalMachine\Root
          Write-Output "CA certificate added to Windows truststore successfully"
          
          # Verify the certificate was installed
          $cert = Get-ChildItem -Path Cert:\LocalMachine\Root | Where-Object { $_.Subject -like "*Local Dev CA*" }
          if ($cert) {
            Write-Output "Certificate verification: CA certificate found in Windows truststore"
            Write-Output "Subject: $($cert.Subject)"
          } else {
            Write-Output "Warning: CA certificate not found in truststore after installation"
          }
        } else {
          Write-Output "Error: Certificate file not found at $certPath"
          exit 1
        }

    - name: start and verify server in WSL
      id: verify-setup
      shell: wsl-bash {0}
      working-directory: e2e-tests/ca_certs/server
      run: |
        set -euo pipefail
        echo "verifying server setup readiness in WSL"
        
        if [[ ! -f "index.js" ]]; then
          echo "error: server file not found"
          exit 1
        fi
        echo "server script found and accessible"
        
        # verify all required certificates are present
        REQUIRED_CERTS=("certs/ca-cert.pem" "certs/ca-cert.cer" "certs/localhost-cert.pem" "certs/localhost-key.pem")
        for cert_file in "${REQUIRED_CERTS[@]}"; do
          if [[ ! -f "$cert_file" ]]; then
            echo "error: required certificate file missing: $cert_file"
            echo "available files in certs directory:"
            ls -la certs/ || echo "certs directory not accessible"
            exit 1
          fi
        done
        echo "all required certificates are present"
        
        echo "checking for existing process on port 8090"
        if netstat -tulpn 2>/dev/null | grep -q ":8090"; then
          echo "found existing process on port 8090, attempting to kill it"
          fuser -k 8090/tcp 2>/dev/null || echo "no process found to kill"
          sleep 2
        fi
        
        echo "starting server in WSL"
        node index.js > test_server.log 2>&1 &
        TEST_SERVER_PID=$!
        echo "started server with PID: $TEST_SERVER_PID"

        echo "checking server readiness"
        check_server_ready() {
          local attempt=$1
          local max_attempts=$2
          
          if RESPONSE=$(curl --connect-timeout 2 --max-time 5 -k https://localhost:8090 2>/dev/null); then
            if [[ "$RESPONSE" == "ping" ]]; then
              echo "server ready and responding correctly (attempt $attempt/$max_attempts)"
              return 0
            else
              echo "server responding with unexpected content: '$RESPONSE' (attempt $attempt/$max_attempts)"
              return 1
            fi
          else
            echo "server not responding yet (attempt $attempt/$max_attempts)"
            return 1
          fi
        }
        
        echo "waiting for server to become ready"
        MAX_ATTEMPTS=10
        for ((i=1; i<=MAX_ATTEMPTS; i++)); do
          if check_server_ready "$i" "$MAX_ATTEMPTS"; then
            break
          fi
          
          if [[ $i -eq $MAX_ATTEMPTS ]]; then
            echo "error: server failed to become ready after $MAX_ATTEMPTS attempts"
            echo "server logs:"
            cat test_server.log 2>/dev/null || echo "no server logs available"
            echo "process status:"
            if kill -0 "$TEST_SERVER_PID" 2>/dev/null; then
              echo "server process is still running"
            else
              echo "server process has died"
            fi
            kill "$TEST_SERVER_PID" 2>/dev/null || true
            exit 1
          fi
          
          sleep 2
        done
        
        echo "WSL-based CA cert server is ready and accessible"
