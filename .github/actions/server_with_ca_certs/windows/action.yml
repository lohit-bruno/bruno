name: 'setup server with ca certs for windows os'
description: 'generate CA certificates, configure Windows system trust, and prepare HTTPS test server'

runs:
  using: 'composite'
  steps:
    - name: install and verify OpenSSL
      shell: powershell
      run: |
        $ErrorActionPreference = "Stop"
        Write-Output "Installing OpenSSL with Chocolatey..."
        
        # Install Chocolatey if not present
        if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
        }
        
        # Install OpenSSL
        choco install openssl -y
        
        # Refresh environment and update PATH for GitHub Actions
        $machinePath = [System.Environment]::GetEnvironmentVariable("PATH", "Machine")
        $userPath = [System.Environment]::GetEnvironmentVariable("PATH", "User")
        $newPath = "$machinePath;$userPath"
        
        # Update PATH for current session
        $env:PATH = $newPath
        
        # Persist PATH for subsequent steps in GitHub Actions
        "$newPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        
        # Verify OpenSSL installation
        $maxAttempts = 3
        $opensslFound = $false
        for ($i = 1; $i -le $maxAttempts; $i++) {
          try {
            $opensslVersion = & openssl version 2>&1
            Write-Output "OpenSSL found: $opensslVersion"
            $opensslFound = $true
            break
          } catch {
            Write-Output "OpenSSL not found on attempt $i/$maxAttempts, retrying..."
            Start-Sleep -Seconds 2
          }
        }
        
        if (-not $opensslFound) {
          Write-Output "ERROR: OpenSSL not found in PATH after installation"
          Write-Output "Current PATH: $env:PATH"
          exit 1
        }
        
        Write-Output "OpenSSL verified for Windows"

    - name: create certificate directories
      shell: powershell
      run: |
        $ErrorActionPreference = "Stop"

        if (Test-Path "e2e-tests/ca_certs/server/certs") {
          Remove-Item -Recurse -Force "e2e-tests/ca_certs/server/certs"
        }
        New-Item -ItemType Directory -Path "e2e-tests/ca_certs/server/certs" -Force

        Write-Output "certificate directory 'certs' created successfully"

    - name: generate CA certificates
      id: generate-certs
      shell: powershell
      working-directory: e2e-tests/ca_certs/server
      run: |
        $ErrorActionPreference = "Stop"

        .\generate_certs_windows.ps1

        $CA_CERT_PATH = "$(Get-Location)/certs/ca-cert.pem"
        $CA_CERT_DER_PATH = "$(Get-Location)/certs/ca-cert.cer"

        Write-Output "certificates generated successfully at $CA_CERT_PATH"
        Write-Output "Windows DER certificate at $CA_CERT_DER_PATH"

    - name: verify generated certificates
      shell: powershell
      working-directory: e2e-tests/ca_certs/server/certs
      run: |
        $ErrorActionPreference = "Stop"

        # Check that all required certificate files exist (Windows generates additional formats)
        $requiredFiles = @("ca-cert.pem", "ca-cert.cer", "localhost-cert.pem", "localhost-key.pem", "localhost.p12")
        foreach ($file in $requiredFiles) {
          if (-not (Test-Path $file)) {
            Write-Output "error: required certificate file missing: $file"
            Get-ChildItem -Force | Format-Table -AutoSize
            exit 1
          }
        }
        
        # display certificate information for verification
        Write-Output "CA certificate information:"
        $caCertInfo = & openssl x509 -in ca-cert.pem -text -noout 2>&1
        $caCertInfo | Select-Object -First 20
        
        Write-Output "server certificate information:"
        $serverCertInfo = & openssl x509 -in localhost-cert.pem -text -noout 2>&1
        $serverCertInfo | Select-Object -First 20
        
        Write-Output "certificate verification completed successfully"

    - name: add CA certificate to Windows truststore
      shell: powershell
      working-directory: e2e-tests/ca_certs/server/certs
      run: |
        $ErrorActionPreference = "Stop"
        Write-Output "Adding CA certificate to Windows truststore"
        
        # Import CA certificate to Trusted Root Certification Authorities store
        $certPath = "$PWD\ca-cert.cer"
        Write-Output "Certificate path: $certPath"
        
        if (Test-Path $certPath) {
          Import-Certificate -FilePath $certPath -CertStoreLocation Cert:\LocalMachine\Root
          Write-Output "CA certificate added to Windows truststore successfully"
          
          # Verify the certificate was installed
          $cert = Get-ChildItem -Path Cert:\LocalMachine\Root | Where-Object { $_.Subject -like "*Local Dev CA*" }
          if ($cert) {
            Write-Output "Certificate verification: CA certificate found in Windows truststore"
            Write-Output "Subject: $($cert.Subject)"
          } else {
            Write-Output "Warning: CA certificate not found in truststore after installation"
          }
        } else {
          Write-Output "Error: Certificate file not found at $certPath"
          exit 1
        }

    - name: start and verify server
      id: verify-setup
      shell: powershell
      working-directory: e2e-tests/ca_certs/server
      run: |
        $ErrorActionPreference = "Stop"
        Write-Output "verifying server setup readiness"
        
        if (-not (Test-Path "index.js")) {
          Write-Output "error: server file not found"
          exit 1
        }
        Write-Output "server script found and accessible"
        
        # verify all required certificates are present (Windows needs p12 bundle)
        $requiredCerts = @("certs/ca-cert.pem", "certs/ca-cert.cer", "certs/localhost-cert.pem", "certs/localhost-key.pem", "certs/localhost.p12")
        foreach ($certFile in $requiredCerts) {
          if (-not (Test-Path $certFile)) {
            Write-Output "error: required certificate file missing: $certFile"
            Write-Output "available files in certs directory:"
            try {
              Get-ChildItem certs/ | Format-Table -AutoSize
            } catch {
              Write-Output "certs directory not accessible"
            }
            exit 1
          }
        }
        Write-Output "all required certificates are present for Windows"
        
        Write-Output "checking for existing process on port 8090"
        # Use netstat for Windows compatibility
        $portCheck = netstat -an | Select-String ":8090"
        if ($portCheck) {
          Write-Output "found existing process on port 8090, attempting to kill it"
          $processes = Get-NetTCPConnection -LocalPort 8090 -ErrorAction SilentlyContinue
          foreach ($proc in $processes) {
            try {
              Stop-Process -Id $proc.OwningProcess -Force -ErrorAction SilentlyContinue
              Write-Output "killed process with PID: $($proc.OwningProcess)"
            } catch {
              Write-Output "failed to kill PID $($proc.OwningProcess)"
            }
          }
          Start-Sleep -Seconds 2
        }
        
        Write-Output "starting server"
        $serverProcess = Start-Process -FilePath "node" -ArgumentList "index.js" -RedirectStandardOutput "test_server.log" -RedirectStandardError "test_server.log" -PassThru -NoNewWindow
        $TEST_SERVER_PID = $serverProcess.Id
        Write-Output "started server with PID: $TEST_SERVER_PID"

        Write-Output "checking server readiness"
        function Test-ServerReady {
          param($attempt, $maxAttempts)
          
          try {
            $response = Invoke-WebRequest -Uri "https://localhost:8090" -TimeoutSec 5 -ErrorAction Stop
            if ($response.Content -eq "ping") {
              Write-Output "server ready and responding correctly (attempt $attempt/$maxAttempts)"
              return $true
            } else {
              Write-Output "server responding with unexpected content: '$($response.Content)' (attempt $attempt/$maxAttempts)"
              return $false
            }
          } catch {
            Write-Output "server not responding yet (attempt $attempt/$maxAttempts)"
            return $false
          }
        }
        
        Write-Output "waiting for server to become ready"
        $maxAttempts = 10
        $serverReady = $false
        for ($i = 1; $i -le $maxAttempts; $i++) {
          if (Test-ServerReady -attempt $i -maxAttempts $maxAttempts) {
            $serverReady = $true
            break
          }
          
          if ($i -eq $maxAttempts) {
            Write-Output "error: server failed to become ready after $maxAttempts attempts"
            Write-Output "server logs:"
            try {
              Get-Content test_server.log
            } catch {
              Write-Output "no server logs available"
            }
            Write-Output "process status:"
            try {
              $process = Get-Process -Id $TEST_SERVER_PID -ErrorAction Stop
              Write-Output "server process is still running"
            } catch {
              Write-Output "server process has died"
            }
            try {
              Stop-Process -Id $TEST_SERVER_PID -Force -ErrorAction SilentlyContinue
            } catch {}
            exit 1
          }
          
          Start-Sleep -Seconds 2
        }
        
        Write-Output "Windows CA cert server is ready and accessible"