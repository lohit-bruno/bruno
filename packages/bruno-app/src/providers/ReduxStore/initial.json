{
    "app": {
        "isDragging": false,
        "idbConnectionReady": false,
        "leftSidebarWidth": 222,
        "screenWidth": 1073,
        "showHomePage": false,
        "showPreferences": false,
        "isEnvironmentSettingsModalOpen": false,
        "preferences": {
            "request": {
                "sslVerification": false,
                "customCaCertificate": {
                    "enabled": false,
                    "filePath": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/file.json"
                },
                "keepDefaultCaCertificates": {
                    "enabled": true
                },
                "storeCookies": true,
                "sendCookies": true,
                "timeout": 0
            },
            "font": {
                "codeFont": "default",
                "codeFontSize": 14
            },
            "proxy": {
                "mode": "system",
                "protocol": "http",
                "hostname": "",
                "port": null,
                "auth": {
                    "enabled": false,
                    "username": "",
                    "password": ""
                },
                "bypassProxy": ""
            },
            "layout": {
                "responsePaneOrientation": "horizontal"
            },
            "features": {
                "terminal": true,
                "apiSpec": false,
                "fileExplorer": true,
                "git": true,
                "brunoJson": false
            },
            "secretsProviders": [
                {
                    "uid": "h8PVIwEnJWA81Kq2rJJjr",
                    "name": "aws",
                    "type": "aws-secrets-manager",
                    "awsConfig": {
                        "accessKeyId": "$00:763130fc83f3cc9f61d717795db7ee491a5284f0a84890ed91396aa52789abb0c2c5a1",
                        "secretAccessKey": "$00:7631302e161a4ef3c060556c5edb79e0660a18bfc734f2e1f47785b646937a85e9ea05591cd4aa9080275ca49986a490d72287",
                        "region": "us-east-1"
                    }
                }
            ],
            "awsConfig": {
                "enabled": false,
                "accessKeyId": "",
                "secretAccessKey": "",
                "region": ""
            },
            "azureConfig": {
                "enabled": false,
                "tenantId": "",
                "clientId": "",
                "clientSecret": ""
            },
            "autoupdate": {
                "downloadUpdates": true
            },
            "license": {
                "proxy": {
                    "auth": {}
                }
            }
        },
        "generateCode": {
            "mainLanguage": "Shell",
            "library": "curl",
            "shouldInterpolate": true
        },
        "cookies": [],
        "taskQueue": [],
        "systemProxyEnvVariables": {}
    },
    "collections": {
        "collections": [
            {
                "version": "1",
                "uid": "puy5t8000000000000000",
                "name": "collection_runner_tags",
                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/collection_runner_tags",
                "items": [],
                "runtimeVariables": {},
                "brunoConfig": {
                    "version": "1",
                    "name": "collection_runner_tags",
                    "type": "collection",
                    "ignore": [
                        "node_modules",
                        ".git"
                    ],
                    "size": 0.0018262863159179688,
                    "filesCount": 10
                },
                "securityConfig": {
                    "jsSandboxMode": "safe"
                },
                "settingsSelectedTab": "overview",
                "folderLevelSettingsSelectedTab": {},
                "mountStatus": "unmounted",
                "importedAt": 1752332156846,
                "lastAction": null,
                "collapsed": true
            },
            {
                "version": "1",
                "uid": "5etvur000000000000000",
                "name": "collection_seq",
                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/collection_seq",
                "items": [],
                "runtimeVariables": {},
                "brunoConfig": {
                    "version": "1",
                    "name": "collection_seq",
                    "type": "collection",
                    "ignore": [
                        "node_modules",
                        ".git"
                    ],
                    "size": 0.0001163482666015625,
                    "filesCount": 2
                },
                "securityConfig": {
                    "jsSandboxMode": "safe"
                },
                "settingsSelectedTab": "overview",
                "folderLevelSettingsSelectedTab": {},
                "mountStatus": "unmounted",
                "importedAt": 1752332156849,
                "lastAction": null,
                "collapsed": true
            },
            {
                "version": "1",
                "uid": "olcycg000000000000000",
                "name": "bruno-testbench",
                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench",
                "items": [
                    {
                        "uid": "yWdSw2Ki7eqSnvErxRnJc",
                        "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/asserts",
                        "name": "asserts",
                        "seq": 1,
                        "filename": "asserts",
                        "collapsed": true,
                        "type": "folder",
                        "items": [
                            {
                                "uid": "EypgwJq7mOjij1RPL6rhl",
                                "name": "test-assert-combinations",
                                "type": "http-request",
                                "seq": 1,
                                "request": {
                                    "method": "POST",
                                    "url": "{{httpfaker}}/api/echo/custom",
                                    "params": [],
                                    "headers": [],
                                    "auth": {
                                        "mode": "none"
                                    },
                                    "body": {
                                        "json": "{\n  \"type\": \"application/json\",\n  \"contentJSON\": {\n    \"string\": \"foo\",\n    \"stringWithSQuotes\": \"'foo'\",\n    \"stringWithDQuotes\": \"\\\"foo\\\"\",\n    \"number\": 123,\n    \"numberAsString\": \"123\",\n    \"numberAsStringWithSQuotes\": \"'123'\",\n    \"numberAsStringWithDQuotes\": \"\\\"123\\\"\",\n    \"numberAsStringWithLeadingZero\": \"0123\",\n    \"numberBig\": 9007199254740992000,\n    \"numberBigAsString\": \"9007199254740991999\",\n    \"null\": null,\n    \"nullAsString\": \"null\",\n    \"nullAsStringWithSQuotes\": \"'null'\",\n    \"nullAsStringWithDQuotes\": \"\\\"null\\\"\",\n    \"true\": true,\n    \"trueAsString\": \"true\",\n    \"trueAsStringWithSQuotes\": \"'true'\",\n    \"trueAsStringWithDQuotes\": \"\\\"true\\\"\",\n    \"false\": false,\n    \"falseAsString\": \"false\",\n    \"falseAsStringWithSQuotes\": \"'false'\",\n    \"falseAsStringWithDQuotes\": \"\\\"false\\\"\",\n    \"stringWithCurlyBraces\": \"{foo}\",\n    \"stringWithDoubleCurlyBraces\": \"{{foobar}}\"\n  }\n}",
                                        "mode": "json"
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [
                                        {
                                            "name": "res.body.string",
                                            "value": "eq foo",
                                            "enabled": true,
                                            "uid": "RQasmxrbz7TkH7yh4HWM0"
                                        },
                                        {
                                            "name": "res.body.string",
                                            "value": "eq 'foo'",
                                            "enabled": true,
                                            "uid": "OfKHgsCSnmw7KtZUSh24H"
                                        },
                                        {
                                            "name": "res.body.string",
                                            "value": "eq \"foo\"",
                                            "enabled": true,
                                            "uid": "CyPhUznXcrp4tx5f5YGHk"
                                        },
                                        {
                                            "name": "res.body.stringWithSQuotes",
                                            "value": "eq \"'foo'\"",
                                            "enabled": true,
                                            "uid": "8cQGwtiHGzhGZzX9GCbfG"
                                        },
                                        {
                                            "name": "res.body.stringWithDQuotes",
                                            "value": "eq '\"foo\"'",
                                            "enabled": true,
                                            "uid": "erSf9PSiav9ZEpYpoUXZn"
                                        },
                                        {
                                            "name": "res.body.number",
                                            "value": "eq 123",
                                            "enabled": true,
                                            "uid": "LFhFOIHxvdnNXDb25oT59"
                                        },
                                        {
                                            "name": "res.body.numberAsString",
                                            "value": "eq '123'",
                                            "enabled": true,
                                            "uid": "UfMWHmG1I2UvyzgMOQbHW"
                                        },
                                        {
                                            "name": "res.body.numberAsString",
                                            "value": "eq \"123\"",
                                            "enabled": true,
                                            "uid": "FyF29KysdgADTjMHH7fBh"
                                        },
                                        {
                                            "name": "res.body.numberAsStringWithSQuotes",
                                            "value": "eq \"'123'\"",
                                            "enabled": true,
                                            "uid": "pquJyMTQxwj9mR3bUNycD"
                                        },
                                        {
                                            "name": "res.body.numberAsStringWithDQuotes",
                                            "value": "eq '\"123\"'",
                                            "enabled": true,
                                            "uid": "keiXeyy4CbDIY3clBpkjl"
                                        },
                                        {
                                            "name": "res.body.numberAsStringWithLeadingZero",
                                            "value": "eq \"0123\"",
                                            "enabled": true,
                                            "uid": "AsLTyNMJLH6iPMqBNzL34"
                                        },
                                        {
                                            "name": "res.body.numberBig.toString()",
                                            "value": "eq '9007199254740992000'",
                                            "enabled": true,
                                            "uid": "BZlbBB0uncovwtSaNO0TL"
                                        },
                                        {
                                            "name": "res.body.numberBigAsString",
                                            "value": "eq \"9007199254740991999\"",
                                            "enabled": true,
                                            "uid": "UvE0wrPAlWZssMQUUBtFa"
                                        },
                                        {
                                            "name": "res.body.null",
                                            "value": "eq null",
                                            "enabled": true,
                                            "uid": "2UJVqRG5oFgdfMwRcaMsf"
                                        },
                                        {
                                            "name": "res.body.nullAsString",
                                            "value": "eq \"null\"",
                                            "enabled": true,
                                            "uid": "ChGocl38nuiqgIY9sJeL4"
                                        },
                                        {
                                            "name": "res.body.nullAsStringWithSQuotes",
                                            "value": "eq \"'null'\"",
                                            "enabled": true,
                                            "uid": "fyfOfVGLatT2KegWayWPz"
                                        },
                                        {
                                            "name": "res.body.nullAsStringWithDQuotes",
                                            "value": "eq '\"null\"'",
                                            "enabled": true,
                                            "uid": "EKBY0YAMhOyP0UOJCvWcX"
                                        },
                                        {
                                            "name": "res.body.true",
                                            "value": "eq true",
                                            "enabled": true,
                                            "uid": "aDsHGz6XMS86VZmWVoKoC"
                                        },
                                        {
                                            "name": "res.body.trueAsString",
                                            "value": "eq \"true\"",
                                            "enabled": true,
                                            "uid": "yMWLXjXmgqjroszxJo1fp"
                                        },
                                        {
                                            "name": "res.body.trueAsStringWithSQuotes",
                                            "value": "eq \"'true'\"",
                                            "enabled": true,
                                            "uid": "BI1wWZNXugcJtBLzT3UBH"
                                        },
                                        {
                                            "name": "res.body.trueAsStringWithDQuotes",
                                            "value": "eq '\"true\"'",
                                            "enabled": true,
                                            "uid": "Od2locOqxZHLeeBmv3Z1C"
                                        },
                                        {
                                            "name": "res.body.false",
                                            "value": "eq false",
                                            "enabled": true,
                                            "uid": "t269vuxYCbbUS3lF1POIm"
                                        },
                                        {
                                            "name": "res.body.falseAsString",
                                            "value": "eq \"false\"",
                                            "enabled": true,
                                            "uid": "f4GIzKYtjnzej5xcFim3G"
                                        },
                                        {
                                            "name": "res.body.falseAsStringWithSQuotes",
                                            "value": "eq \"'false'\"",
                                            "enabled": true,
                                            "uid": "i3j9i11vXMZQRExlGXICG"
                                        },
                                        {
                                            "name": "res.body.falseAsStringWithDQuotes",
                                            "value": "eq '\"false\"'",
                                            "enabled": true,
                                            "uid": "W3jWFwx8brL2SWLW9zjfS"
                                        },
                                        {
                                            "name": "res.body.nonexistent",
                                            "value": "eq undefined",
                                            "enabled": true,
                                            "uid": "5mcUdMoZjn762xllvMvDc"
                                        },
                                        {
                                            "name": "res.body.stringWithCurlyBraces",
                                            "value": "eq \"{foo}\"",
                                            "enabled": true,
                                            "uid": "PwH8sXJY6wwKsxWBDpFRS"
                                        },
                                        {
                                            "name": "res.body.stringWithDoubleCurlyBraces",
                                            "value": "eq \"{{foobar}}\"",
                                            "enabled": true,
                                            "uid": "5qVF4nFlgXEtsFm8UMEuB"
                                        }
                                    ],
                                    "tests": "",
                                    "docs": ""
                                },
                                "filename": "test-assert-combinations.bru",
                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/asserts/test-assert-combinations.bru",
                                "draft": null,
                                "partial": false,
                                "loading": false,
                                "size": 0.0021533966064453125,
                                "depth": 2
                            }
                        ],
                        "depth": 1
                    },
                    {
                        "uid": "pCrmMnDdWIhMOhbJFOTKM",
                        "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/auth",
                        "name": "auth",
                        "seq": 1,
                        "filename": "auth",
                        "collapsed": true,
                        "type": "folder",
                        "items": [
                            {
                                "uid": "djqZbadmvdxb1eRVnkfPZ",
                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/auth/basic",
                                "name": "basic",
                                "seq": 1,
                                "filename": "basic",
                                "collapsed": true,
                                "type": "folder",
                                "items": [
                                    {
                                        "uid": "Q6ZHSnaK3I47Uh9qh5A7m",
                                        "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/auth/basic/via auth",
                                        "name": "via auth",
                                        "seq": 1,
                                        "filename": "via auth",
                                        "collapsed": true,
                                        "type": "folder",
                                        "items": [
                                            {
                                                "uid": "M7hOtOUpGlrgWOYAY4lp7",
                                                "name": "Basic Auth 200",
                                                "type": "http-request",
                                                "seq": 1,
                                                "request": {
                                                    "method": "POST",
                                                    "url": "{{host}}/api/auth/basic/protected",
                                                    "params": [],
                                                    "headers": [],
                                                    "auth": {
                                                        "basic": {
                                                            "username": "bruno",
                                                            "password": "{{basic_auth_password}}"
                                                        },
                                                        "mode": "basic"
                                                    },
                                                    "body": {
                                                        "mode": "json"
                                                    },
                                                    "script": {},
                                                    "vars": {},
                                                    "assertions": [
                                                        {
                                                            "name": "res.status",
                                                            "value": "200",
                                                            "enabled": true,
                                                            "uid": "ycCHNefSdpvvrm0MsxDVy"
                                                        },
                                                        {
                                                            "name": "res.body.message",
                                                            "value": "Authentication successful",
                                                            "enabled": true,
                                                            "uid": "zUvGPJJ4FOdZ71KoFec5a"
                                                        }
                                                    ],
                                                    "tests": "",
                                                    "docs": ""
                                                },
                                                "filename": "Basic Auth 200.bru",
                                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/auth/basic/via auth/Basic Auth 200.bru",
                                                "draft": null,
                                                "partial": false,
                                                "loading": false,
                                                "size": 0.0002651214599609375,
                                                "depth": 4
                                            },
                                            {
                                                "uid": "MyaMMbh8lOfgOwc9EbE8h",
                                                "name": "Basic Auth 400",
                                                "type": "http-request",
                                                "seq": 2,
                                                "request": {
                                                    "method": "POST",
                                                    "url": "{{host}}/api/auth/basic/protected",
                                                    "params": [],
                                                    "headers": [],
                                                    "auth": {
                                                        "basic": {
                                                            "username": "bruno",
                                                            "password": "invalid"
                                                        },
                                                        "mode": "none"
                                                    },
                                                    "body": {
                                                        "mode": "json"
                                                    },
                                                    "script": {},
                                                    "vars": {},
                                                    "assertions": [
                                                        {
                                                            "name": "res.status",
                                                            "value": "401",
                                                            "enabled": true,
                                                            "uid": "2sLf7ghLjlh9EPvY9tuwT"
                                                        },
                                                        {
                                                            "name": "res.body",
                                                            "value": "Unauthorized",
                                                            "enabled": true,
                                                            "uid": "jkR2mpY8L6HFuLZDZ7yC1"
                                                        }
                                                    ],
                                                    "tests": "",
                                                    "docs": ""
                                                },
                                                "filename": "Basic Auth 401.bru",
                                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/auth/basic/via auth/Basic Auth 401.bru",
                                                "draft": null,
                                                "partial": false,
                                                "loading": false,
                                                "size": 0.0002288818359375,
                                                "depth": 4
                                            }
                                        ],
                                        "depth": 3
                                    },
                                    {
                                        "uid": "XQRqX7kEEBDv1JzWnWHSt",
                                        "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/auth/basic/via script",
                                        "name": "via script",
                                        "seq": 1,
                                        "filename": "via script",
                                        "collapsed": true,
                                        "type": "folder",
                                        "items": [
                                            {
                                                "uid": "xcU8e5J7rWZOmDrbA9svv",
                                                "name": "Basic Auth 200",
                                                "type": "http-request",
                                                "seq": 1,
                                                "request": {
                                                    "method": "POST",
                                                    "url": "{{host}}/api/auth/basic/protected",
                                                    "params": [],
                                                    "headers": [],
                                                    "auth": {
                                                        "mode": "none"
                                                    },
                                                    "body": {
                                                        "mode": "json"
                                                    },
                                                    "script": {
                                                        "req": "const username = \"bruno\";\nconst password = \"della\";\n\nconst authString = `${username}:${password}`;\nconst encodedAuthString = require('btoa')(authString);\n\nreq.setHeader(\"Authorization\", `Basic ${encodedAuthString}`);"
                                                    },
                                                    "vars": {},
                                                    "assertions": [
                                                        {
                                                            "name": "res.status",
                                                            "value": "eq 200",
                                                            "enabled": true,
                                                            "uid": "RFTZ6DQznNTsqLhQhxl8N"
                                                        },
                                                        {
                                                            "name": "res.body.message",
                                                            "value": "Authentication successful",
                                                            "enabled": true,
                                                            "uid": "4JltMDQ799g9jL5zDyFPp"
                                                        }
                                                    ],
                                                    "tests": "",
                                                    "docs": ""
                                                },
                                                "filename": "Basic Auth 200.bru",
                                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/auth/basic/via script/Basic Auth 200.bru",
                                                "draft": null,
                                                "partial": false,
                                                "loading": false,
                                                "size": 0.00044345855712890625,
                                                "depth": 4
                                            },
                                            {
                                                "uid": "jn9ckoCEK3oegW6gsr22i",
                                                "name": "Basic Auth 401",
                                                "type": "http-request",
                                                "seq": 2,
                                                "request": {
                                                    "method": "POST",
                                                    "url": "{{host}}/api/auth/basic/protected",
                                                    "params": [],
                                                    "headers": [],
                                                    "auth": {
                                                        "mode": "none"
                                                    },
                                                    "body": {
                                                        "mode": "json"
                                                    },
                                                    "script": {
                                                        "req": "const username = \"bruno\";\nconst password = \"invalid\";\n\nconst authString = `${username}:${password}`;\nconst encodedAuthString = require('btoa')(authString);\n\nreq.setHeader(\"Authorization\", `Basic ${encodedAuthString}`);"
                                                    },
                                                    "vars": {},
                                                    "assertions": [
                                                        {
                                                            "name": "res.status",
                                                            "value": "401",
                                                            "enabled": true,
                                                            "uid": "FmrP6drpnaWEDSuf1oYLD"
                                                        },
                                                        {
                                                            "name": "res.body",
                                                            "value": "Unauthorized",
                                                            "enabled": true,
                                                            "uid": "ipWqgrtkUZV0OiIobbiIM"
                                                        }
                                                    ],
                                                    "tests": "",
                                                    "docs": ""
                                                },
                                                "filename": "Basic Auth 401.bru",
                                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/auth/basic/via script/Basic Auth 401.bru",
                                                "draft": null,
                                                "partial": false,
                                                "loading": false,
                                                "size": 0.00042247772216796875,
                                                "depth": 4
                                            }
                                        ],
                                        "depth": 3
                                    }
                                ],
                                "depth": 2
                            },
                            {
                                "uid": "Ht4ERGD8qAS6Su7sz9MMC",
                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/auth/bearer",
                                "name": "bearer",
                                "seq": 1,
                                "filename": "bearer",
                                "collapsed": true,
                                "type": "folder",
                                "items": [
                                    {
                                        "uid": "EdbocyqFblznjHA2D3bLT",
                                        "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/auth/bearer/via auth",
                                        "name": "via auth",
                                        "seq": 1,
                                        "filename": "via auth",
                                        "collapsed": true,
                                        "type": "folder",
                                        "items": [
                                            {
                                                "uid": "n0TNqoNKqslp2YYZOt4uR",
                                                "name": "Bearer Auth 200",
                                                "type": "http-request",
                                                "seq": 1,
                                                "request": {
                                                    "method": "GET",
                                                    "url": "{{host}}/api/auth/bearer/protected",
                                                    "params": [],
                                                    "headers": [],
                                                    "auth": {
                                                        "bearer": {
                                                            "token": "{{bearer_auth_token}}"
                                                        },
                                                        "mode": "bearer"
                                                    },
                                                    "body": {
                                                        "mode": "none"
                                                    },
                                                    "script": {
                                                        "res": "bru.setEnvVar(\"foo\", \"bar\");"
                                                    },
                                                    "vars": {},
                                                    "assertions": [
                                                        {
                                                            "name": "res.status",
                                                            "value": "200",
                                                            "enabled": true,
                                                            "uid": "BbeOSbxR028lwPOhgUpRb"
                                                        },
                                                        {
                                                            "name": "res.body.message",
                                                            "value": "Authentication successful",
                                                            "enabled": true,
                                                            "uid": "dMzJoaIRaHT3DjrvNQcRt"
                                                        }
                                                    ],
                                                    "tests": "",
                                                    "docs": ""
                                                },
                                                "filename": "Bearer Auth 200.bru",
                                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/auth/bearer/via auth/Bearer Auth 200.bru",
                                                "draft": null,
                                                "partial": false,
                                                "loading": false,
                                                "size": 0.00030040740966796875,
                                                "depth": 4
                                            },
                                            {
                                                "uid": "5Av3HbbU37WDCK5GRtWd6",
                                                "name": "Bearer Auth undefined",
                                                "type": "http-request",
                                                "seq": 2,
                                                "request": {
                                                    "method": "GET",
                                                    "url": "{{host}}/api/auth/bearer/protected",
                                                    "params": [],
                                                    "headers": [
                                                        {
                                                            "name": "Authorization",
                                                            "value": "Bearer {{bearer_auth_token}}",
                                                            "enabled": true,
                                                            "uid": "qkKbDeHOlnjnDz91GOyIl"
                                                        }
                                                    ],
                                                    "auth": {
                                                        "mode": "bearer"
                                                    },
                                                    "body": {
                                                        "mode": "none"
                                                    },
                                                    "script": {},
                                                    "vars": {},
                                                    "assertions": [
                                                        {
                                                            "name": "res.body.message",
                                                            "value": "eq Unauthorized",
                                                            "enabled": true,
                                                            "uid": "B8MqoXqYprP2PL4NAcbc5"
                                                        },
                                                        {
                                                            "name": "res.status",
                                                            "value": "eq 401",
                                                            "enabled": true,
                                                            "uid": "tkyipl1rfiWHgJUOQM8di"
                                                        }
                                                    ],
                                                    "tests": "test(\"selected auth overrides Authorization header always\", function() {\n  const authHeader =  req.getHeader(\"Authorization\")\n  expect(authHeader).to.eql(\"Bearer \")\n})",
                                                    "docs": ""
                                                },
                                                "filename": "Bearer Auth undefined.bru",
                                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/auth/bearer/via auth/Bearer Auth undefined.bru",
                                                "draft": null,
                                                "partial": false,
                                                "loading": false,
                                                "size": 0.00043392181396484375,
                                                "depth": 4
                                            }
                                        ],
                                        "depth": 3
                                    },
                                    {
                                        "uid": "QeRCJ8UyI8vaEweSrrw6q",
                                        "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/auth/bearer/via headers",
                                        "name": "via headers",
                                        "seq": 1,
                                        "filename": "via headers",
                                        "collapsed": true,
                                        "type": "folder",
                                        "items": [
                                            {
                                                "uid": "qNYFvGEOJ1cnrqH3FIgG8",
                                                "name": "Bearer Auth 200",
                                                "type": "http-request",
                                                "seq": 1,
                                                "request": {
                                                    "method": "GET",
                                                    "url": "{{host}}/api/auth/bearer/protected",
                                                    "params": [],
                                                    "headers": [
                                                        {
                                                            "name": "Authorization",
                                                            "value": "Bearer {{bearer_auth_token}}",
                                                            "enabled": true,
                                                            "uid": "HTpy4UGLlodpuIW3W6uVT"
                                                        }
                                                    ],
                                                    "auth": {
                                                        "mode": "none"
                                                    },
                                                    "body": {
                                                        "mode": "json"
                                                    },
                                                    "script": {
                                                        "res": "bru.setEnvVar(\"foo\", \"bar\");"
                                                    },
                                                    "vars": {
                                                        "req": [
                                                            {
                                                                "name": "a-c",
                                                                "value": "foo",
                                                                "enabled": true,
                                                                "local": false,
                                                                "uid": "t99a7odjwKPTJqe3511xX"
                                                            }
                                                        ]
                                                    },
                                                    "assertions": [
                                                        {
                                                            "name": "res.status",
                                                            "value": "200",
                                                            "enabled": true,
                                                            "uid": "LSUEWLJvrwmKRkW5N9QW0"
                                                        },
                                                        {
                                                            "name": "res.body.message",
                                                            "value": "Authentication successful",
                                                            "enabled": true,
                                                            "uid": "uSh6pGQRxkIRVr1Tz4T30"
                                                        }
                                                    ],
                                                    "tests": "",
                                                    "docs": ""
                                                },
                                                "filename": "Bearer Auth 200.bru",
                                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/auth/bearer/via headers/Bearer Auth 200.bru",
                                                "draft": null,
                                                "partial": false,
                                                "loading": false,
                                                "size": 0.00034046173095703125,
                                                "depth": 4
                                            }
                                        ],
                                        "depth": 3
                                    }
                                ],
                                "depth": 2
                            },
                            {
                                "uid": "S6EpKZ0XeMlYnXeVUdgeU",
                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/auth/cookie",
                                "name": "cookie",
                                "seq": 1,
                                "filename": "cookie",
                                "collapsed": true,
                                "type": "folder",
                                "items": [
                                    {
                                        "uid": "310EYOGdzZ0qbFAuKQSuB",
                                        "name": "Check",
                                        "type": "http-request",
                                        "seq": 2,
                                        "request": {
                                            "method": "GET",
                                            "url": "{{host}}/api/auth/cookie/protected",
                                            "params": [],
                                            "headers": [],
                                            "auth": {
                                                "mode": "none"
                                            },
                                            "body": {
                                                "mode": "none"
                                            },
                                            "script": {},
                                            "vars": {},
                                            "assertions": [],
                                            "tests": "",
                                            "docs": ""
                                        },
                                        "filename": "Check.bru",
                                        "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/auth/cookie/Check.bru",
                                        "draft": null,
                                        "partial": false,
                                        "loading": false,
                                        "size": 0.0001163482666015625,
                                        "depth": 3
                                    },
                                    {
                                        "uid": "RMDKl4G6ePElNTv5S6Q5P",
                                        "name": "Login",
                                        "type": "http-request",
                                        "seq": 1,
                                        "request": {
                                            "method": "POST",
                                            "url": "{{host}}/api/auth/cookie/login",
                                            "params": [],
                                            "headers": [],
                                            "auth": {
                                                "mode": "none"
                                            },
                                            "body": {
                                                "mode": "none"
                                            },
                                            "script": {},
                                            "vars": {},
                                            "assertions": [],
                                            "tests": "",
                                            "docs": ""
                                        },
                                        "filename": "Login.bru",
                                        "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/auth/cookie/Login.bru",
                                        "draft": null,
                                        "partial": false,
                                        "loading": false,
                                        "size": 0.00011348724365234375,
                                        "depth": 3
                                    }
                                ],
                                "depth": 2
                            },
                            {
                                "uid": "hlPQVJt24oTMcHM0XjI9n",
                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/auth/digest",
                                "name": "digest",
                                "seq": 1,
                                "filename": "digest",
                                "collapsed": true,
                                "type": "folder",
                                "items": [
                                    {
                                        "uid": "jJeoRSQ9Ntg2LbGMdOhmv",
                                        "name": "Digest Auth 200",
                                        "type": "http-request",
                                        "seq": 1,
                                        "request": {
                                            "method": "GET",
                                            "url": "https://httpbin.org/digest-auth/auth/foo/passwd",
                                            "params": [],
                                            "headers": [],
                                            "auth": {
                                                "digest": {
                                                    "username": "foo",
                                                    "password": "passwd"
                                                },
                                                "mode": "digest"
                                            },
                                            "body": {
                                                "mode": "none"
                                            },
                                            "script": {},
                                            "vars": {},
                                            "assertions": [
                                                {
                                                    "name": "res.status",
                                                    "value": "eq 200",
                                                    "enabled": true,
                                                    "uid": "e36v16mDdVp8462V5Lp7u"
                                                },
                                                {
                                                    "name": "res.body.authenticated",
                                                    "value": "isTruthy",
                                                    "enabled": true,
                                                    "uid": "P8HjggA5tt9d1ncVPYcY0"
                                                }
                                            ],
                                            "tests": "",
                                            "docs": ""
                                        },
                                        "filename": "Digest Auth 200.bru",
                                        "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/auth/digest/Digest Auth 200.bru",
                                        "draft": null,
                                        "partial": false,
                                        "loading": false,
                                        "size": 0.00025463104248046875,
                                        "depth": 3
                                    },
                                    {
                                        "uid": "f1PlyqhRRufiX8uTH4LCT",
                                        "name": "Digest Auth 401",
                                        "type": "http-request",
                                        "seq": 2,
                                        "request": {
                                            "method": "GET",
                                            "url": "https://httpbin.org/digest-auth/auth/foo/passw",
                                            "params": [],
                                            "headers": [],
                                            "auth": {
                                                "digest": {
                                                    "username": "foo",
                                                    "password": "passwd"
                                                },
                                                "mode": "digest"
                                            },
                                            "body": {
                                                "mode": "none"
                                            },
                                            "script": {},
                                            "vars": {},
                                            "assertions": [
                                                {
                                                    "name": "res.status",
                                                    "value": "eq 401",
                                                    "enabled": true,
                                                    "uid": "wG2qJWjkIl9Gqezp0f7Iz"
                                                }
                                            ],
                                            "tests": "",
                                            "docs": ""
                                        },
                                        "filename": "Digest Auth 401.bru",
                                        "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/auth/digest/Digest Auth 401.bru",
                                        "draft": null,
                                        "partial": false,
                                        "loading": false,
                                        "size": 0.00022029876708984375,
                                        "depth": 3
                                    }
                                ],
                                "depth": 2,
                                "root": {
                                    "request": {
                                        "headers": [],
                                        "auth": {},
                                        "script": {},
                                        "vars": {},
                                        "tests": ""
                                    },
                                    "docs": "",
                                    "meta": {
                                        "name": "digest",
                                        "seq": 1
                                    }
                                }
                            },
                            {
                                "uid": "xL8AJpTGsrGnmQwWmODS8",
                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/auth/inherit auth",
                                "name": "inherit auth",
                                "seq": 1,
                                "filename": "inherit auth",
                                "collapsed": true,
                                "type": "folder",
                                "items": [
                                    {
                                        "uid": "RUySetzdSXB4Wi1U6SLF0",
                                        "name": "inherit Bearer Auth 200",
                                        "type": "http-request",
                                        "seq": 2,
                                        "request": {
                                            "method": "GET",
                                            "url": "{{host}}/api/auth/bearer/protected",
                                            "params": [],
                                            "headers": [],
                                            "auth": {
                                                "mode": "inherit"
                                            },
                                            "body": {
                                                "mode": "none"
                                            },
                                            "script": {
                                                "res": "bru.setEnvVar(\"foo\", \"bar\");"
                                            },
                                            "vars": {},
                                            "assertions": [
                                                {
                                                    "name": "res.status",
                                                    "value": "200",
                                                    "enabled": true,
                                                    "uid": "qSc95AUZgvonDL2dxkaOX"
                                                },
                                                {
                                                    "name": "res.body.message",
                                                    "value": "Authentication successful",
                                                    "enabled": true,
                                                    "uid": "HI0e0oCj4eercCadZr9EU"
                                                }
                                            ],
                                            "tests": "",
                                            "docs": ""
                                        },
                                        "filename": "inherit Bearer Auth 200.bru",
                                        "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/auth/inherit auth/inherit Bearer Auth 200.bru",
                                        "draft": null,
                                        "partial": false,
                                        "loading": false,
                                        "size": 0.000263214111328125,
                                        "depth": 3
                                    }
                                ],
                                "depth": 2
                            }
                        ],
                        "depth": 1
                    },
                    {
                        "uid": "KR3bBkUR4ElnAJxJtaYUg",
                        "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/echo",
                        "name": "echo",
                        "seq": 1,
                        "filename": "echo",
                        "collapsed": true,
                        "type": "folder",
                        "items": [
                            {
                                "uid": "L23vZJUopMk26YSs9085O",
                                "name": "echo bom json",
                                "type": "http-request",
                                "seq": 1,
                                "request": {
                                    "method": "GET",
                                    "url": "{{host}}/api/echo/bom-json-test",
                                    "params": [],
                                    "headers": [],
                                    "auth": {
                                        "mode": "none"
                                    },
                                    "body": {
                                        "mode": "none"
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [],
                                    "tests": "",
                                    "docs": ""
                                },
                                "filename": "echo bom json.bru",
                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/echo/echo bom json.bru",
                                "draft": null,
                                "partial": false,
                                "loading": false,
                                "size": 0.0001201629638671875,
                                "depth": 2
                            },
                            {
                                "uid": "AkXsl9sBVfCAelvL7848e",
                                "name": "echo form-url-encoded",
                                "type": "http-request",
                                "seq": 11,
                                "request": {
                                    "method": "POST",
                                    "url": "{{echo-host}}",
                                    "params": [],
                                    "headers": [],
                                    "auth": {
                                        "mode": "none"
                                    },
                                    "body": {
                                        "formUrlEncoded": [
                                            {
                                                "name": "form-data-key",
                                                "value": "{{form-data-key}}",
                                                "enabled": true,
                                                "uid": "62hqus7jNv60kNrRnzi4R"
                                            },
                                            {
                                                "name": "form-data-stringified-object",
                                                "value": "{{form-data-stringified-object}}",
                                                "enabled": true,
                                                "uid": "2i3RQlyfKegZZZBwMdtsI"
                                            }
                                        ],
                                        "mode": "formUrlEncoded"
                                    },
                                    "script": {
                                        "req": "let obj = JSON.stringify({foo:123});\nbru.setVar('form-data-key', 'form-data-value');\nbru.setVar('form-data-stringified-object', obj);"
                                    },
                                    "vars": {},
                                    "assertions": [
                                        {
                                            "name": "res.body",
                                            "value": "eq form-data-key=form-data-value&form-data-stringified-object=%7B%22foo%22%3A123%7D",
                                            "enabled": true,
                                            "uid": "MJxODM6itmmeye2bI5BWC"
                                        }
                                    ],
                                    "tests": "",
                                    "docs": ""
                                },
                                "filename": "echo form-url-encoded.bru",
                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/echo/echo form-url-encoded.bru",
                                "draft": null,
                                "partial": false,
                                "loading": false,
                                "size": 0.0005025863647460938,
                                "depth": 2
                            },
                            {
                                "uid": "oyGbiKd759zQHduySp3wl",
                                "name": "echo headers",
                                "type": "http-request",
                                "seq": 9,
                                "request": {
                                    "method": "POST",
                                    "url": "{{echo-host}}",
                                    "params": [],
                                    "headers": [
                                        {
                                            "name": "Custom-Header-String",
                                            "value": "bruno",
                                            "enabled": true,
                                            "uid": "ZJtcDSJxPY7FGQYBV7eIJ"
                                        }
                                    ],
                                    "auth": {
                                        "mode": "inherit"
                                    },
                                    "body": {
                                        "mode": "none"
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [],
                                    "tests": "test(\"test headers\",function() {\n  expect(res.getHeaders()).to.have.property(\"Custom-Header-String\".toLowerCase())\n  expect(res.getHeaders()).to.have.property(\"Custom-Header-String\".toLowerCase(), \"bruno\")\n})",
                                    "docs": ""
                                },
                                "filename": "echo headers.bru",
                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/echo/echo headers.bru",
                                "draft": null,
                                "partial": false,
                                "loading": false,
                                "size": 0.00036525726318359375,
                                "depth": 2
                            },
                            {
                                "uid": "BwsUdaf6QI4LQcHN71AsX",
                                "name": "echo json",
                                "type": "http-request",
                                "seq": 4,
                                "request": {
                                    "method": "POST",
                                    "url": "{{host}}/api/echo/json",
                                    "params": [],
                                    "headers": [
                                        {
                                            "name": "foo",
                                            "value": "bar",
                                            "enabled": true,
                                            "uid": "SbiXzx2X3aBdA4zy7BODl"
                                        }
                                    ],
                                    "auth": {
                                        "basic": {
                                            "username": "asd",
                                            "password": "j"
                                        },
                                        "bearer": {
                                            "token": ""
                                        },
                                        "mode": "none"
                                    },
                                    "body": {
                                        "json": "{\n  \"hello\": \"bruno\"\n}",
                                        "mode": "json"
                                    },
                                    "script": {
                                        "req": "bru.setVar(\"foo\", \"foo-world-2\");\nconsole.log(\"ping\");"
                                    },
                                    "vars": {},
                                    "assertions": [
                                        {
                                            "name": "res.status",
                                            "value": "eq 200",
                                            "enabled": true,
                                            "uid": "KOUT9lQWInFnDE09w3Xcs"
                                        }
                                    ],
                                    "tests": "test(\"should return json\", function() {\n  const data = res.getBody();\n  expect(res.getBody()).to.eql({\n    \"hello\": \"brunoooo\"\n  });\n});\n",
                                    "docs": ""
                                },
                                "filename": "echo json.bru",
                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/echo/echo json.bru",
                                "draft": null,
                                "partial": false,
                                "loading": false,
                                "size": 0.0005102157592773438,
                                "depth": 2
                            },
                            {
                                "uid": "ZZmPldn3yVApMK5sEeQmj",
                                "name": "echo multipart via scripting",
                                "type": "http-request",
                                "seq": 13,
                                "request": {
                                    "method": "POST",
                                    "url": "{{echo-host}}",
                                    "params": [],
                                    "headers": [],
                                    "auth": {
                                        "mode": "none"
                                    },
                                    "body": {
                                        "mode": "multipartForm"
                                    },
                                    "script": {
                                        "req": "const FormData = require(\"form-data\");\nconst form = new FormData();\nform.append('form-data-key', 'form-data-value');\nreq.setBody(form);"
                                    },
                                    "vars": {},
                                    "assertions": [
                                        {
                                            "name": "res.body",
                                            "value": "contains form-data-value",
                                            "enabled": true,
                                            "uid": "OXZWDrkAfnanp4432wFqb"
                                        }
                                    ],
                                    "tests": "",
                                    "docs": ""
                                },
                                "filename": "echo multipart scripting.bru",
                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/echo/echo multipart scripting.bru",
                                "draft": null,
                                "partial": false,
                                "loading": false,
                                "size": 0.000335693359375,
                                "depth": 2
                            },
                            {
                                "uid": "MXm4TtvFNKP8OhoS3gVR7",
                                "name": "echo multipart",
                                "type": "http-request",
                                "seq": 12,
                                "request": {
                                    "method": "POST",
                                    "url": "{{echo-host}}",
                                    "params": [],
                                    "headers": [],
                                    "auth": {
                                        "mode": "none"
                                    },
                                    "body": {
                                        "multipartForm": [
                                            {
                                                "name": "foo",
                                                "value": "{\"bar\":\"baz\"}",
                                                "enabled": true,
                                                "type": "text",
                                                "contentType": "application/json--test",
                                                "uid": "Sfu52HbfFOPk5cTF83djo"
                                            },
                                            {
                                                "name": "form-data-key",
                                                "value": "{{form-data-key}}",
                                                "enabled": true,
                                                "type": "text",
                                                "contentType": "",
                                                "uid": "DvEvZZtltGnEoybW9wDk1"
                                            },
                                            {
                                                "name": "form-data-stringified-object",
                                                "value": "{{form-data-stringified-object}}",
                                                "enabled": true,
                                                "type": "text",
                                                "contentType": "",
                                                "uid": "fuT8KfB4O8LtslghIdAth"
                                            },
                                            {
                                                "name": "file",
                                                "value": [
                                                    "bruno.png"
                                                ],
                                                "enabled": true,
                                                "type": "file",
                                                "contentType": "",
                                                "uid": "PSqeAKSt34YPaMsHsXmjB"
                                            }
                                        ],
                                        "mode": "multipartForm"
                                    },
                                    "script": {
                                        "req": "let obj = JSON.stringify({foo:123});\nbru.setVar('form-data-key', 'form-data-value');\nbru.setVar('form-data-stringified-object', obj);"
                                    },
                                    "vars": {},
                                    "assertions": [
                                        {
                                            "name": "res.body",
                                            "value": "contains form-data-value",
                                            "enabled": true,
                                            "uid": "QXmns6LnE6FWCQj4xNdgZ"
                                        },
                                        {
                                            "name": "res.body",
                                            "value": "contains {\"foo\":123}",
                                            "enabled": true,
                                            "uid": "SVvMFGBKh4y8yMxp2cKha"
                                        },
                                        {
                                            "name": "res.body",
                                            "value": "contains Content-Type: application/json--test",
                                            "enabled": true,
                                            "uid": "W4SF3UoYtTONygk21wWsv"
                                        }
                                    ],
                                    "tests": "",
                                    "docs": ""
                                },
                                "filename": "echo multipart.bru",
                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/echo/echo multipart.bru",
                                "draft": null,
                                "partial": false,
                                "loading": false,
                                "size": 0.0006036758422851562,
                                "depth": 2
                            },
                            {
                                "uid": "ul8hPz2Uk883kDjPMI7ge",
                                "name": "echo numbers",
                                "type": "http-request",
                                "seq": 2,
                                "request": {
                                    "method": "POST",
                                    "url": "{{echo-host}}",
                                    "params": [],
                                    "headers": [],
                                    "auth": {
                                        "mode": "none"
                                    },
                                    "body": {
                                        "json": "{\n  \"integer\": 123,\n  \"negativeInteger\": -99,\n  \"zero\": 0,\n  \"float\": 2.718,\n  \"negativeFloat\": -1.618,\n  \"largeDouble\": 12345.678901234567,\n  \"smallDouble\": 9.876e-12,\n  \"booleanTrue\": true,\n  \"booleanFalse\": false\n}",
                                        "mode": "json"
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [
                                        {
                                            "name": "res.body.integer",
                                            "value": "eq 123",
                                            "enabled": true,
                                            "uid": "sgX1YlVhGOj67ag7Ixj9S"
                                        },
                                        {
                                            "name": "res.body.integer",
                                            "value": "isNumber",
                                            "enabled": true,
                                            "uid": "QNszfdnCcbXa72yJyHlbM"
                                        },
                                        {
                                            "name": "res.body.negativeInteger",
                                            "value": "eq -99",
                                            "enabled": true,
                                            "uid": "7ixgajzSM00hfmD5nrLCx"
                                        },
                                        {
                                            "name": "res.body.negativeInteger",
                                            "value": "isNumber",
                                            "enabled": true,
                                            "uid": "RJYoL2Kqp82XQeTJuKwU8"
                                        },
                                        {
                                            "name": "res.body.zero",
                                            "value": "eq 0",
                                            "enabled": true,
                                            "uid": "2QuWPhWrRAI7xcrbsQM8t"
                                        },
                                        {
                                            "name": "res.body.zero",
                                            "value": "isNumber",
                                            "enabled": true,
                                            "uid": "5iS3nNumzWBzhEFo1TI4g"
                                        },
                                        {
                                            "name": "res.body.float",
                                            "value": "eq 2.718",
                                            "enabled": true,
                                            "uid": "bhiPjEzxxTfSwBY6HPVwi"
                                        },
                                        {
                                            "name": "res.body.float",
                                            "value": "isNumber",
                                            "enabled": true,
                                            "uid": "P1ItS2jaJjTxGQPVorszi"
                                        },
                                        {
                                            "name": "res.body.negativeFloat",
                                            "value": "eq -1.618",
                                            "enabled": true,
                                            "uid": "fStHI00vA49XnR9ksNbld"
                                        },
                                        {
                                            "name": "res.body.negativeFloat",
                                            "value": "isNumber",
                                            "enabled": true,
                                            "uid": "DwHemcWC51BRJegKKSmqf"
                                        },
                                        {
                                            "name": "res.body.largeDouble",
                                            "value": "eq 12345.678901234567",
                                            "enabled": true,
                                            "uid": "EsxP61MPDBcVCVc8isV4u"
                                        },
                                        {
                                            "name": "res.body.largeDouble",
                                            "value": "isNumber",
                                            "enabled": true,
                                            "uid": "m0zqS3hm8QGOtD61QyMIa"
                                        },
                                        {
                                            "name": "res.body.smallDouble",
                                            "value": "eq 9.876e-12",
                                            "enabled": true,
                                            "uid": "JPWkMy1AgzNP4mubjVI3z"
                                        },
                                        {
                                            "name": "res.body.smallDouble",
                                            "value": "isNumber",
                                            "enabled": true,
                                            "uid": "vhKBXvBx4vsOoxJ7GivlC"
                                        },
                                        {
                                            "name": "res.body.booleanTrue",
                                            "value": "eq true",
                                            "enabled": true,
                                            "uid": "bfJ5sfG3ABESodcffJKtH"
                                        },
                                        {
                                            "name": "res.body.booleanFalse",
                                            "value": "eq false",
                                            "enabled": true,
                                            "uid": "aVkWsBUgYx53WGyhtyXpi"
                                        }
                                    ],
                                    "tests": "",
                                    "docs": ""
                                },
                                "filename": "echo numbers.bru",
                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/echo/echo numbers.bru",
                                "draft": null,
                                "partial": false,
                                "loading": false,
                                "size": 0.000850677490234375,
                                "depth": 2
                            },
                            {
                                "uid": "nzu4y4KdU6OZ3CmAM1MMS",
                                "name": "echo plaintext",
                                "type": "http-request",
                                "seq": 5,
                                "request": {
                                    "method": "POST",
                                    "url": "{{host}}/api/echo/text",
                                    "params": [],
                                    "headers": [
                                        {
                                            "name": "content-type",
                                            "value": "application/x-www-form-urlencoded",
                                            "enabled": true,
                                            "uid": "Ntfn2e1sa1EBUMOCfvMjR"
                                        },
                                        {
                                            "name": "header",
                                            "value": "header",
                                            "enabled": true,
                                            "uid": "GXZxeJTrfSM4ENT1kE8Gr"
                                        }
                                    ],
                                    "auth": {
                                        "mode": "none"
                                    },
                                    "body": {
                                        "text": "{{hosttttt}}",
                                        "mode": "text"
                                    },
                                    "script": {
                                        "req": "bru.setVar('hosttttt', 'hosttttt');"
                                    },
                                    "vars": {},
                                    "assertions": [
                                        {
                                            "name": "res.status",
                                            "value": "eq 200",
                                            "enabled": true,
                                            "uid": "qEdG4zUQEIVGm6UIw8P2l"
                                        }
                                    ],
                                    "tests": "test(\"should return plain text\", function() {\n  const data = res.getBody();\n  expect(res.getBody()).to.eql(\"hello\");\n});\n",
                                    "docs": ""
                                },
                                "filename": "echo plaintext.bru",
                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/echo/echo plaintext.bru",
                                "draft": null,
                                "partial": false,
                                "loading": false,
                                "size": 0.000446319580078125,
                                "depth": 2
                            },
                            {
                                "uid": "40VAv43RaMYgKWqZO5u7B",
                                "name": "echo xml parsed(self closing tags)",
                                "type": "http-request",
                                "seq": 10,
                                "request": {
                                    "method": "POST",
                                    "url": "{{host}}/api/echo/xml-parsed",
                                    "params": [],
                                    "headers": [],
                                    "auth": {
                                        "mode": "none"
                                    },
                                    "body": {
                                        "xml": "<hello>\n  <world>bruno</world>\n  <world/>\n</hello>",
                                        "mode": "xml"
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [
                                        {
                                            "name": "res.status",
                                            "value": "eq 200",
                                            "enabled": true,
                                            "uid": "rfY3Qagu3VWxNz8JIUgdC"
                                        }
                                    ],
                                    "tests": "test(\"should return parsed xml\", function() {\n  const data = res.getBody();\n  expect(res.getBody()).to.eql({\n    \"hello\": {\n      \"world\": [\n        \"bruno\",\n        \"\"\n      ]\n    }\n  });\n});\n",
                                    "docs": ""
                                },
                                "filename": "echo xml parsed(self closing tags).bru",
                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/echo/echo xml parsed(self closing tags).bru",
                                "draft": null,
                                "partial": false,
                                "loading": false,
                                "size": 0.00045871734619140625,
                                "depth": 2
                            },
                            {
                                "uid": "AqiNjOCsRcXugWi2s16Yd",
                                "name": "echo xml parsed",
                                "type": "http-request",
                                "seq": 6,
                                "request": {
                                    "method": "POST",
                                    "url": "{{host}}/api/echo/xml-parsed",
                                    "params": [],
                                    "headers": [],
                                    "auth": {
                                        "mode": "none"
                                    },
                                    "body": {
                                        "xml": "<hello>\n  <world>bruno</world>\n</hello>",
                                        "mode": "xml"
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [
                                        {
                                            "name": "res.status",
                                            "value": "eq 200",
                                            "enabled": true,
                                            "uid": "jFQTYQsq77VlBjleQUlDM"
                                        }
                                    ],
                                    "tests": "test(\"should return parsed xml\", function() {\n  const data = res.getBody();\n  expect(res.getBody()).to.eql({\n    \"hello\": {\n      \"world\": [\"bruno\"]\n    }\n  });\n});\n",
                                    "docs": ""
                                },
                                "filename": "echo xml parsed.bru",
                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/echo/echo xml parsed.bru",
                                "draft": null,
                                "partial": false,
                                "loading": false,
                                "size": 0.0003948211669921875,
                                "depth": 2
                            },
                            {
                                "uid": "oIOxNuyUo0WsPsnVEnolJ",
                                "name": "echo xml raw",
                                "type": "http-request",
                                "seq": 8,
                                "request": {
                                    "method": "POST",
                                    "url": "{{host}}/api/echo/xml-raw",
                                    "params": [],
                                    "headers": [],
                                    "auth": {
                                        "mode": "none"
                                    },
                                    "body": {
                                        "xml": "<hello><world>bruno</world></hello>",
                                        "mode": "xml"
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [],
                                    "tests": "",
                                    "docs": ""
                                },
                                "filename": "echo xml raw.bru",
                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/echo/echo xml raw.bru",
                                "draft": null,
                                "partial": false,
                                "loading": false,
                                "size": 0.000164031982421875,
                                "depth": 2
                            },
                            {
                                "uid": "LL3O9ErX5kTmvJ1I5jtyb",
                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/echo/multiline",
                                "name": "multiline",
                                "seq": 3,
                                "filename": "multiline",
                                "collapsed": true,
                                "type": "folder",
                                "items": [
                                    {
                                        "uid": "ZWiILKn21GpMjglxrZGfv",
                                        "name": "echo binary",
                                        "type": "http-request",
                                        "seq": 1,
                                        "request": {
                                            "method": "POST",
                                            "url": "{{echo-host}}",
                                            "params": [],
                                            "headers": [],
                                            "auth": {
                                                "mode": "none"
                                            },
                                            "body": {
                                                "file": [
                                                    {
                                                        "contentType": "image/png",
                                                        "filePath": "bruno.png",
                                                        "selected": true,
                                                        "uid": "TRztjlH4GhyMyRzyxzJQH"
                                                    }
                                                ],
                                                "mode": "file"
                                            },
                                            "script": {},
                                            "vars": {},
                                            "assertions": [],
                                            "tests": "",
                                            "docs": ""
                                        },
                                        "filename": "echo binary.bru",
                                        "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/echo/multiline/echo binary.bru",
                                        "draft": null,
                                        "partial": false,
                                        "loading": false,
                                        "size": 0.000164031982421875,
                                        "depth": 3
                                    }
                                ],
                                "depth": 2,
                                "root": {
                                    "request": {
                                        "headers": [],
                                        "auth": {},
                                        "script": {},
                                        "vars": {},
                                        "tests": ""
                                    },
                                    "docs": "",
                                    "meta": {
                                        "name": "multiline",
                                        "seq": 3
                                    }
                                }
                            },
                            {
                                "uid": "NI8gDZBYoEbhFHk8soa0m",
                                "name": "test echo any",
                                "type": "http-request",
                                "seq": 14,
                                "request": {
                                    "method": "POST",
                                    "url": "{{httpfaker}}/api/echo/custom",
                                    "params": [],
                                    "headers": [],
                                    "auth": {
                                        "mode": "none"
                                    },
                                    "body": {
                                        "json": "{\n  \"headers\": { \"content-type\": \"text/plain\" },\n  \"content\": \"hello\"\n}",
                                        "mode": "json"
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [
                                        {
                                            "name": "res.body",
                                            "value": "eq hello",
                                            "enabled": true,
                                            "uid": "4HNIrRxXDwnxcrjkqpRTe"
                                        }
                                    ],
                                    "tests": "",
                                    "docs": ""
                                },
                                "filename": "test echo any.bru",
                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/echo/test echo any.bru",
                                "draft": null,
                                "partial": false,
                                "loading": false,
                                "size": 0.00024318695068359375,
                                "depth": 2
                            },
                            {
                                "uid": "0TrGm79X0MAw5HUAlslRB",
                                "name": "test echo-any json",
                                "type": "http-request",
                                "seq": 7,
                                "request": {
                                    "method": "POST",
                                    "url": "{{httpfaker}}/api/echo/custom",
                                    "params": [],
                                    "headers": [],
                                    "auth": {
                                        "mode": "none"
                                    },
                                    "body": {
                                        "json": "{\n  \"type\": \"application/json\",\n  \"contentJSON\": {\"x\": 42}\n}",
                                        "mode": "json"
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [
                                        {
                                            "name": "res.body.x",
                                            "value": "eq 42",
                                            "enabled": true,
                                            "uid": "HS2pSy7Am0kf6LafpaXig"
                                        }
                                    ],
                                    "tests": "",
                                    "docs": ""
                                },
                                "filename": "test echo-any json.bru",
                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/echo/test echo-any json.bru",
                                "draft": null,
                                "partial": false,
                                "loading": false,
                                "size": 0.00023555755615234375,
                                "depth": 2
                            }
                        ],
                        "depth": 1
                    },
                    {
                        "uid": "3tGsJ2ztFepfSyDNsWpg0",
                        "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/folder",
                        "name": "folder",
                        "seq": 1,
                        "filename": "folder",
                        "collapsed": true,
                        "type": "folder",
                        "items": [],
                        "depth": 1
                    },
                    {
                        "uid": "mVwv6y1WJrwMQTpyMvsb6",
                        "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/folderrr",
                        "name": "folderrr",
                        "seq": 1,
                        "filename": "folderrr",
                        "collapsed": true,
                        "type": "folder",
                        "items": [],
                        "depth": 1
                    },
                    {
                        "uid": "PkUYH4a4Tz7Axirafje01",
                        "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/folderrrrrr",
                        "name": "folderrrrrr",
                        "seq": 1,
                        "filename": "folderrrrrr",
                        "collapsed": true,
                        "type": "folder",
                        "items": [],
                        "depth": 1
                    },
                    {
                        "uid": "MZxavWeQ0gHSIuFCqr7cU",
                        "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/folderrrrrrrrrrrrrrrrrr",
                        "name": "folderrrrrrrrrrrrrrrrrr",
                        "seq": 1,
                        "filename": "folderrrrrrrrrrrrrrrrrr",
                        "collapsed": true,
                        "type": "folder",
                        "items": [],
                        "depth": 1
                    },
                    {
                        "uid": "lBVMrlfoMUzCsrfdXqVWn",
                        "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/folderrrrrrrrrrrrrrrrrrrrrrrrr",
                        "name": "folderrrrrrrrrrrrrrrrrrrrrrrrr",
                        "seq": 1,
                        "filename": "folderrrrrrrrrrrrrrrrrrrrrrrrr",
                        "collapsed": true,
                        "type": "folder",
                        "items": [],
                        "depth": 1
                    },
                    {
                        "uid": "1zyw2qNFmu4T0Lg71Hoaf",
                        "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/graphql",
                        "name": "graphql",
                        "seq": 1,
                        "filename": "graphql",
                        "collapsed": true,
                        "type": "folder",
                        "items": [
                            {
                                "uid": "EBa2eMsKXZBFxYFdA7o8W",
                                "name": "spacex",
                                "type": "graphql-request",
                                "seq": 1,
                                "request": {
                                    "method": "POST",
                                    "url": "https://spacex-production.up.railway.app/",
                                    "params": [],
                                    "headers": [],
                                    "auth": {
                                        "mode": "none"
                                    },
                                    "body": {
                                        "graphql": {
                                            "query": "{\n  company {\n    ceo\n  }\n}\n"
                                        },
                                        "mode": "graphql"
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [
                                        {
                                            "name": "res.status",
                                            "value": "eq 200",
                                            "enabled": true,
                                            "uid": "UefizQyyNnqVhIGlWoNiE"
                                        }
                                    ],
                                    "tests": "",
                                    "docs": ""
                                },
                                "filename": "spacex.bru",
                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/graphql/spacex.bru",
                                "draft": null,
                                "partial": false,
                                "loading": false,
                                "size": 0.00021839141845703125,
                                "depth": 2
                            }
                        ],
                        "depth": 1
                    },
                    {
                        "uid": "UAONcHaFAfEkisago89dO",
                        "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/lib",
                        "name": "lib",
                        "seq": 1,
                        "filename": "lib",
                        "collapsed": true,
                        "type": "folder",
                        "items": [],
                        "depth": 1
                    },
                    {
                        "uid": "vcuVThY58YKaGNHMWld8o",
                        "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/multipart",
                        "name": "multipart",
                        "seq": 1,
                        "filename": "multipart",
                        "collapsed": true,
                        "type": "folder",
                        "items": [],
                        "depth": 1
                    },
                    {
                        "uid": "oFM6V2YiLRclnikiVjCp6",
                        "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/preview",
                        "name": "preview",
                        "seq": 1,
                        "filename": "preview",
                        "collapsed": true,
                        "type": "folder",
                        "items": [
                            {
                                "uid": "ioYAxK5MrkHGw4QRASn0j",
                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/preview/html",
                                "name": "html",
                                "seq": 1,
                                "filename": "html",
                                "collapsed": true,
                                "type": "folder",
                                "items": [
                                    {
                                        "uid": "WUdpNF3xpWlHr8fE3FSPM",
                                        "name": "bruno",
                                        "type": "http-request",
                                        "seq": 1,
                                        "request": {
                                            "method": "GET",
                                            "url": "https://www.usebruno.com",
                                            "params": [],
                                            "headers": [],
                                            "auth": {
                                                "mode": "none"
                                            },
                                            "body": {
                                                "mode": "none"
                                            },
                                            "script": {},
                                            "vars": {},
                                            "assertions": [
                                                {
                                                    "name": "res.status",
                                                    "value": "eq 200",
                                                    "enabled": true,
                                                    "uid": "rr6x79R8csBtbQRAdKbD0"
                                                }
                                            ],
                                            "tests": "test(\"should return parsed xml\", function() {\n  const headers = res.getHeaders();\n  expect(headers['content-type']).to.eql(\"text/html; charset=utf-8\");\n});\n",
                                            "docs": ""
                                        },
                                        "filename": "bruno.bru",
                                        "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/preview/html/bruno.bru",
                                        "draft": null,
                                        "partial": false,
                                        "loading": false,
                                        "size": 0.00030803680419921875,
                                        "depth": 3
                                    }
                                ],
                                "depth": 2
                            },
                            {
                                "uid": "cf3bp7ZmzWsKRUS8DjyHm",
                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/preview/image",
                                "name": "image",
                                "seq": 1,
                                "filename": "image",
                                "collapsed": true,
                                "type": "folder",
                                "items": [
                                    {
                                        "uid": "4tpkmvbAne6C3dZFOJPLy",
                                        "name": "bruno",
                                        "type": "http-request",
                                        "seq": 1,
                                        "request": {
                                            "method": "GET",
                                            "url": "https://www.usebruno.com/favicon.ico",
                                            "params": [],
                                            "headers": [],
                                            "auth": {
                                                "mode": "none"
                                            },
                                            "body": {
                                                "mode": "none"
                                            },
                                            "script": {},
                                            "vars": {},
                                            "assertions": [],
                                            "tests": "test(\"should return parsed xml\", function() {\n  const headers = res.getHeaders();\n  expect(headers['content-type']).to.eql(\"image/x-icon\");\n});\n",
                                            "docs": ""
                                        },
                                        "filename": "bruno.bru",
                                        "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/preview/image/bruno.bru",
                                        "draft": null,
                                        "partial": false,
                                        "loading": false,
                                        "size": 0.0002765655517578125,
                                        "depth": 3
                                    }
                                ],
                                "depth": 2
                            }
                        ],
                        "depth": 1
                    },
                    {
                        "uid": "6ujTwNYKIvCyi90liZMme",
                        "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/redirects",
                        "name": "redirects",
                        "seq": 1,
                        "filename": "redirects",
                        "collapsed": true,
                        "type": "folder",
                        "items": [
                            {
                                "uid": "i3ltUABrsxGvaMQA1lk0F",
                                "name": "Disable Redirect",
                                "type": "http-request",
                                "seq": 1,
                                "request": {
                                    "method": "GET",
                                    "url": "{{host}}/redirect-to-ping",
                                    "params": [],
                                    "headers": [],
                                    "auth": {
                                        "mode": "none"
                                    },
                                    "body": {
                                        "mode": "none"
                                    },
                                    "script": {
                                        "req": "req.setMaxRedirects(0);"
                                    },
                                    "vars": {},
                                    "assertions": [
                                        {
                                            "name": "res.status",
                                            "value": "302",
                                            "enabled": true,
                                            "uid": "NYtX4sfDxvFNs5UwYVof0"
                                        }
                                    ],
                                    "tests": "test(\"should disable redirect to ping\", function() {\n  const data = res.getBody();\n  expect(data).to.equal('Found. Redirecting to /ping');\n});",
                                    "docs": ""
                                },
                                "filename": "Disable Redirect.bru",
                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/redirects/Disable Redirect.bru",
                                "draft": null,
                                "partial": false,
                                "loading": false,
                                "size": 0.0003490447998046875,
                                "depth": 2
                            },
                            {
                                "uid": "8tm1Rihsi7Uo7UY7yOrjG",
                                "name": "Test Redirect",
                                "type": "http-request",
                                "seq": 2,
                                "request": {
                                    "method": "GET",
                                    "url": "{{host}}/redirect-to-ping",
                                    "params": [],
                                    "headers": [],
                                    "auth": {
                                        "mode": "none"
                                    },
                                    "body": {
                                        "mode": "none"
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [
                                        {
                                            "name": "res.status",
                                            "value": "200",
                                            "enabled": true,
                                            "uid": "5b6WXyvfZQg453J1uV4ZK"
                                        },
                                        {
                                            "name": "res.body",
                                            "value": "pong",
                                            "enabled": true,
                                            "uid": "7OEQ0eOTE0Hzi87JgnWRm"
                                        }
                                    ],
                                    "tests": "test(\"should redirect to ping\", function() {\n  const data = res.getBody();\n  expect(data).to.equal('pong');\n});",
                                    "docs": ""
                                },
                                "filename": "Test Redirect.bru",
                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/redirects/Test Redirect.bru",
                                "draft": null,
                                "partial": false,
                                "loading": false,
                                "size": 0.00028514862060546875,
                                "depth": 2
                            }
                        ],
                        "depth": 1
                    },
                    {
                        "uid": "LSHxJ8uGnxF5vsCCu0V3F",
                        "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/response-parsing",
                        "name": "response-parsing",
                        "seq": 1,
                        "filename": "response-parsing",
                        "collapsed": true,
                        "type": "folder",
                        "items": [
                            {
                                "uid": "26fej2FOFJdErk3sH4W9h",
                                "name": "test JSON false response",
                                "type": "http-request",
                                "seq": 11,
                                "request": {
                                    "method": "POST",
                                    "url": "{{httpfaker}}/api/echo/custom",
                                    "params": [],
                                    "headers": [],
                                    "auth": {
                                        "mode": "none"
                                    },
                                    "body": {
                                        "json": "{\n  \"headers\": { \"content-type\": \"application/json\" },\n  \"content\": \"false\"\n}",
                                        "mode": "json"
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [
                                        {
                                            "name": "res.body",
                                            "value": "eq false",
                                            "enabled": true,
                                            "uid": "gZv3KbXqgGTsmig5SWL6M"
                                        }
                                    ],
                                    "tests": "",
                                    "docs": ""
                                },
                                "filename": "test JSON false response.bru",
                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/response-parsing/test JSON false response.bru",
                                "draft": null,
                                "partial": false,
                                "loading": false,
                                "size": 0.0002593994140625,
                                "depth": 2
                            },
                            {
                                "uid": "jI1qI762K6xhmbAYtuIn1",
                                "name": "test JSON null response",
                                "type": "http-request",
                                "seq": 6,
                                "request": {
                                    "method": "POST",
                                    "url": "{{httpfaker}}/api/echo/custom",
                                    "params": [],
                                    "headers": [],
                                    "auth": {
                                        "mode": "none"
                                    },
                                    "body": {
                                        "json": "{\n  \"headers\": { \"content-type\": \"application/json\" },\n  \"content\": \"null\"\n}",
                                        "mode": "json"
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [
                                        {
                                            "name": "res.body",
                                            "value": "eq null",
                                            "enabled": true,
                                            "uid": "LxuvmK6wMCTZd3pIoXNcE"
                                        }
                                    ],
                                    "tests": "",
                                    "docs": ""
                                },
                                "filename": "test JSON null response.bru",
                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/response-parsing/test JSON null response.bru",
                                "draft": null,
                                "partial": false,
                                "loading": false,
                                "size": 0.000255584716796875,
                                "depth": 2
                            },
                            {
                                "uid": "6w6Qmr82lD9qIBGN4Jxq5",
                                "name": "test JSON number response",
                                "type": "http-request",
                                "seq": 12,
                                "request": {
                                    "method": "POST",
                                    "url": "{{httpfaker}}/api/echo/custom",
                                    "params": [],
                                    "headers": [],
                                    "auth": {
                                        "mode": "none"
                                    },
                                    "body": {
                                        "json": "{\n  \"headers\": { \"content-type\": \"application/json\" },\n  \"content\": \"3.1\"\n}",
                                        "mode": "json"
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [
                                        {
                                            "name": "res.body",
                                            "value": "eq 3.1",
                                            "enabled": true,
                                            "uid": "HBAfCY7T99HaZekzfEjT0"
                                        }
                                    ],
                                    "tests": "",
                                    "docs": ""
                                },
                                "filename": "test JSON number response.bru",
                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/response-parsing/test JSON number response.bru",
                                "draft": null,
                                "partial": false,
                                "loading": false,
                                "size": 0.00025653839111328125,
                                "depth": 2
                            },
                            {
                                "uid": "GSV71relNMeHLV8QfdTLN",
                                "name": "test JSON response",
                                "type": "http-request",
                                "seq": 2,
                                "request": {
                                    "method": "POST",
                                    "url": "{{httpfaker}}/api/echo/custom",
                                    "params": [],
                                    "headers": [],
                                    "auth": {
                                        "mode": "none"
                                    },
                                    "body": {
                                        "json": "{\n  \"headers\": { \"content-type\": \"application/json\" },\n  \"contentJSON\": { \"message\": \"hello\" }\n}",
                                        "mode": "json"
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [
                                        {
                                            "name": "res.body.message",
                                            "value": "eq hello",
                                            "enabled": true,
                                            "uid": "n91O4jL9PtnksRzv1Cbpd"
                                        }
                                    ],
                                    "tests": "",
                                    "docs": ""
                                },
                                "filename": "test JSON response.bru",
                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/response-parsing/test JSON response.bru",
                                "draft": null,
                                "partial": false,
                                "loading": false,
                                "size": 0.000278472900390625,
                                "depth": 2
                            },
                            {
                                "uid": "NT937GkPDF40jnYUz4KXR",
                                "name": "test JSON string response",
                                "type": "http-request",
                                "seq": 7,
                                "request": {
                                    "method": "POST",
                                    "url": "{{httpfaker}}/api/echo/custom",
                                    "params": [],
                                    "headers": [],
                                    "auth": {
                                        "mode": "none"
                                    },
                                    "body": {
                                        "json": "{\n  \"headers\": { \"content-type\": \"application/json\" },\n  \"content\": \"\\\"ok\\\"\"\n}",
                                        "mode": "json"
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [
                                        {
                                            "name": "res.body",
                                            "value": "eq ok",
                                            "enabled": true,
                                            "uid": "2GiAoWg2vEK58RdzpybVG"
                                        }
                                    ],
                                    "tests": "",
                                    "docs": ""
                                },
                                "filename": "test JSON string response.bru",
                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/response-parsing/test JSON string response.bru",
                                "draft": null,
                                "partial": false,
                                "loading": false,
                                "size": 0.0002574920654296875,
                                "depth": 2
                            },
                            {
                                "uid": "Ea8cvfbkGDwsPpaAvYLXL",
                                "name": "test JSON string with quotes response",
                                "type": "http-request",
                                "seq": 8,
                                "request": {
                                    "method": "POST",
                                    "url": "{{httpfaker}}/api/echo/custom",
                                    "params": [],
                                    "headers": [],
                                    "auth": {
                                        "mode": "none"
                                    },
                                    "body": {
                                        "json": "{\n  \"headers\": { \"content-type\": \"application/json\" },\n  \"contentJSON\": \"\\\"ok\\\"\"\n}",
                                        "mode": "json"
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [
                                        {
                                            "name": "res.body",
                                            "value": "eq '\"ok\"'",
                                            "enabled": true,
                                            "uid": "XsbNyQjpCC1DqOWDck2aw"
                                        }
                                    ],
                                    "tests": "",
                                    "docs": ""
                                },
                                "filename": "test JSON string with quotes response.bru",
                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/response-parsing/test JSON string with quotes response.bru",
                                "draft": null,
                                "partial": false,
                                "loading": false,
                                "size": 0.0002765655517578125,
                                "depth": 2
                            },
                            {
                                "uid": "llsiVvJlC1xU8taSzF41Y",
                                "name": "test JSON true response",
                                "type": "http-request",
                                "seq": 10,
                                "request": {
                                    "method": "POST",
                                    "url": "{{httpfaker}}/api/echo/custom",
                                    "params": [],
                                    "headers": [],
                                    "auth": {
                                        "mode": "none"
                                    },
                                    "body": {
                                        "json": "{\n  \"headers\": { \"content-type\": \"application/json\" },\n  \"content\": \"true\"\n}",
                                        "mode": "json"
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [
                                        {
                                            "name": "res.body",
                                            "value": "eq true",
                                            "enabled": true,
                                            "uid": "fHleCdkPqMqvznYuXCIDu"
                                        }
                                    ],
                                    "tests": "",
                                    "docs": ""
                                },
                                "filename": "test JSON true response.bru",
                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/response-parsing/test JSON true response.bru",
                                "draft": null,
                                "partial": false,
                                "loading": false,
                                "size": 0.00025653839111328125,
                                "depth": 2
                            },
                            {
                                "uid": "W3pBbZpvz8FwDH7oNh5HY",
                                "name": "test JSON unsafe-int response",
                                "type": "http-request",
                                "seq": 13,
                                "request": {
                                    "method": "POST",
                                    "url": "{{httpfaker}}/api/echo/custom",
                                    "params": [],
                                    "headers": [],
                                    "auth": {
                                        "mode": "none"
                                    },
                                    "body": {
                                        "json": "{\n  \"headers\": { \"content-type\": \"application/json\" },\n  \"content\": \"90071992547409919876\"\n}",
                                        "mode": "json"
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [
                                        {
                                            "name": "res.body.toString()",
                                            "value": "eq 90071992547409920000",
                                            "enabled": true,
                                            "uid": "rauDg7jxqPGBEMuOBvqoz"
                                        }
                                    ],
                                    "tests": "",
                                    "docs": "Note: This test is not perfect, we should match the unparsed raw-response with the expected string version of the unsafe-integer"
                                },
                                "filename": "test JSON unsafe-int response.bru",
                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/response-parsing/test JSON unsafe-int response.bru",
                                "draft": null,
                                "partial": false,
                                "loading": false,
                                "size": 0.00043773651123046875,
                                "depth": 2
                            },
                            {
                                "uid": "oUQqt0DUanNi8omD5qRfC",
                                "name": "test binary response",
                                "type": "http-request",
                                "seq": 4,
                                "request": {
                                    "method": "POST",
                                    "url": "{{httpfaker}}/api/echo/custom",
                                    "params": [],
                                    "headers": [],
                                    "auth": {
                                        "mode": "none"
                                    },
                                    "body": {
                                        "json": "{\n  \"type\": \"application/octet-stream\",\n  \"contentBase64\": \"+Z1P82iH1wmbILfvnhvjQVbVAktP4TzltpxYD74zNyA=\"\n}",
                                        "mode": "json"
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [],
                                    "tests": "test(\"response matches the expectation after utf-8 decoding(needs improvement)\", function () {\n  expect(res.getStatus()).to.equal(200);\n  const dataBinary = Buffer.from(\"+Z1P82iH1wmbILfvnhvjQVbVAktP4TzltpxYD74zNyA=\", \"base64\"); \n  expect(res.body).to.equal(dataBinary.toString(\"utf-8\"));\n});",
                                    "docs": "Note:\n\nThis test is not perfect and needs to be improved by direclty matching expected binary data with raw-response.\n\nCurrently res.body is decoded with `utf-8` by default and looses data in the process. We need some property in `res` which gives access to raw-data/Buffer."
                                },
                                "filename": "test binary response.bru",
                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/response-parsing/test binary response.bru",
                                "draft": null,
                                "partial": false,
                                "loading": false,
                                "size": 0.00083160400390625,
                                "depth": 2
                            },
                            {
                                "uid": "77wMDRthxn3xix0T9Wlmk",
                                "name": "test html response",
                                "type": "http-request",
                                "seq": 5,
                                "request": {
                                    "method": "POST",
                                    "url": "{{httpfaker}}/api/echo/custom",
                                    "params": [],
                                    "headers": [],
                                    "auth": {
                                        "mode": "none"
                                    },
                                    "body": {
                                        "json": "{\n  \"headers\": { \"content-type\": \"text/html\" },\n  \"content\": \"<h1>hello</h1>\"\n}",
                                        "mode": "json"
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [
                                        {
                                            "name": "res.body",
                                            "value": "eq <h1>hello</h1>",
                                            "enabled": true,
                                            "uid": "mX6fJpmuaCAFRGNqCIyfE"
                                        }
                                    ],
                                    "tests": "",
                                    "docs": ""
                                },
                                "filename": "test html response.bru",
                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/response-parsing/test html response.bru",
                                "draft": null,
                                "partial": false,
                                "loading": false,
                                "size": 0.000263214111328125,
                                "depth": 2
                            },
                            {
                                "uid": "VjHsuALDIvPwMLdZTI9oJ",
                                "name": "test image response",
                                "type": "http-request",
                                "seq": 3,
                                "request": {
                                    "method": "POST",
                                    "url": "{{httpfaker}}/api/echo/custom",
                                    "params": [],
                                    "headers": [],
                                    "auth": {
                                        "mode": "none"
                                    },
                                    "body": {
                                        "json": "{\n  \"type\": \"image/png\",\n  \"contentBase64\": \"iVBORw0KGgoAAAANSUhEUgAAAGQAAABkAQMAAABKLAcXAAAAIGNIUk0AAHomAACAhAAA+gAAAIDoAAB1MAAA6mAAADqYAAAXcJy6UTwAAAAGUExURQCqAP///59OGOoAAAABYktHRAH/Ai3eAAAAB3RJTUUH6QMHCwUNKHvFmgAAABRJREFUOMtjYBgFo2AUjIJRQE8AAAV4AAEpcbn8AAAAJXRFWHRkYXRlOmNyZWF0ZQAyMDI1LTAzLTA3VDExOjA1OjEzKzAwOjAwQkgGWgAAACV0RVh0ZGF0ZTptb2RpZnkAMjAyNS0wMy0wN1QxMTowNToxMyswMDowMDMVvuYAAAAodEVYdGRhdGU6dGltZXN0YW1wADIwMjUtMDMtMDdUMTE6MDU6MTMrMDA6MDBkAJ85AAAAAElFTkSuQmCC\"\n}",
                                        "mode": "json"
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [],
                                    "tests": "",
                                    "docs": ""
                                },
                                "filename": "test image response.bru",
                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/response-parsing/test image response.bru",
                                "draft": null,
                                "partial": false,
                                "loading": false,
                                "size": 0.00060272216796875,
                                "depth": 2
                            },
                            {
                                "uid": "eDmLVVomzzYhNW8rg0XJa",
                                "name": "test invalid JSON response with formatting",
                                "type": "http-request",
                                "seq": 19,
                                "request": {
                                    "method": "POST",
                                    "url": "{{httpfaker}}/api/echo/custom",
                                    "params": [],
                                    "headers": [],
                                    "auth": {
                                        "mode": "none"
                                    },
                                    "body": {
                                        "json": "{\n  \"headers\": { \"content-type\": \"application/json\" },\n  \"content\": \"hello\\n\\tworld\"\n}",
                                        "mode": "json"
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [
                                        {
                                            "name": "res.body",
                                            "value": "eq hello\\n\\tworld",
                                            "enabled": true,
                                            "uid": "hYcr0i3mbhu244wzBA7P2"
                                        }
                                    ],
                                    "tests": "",
                                    "docs": ""
                                },
                                "filename": "test invalid JSON response with formatting.bru",
                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/response-parsing/test invalid JSON response with formatting.bru",
                                "draft": null,
                                "partial": false,
                                "loading": false,
                                "size": 0.000293731689453125,
                                "depth": 2
                            },
                            {
                                "uid": "2G6EOn9z6f3sCVKWHkFJi",
                                "name": "test plain text response with formatting",
                                "type": "http-request",
                                "seq": 18,
                                "request": {
                                    "method": "POST",
                                    "url": "{{httpfaker}}/api/echo/custom",
                                    "params": [],
                                    "headers": [],
                                    "auth": {
                                        "mode": "none"
                                    },
                                    "body": {
                                        "json": "{\n  \"headers\": { \"content-type\": \"text/plain\" },\n  \"content\": \"hello\\n\\tworld\"\n}",
                                        "mode": "json"
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [
                                        {
                                            "name": "res.body",
                                            "value": "eq hello\\n\\tworld",
                                            "enabled": true,
                                            "uid": "0D0uY7P4p4IxxJHxssoFP"
                                        }
                                    ],
                                    "tests": "",
                                    "docs": ""
                                },
                                "filename": "test plain text response with formatting.bru",
                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/response-parsing/test plain text response with formatting.bru",
                                "draft": null,
                                "partial": false,
                                "loading": false,
                                "size": 0.000286102294921875,
                                "depth": 2
                            },
                            {
                                "uid": "qrIU5Frpmye4OEGCq5V5W",
                                "name": "test plain text response",
                                "type": "http-request",
                                "seq": 1,
                                "request": {
                                    "method": "POST",
                                    "url": "{{httpfaker}}/api/echo/custom",
                                    "params": [],
                                    "headers": [],
                                    "auth": {
                                        "mode": "none"
                                    },
                                    "body": {
                                        "json": "{\n  \"headers\": { \"content-type\": \"text/plain\" },\n  \"content\": \"hello\"\n}",
                                        "mode": "json"
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [
                                        {
                                            "name": "res.body",
                                            "value": "eq hello",
                                            "enabled": true,
                                            "uid": "KiH4hFi8wqVfWmkDP4JYO"
                                        }
                                    ],
                                    "tests": "",
                                    "docs": ""
                                },
                                "filename": "test plain text response.bru",
                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/response-parsing/test plain text response.bru",
                                "draft": null,
                                "partial": false,
                                "loading": false,
                                "size": 0.0002536773681640625,
                                "depth": 2
                            },
                            {
                                "uid": "w3nancI76nkKp9N9BN35m",
                                "name": "test plain text utf16 response",
                                "type": "http-request",
                                "seq": 14,
                                "request": {
                                    "method": "POST",
                                    "url": "{{httpfaker}}/api/echo/custom",
                                    "params": [],
                                    "headers": [],
                                    "auth": {
                                        "mode": "none"
                                    },
                                    "body": {
                                        "json": "{\n  \"headers\": { \"content-type\": \"text/plain; charset=utf-16\" },\n  \"contentBase64\": \"dABoAGkAcwAgAGkAcwAgAGUAbgBjAG8AZABlAGQAIAB3AGkAdABoACAAdQB0AGYAMQA2AA==\"\n}",
                                        "mode": "json"
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [
                                        {
                                            "name": "res.body",
                                            "value": "eq \"this is encoded with utf16\"",
                                            "enabled": true,
                                            "uid": "zk0o4ZvDHJ0f1MXfczQfI"
                                        }
                                    ],
                                    "tests": "",
                                    "docs": ""
                                },
                                "filename": "test plain text utf16 response.bru",
                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/response-parsing/test plain text utf16 response.bru",
                                "draft": null,
                                "partial": false,
                                "loading": false,
                                "size": 0.0003662109375,
                                "depth": 2
                            },
                            {
                                "uid": "qdAXQJIkKvZ3VNyF23en3",
                                "name": "test plain text utf16-be with BOM response",
                                "type": "http-request",
                                "seq": 15,
                                "request": {
                                    "method": "POST",
                                    "url": "{{httpfaker}}/api/echo/custom",
                                    "params": [],
                                    "headers": [],
                                    "auth": {
                                        "mode": "none"
                                    },
                                    "body": {
                                        "json": "{\n  \"headers\": { \"content-type\": \"text/plain; charset=utf-16\" },\n  \"contentBase64\": \"/v8AdABoAGkAcwAgAGkAcwAgAGUAbgBjAG8AZABlAGQAIAB3AGkAdABoACAAdQB0AGYAMQA2AC0AYgBlACAAdwBpAHQAaAAgAEIATwBN\"\n}",
                                        "mode": "json"
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [
                                        {
                                            "name": "res.body",
                                            "value": "eq \"this is encoded with utf16-be with BOM\"",
                                            "enabled": true,
                                            "uid": "FwK3WYu01Z54FgBkYVUQ5"
                                        }
                                    ],
                                    "tests": "",
                                    "docs": ""
                                },
                                "filename": "test plain text utf16-be with BOM response.bru",
                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/response-parsing/test plain text utf16-be with BOM response.bru",
                                "draft": null,
                                "partial": false,
                                "loading": false,
                                "size": 0.00041961669921875,
                                "depth": 2
                            },
                            {
                                "uid": "oOeazRUqAzR65B6o0GAxS",
                                "name": "test plain text utf16-le with BOM response",
                                "type": "http-request",
                                "seq": 16,
                                "request": {
                                    "method": "POST",
                                    "url": "{{httpfaker}}/api/echo/custom",
                                    "params": [],
                                    "headers": [],
                                    "auth": {
                                        "mode": "none"
                                    },
                                    "body": {
                                        "json": "{\n  \"headers\": { \"content-type\": \"text/plain; charset=utf-16\" },\n  \"contentBase64\": \"//50AGgAaQBzACAAaQBzACAAZQBuAGMAbwBkAGUAZAAgAHcAaQB0AGgAIAB1AHQAZgAxADYALQBsAGUAIAB3AGkAdABoACAAQgBPAE0A\"\n}",
                                        "mode": "json"
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [
                                        {
                                            "name": "res.body",
                                            "value": "eq \"this is encoded with utf16-le with BOM\"",
                                            "enabled": true,
                                            "uid": "KJ1UkDqMnRYI0K7ou4WhN"
                                        }
                                    ],
                                    "tests": "",
                                    "docs": ""
                                },
                                "filename": "test plain text utf16-le with BOM response.bru",
                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/response-parsing/test plain text utf16-le with BOM response.bru",
                                "draft": null,
                                "partial": false,
                                "loading": false,
                                "size": 0.00041961669921875,
                                "depth": 2
                            },
                            {
                                "uid": "hKsbSpnnR8iDQJ1JNliJS",
                                "name": "test plain text utf8 with BOM response",
                                "type": "http-request",
                                "seq": 17,
                                "request": {
                                    "method": "POST",
                                    "url": "{{httpfaker}}/api/echo/custom",
                                    "params": [],
                                    "headers": [],
                                    "auth": {
                                        "mode": "none"
                                    },
                                    "body": {
                                        "json": "{\n  \"headers\": { \"content-type\": \"text/plain; charset=utf8\" },\n  \"contentBase64\": \"77u/dGhpcyBpcyB1dGY4IGVuY29kZWQgd2l0aCBCT00sIHdoeSBub3Q/\"\n}",
                                        "mode": "json"
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [
                                        {
                                            "name": "res.body",
                                            "value": "eq \"this is utf8 encoded with BOM, why not?\"",
                                            "enabled": true,
                                            "uid": "TzkcTks3BiyDSzMYuqCjt"
                                        }
                                    ],
                                    "tests": "",
                                    "docs": ""
                                },
                                "filename": "test plain text utf8 with BOM response.bru",
                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/response-parsing/test plain text utf8 with BOM response.bru",
                                "draft": null,
                                "partial": false,
                                "loading": false,
                                "size": 0.00036907196044921875,
                                "depth": 2
                            },
                            {
                                "uid": "h5clphvnCaFuQI0tLk6Jv",
                                "name": "test xml response",
                                "type": "http-request",
                                "seq": 9,
                                "request": {
                                    "method": "POST",
                                    "url": "{{httpfaker}}/api/echo/custom",
                                    "params": [],
                                    "headers": [],
                                    "auth": {
                                        "mode": "none"
                                    },
                                    "body": {
                                        "json": "{\n  \"headers\": { \"content-type\": \"application/xml\" },\n  \"content\": \"<message>hello</message>\"\n}",
                                        "mode": "json"
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [
                                        {
                                            "name": "res.body",
                                            "value": "eq <message>hello</message>",
                                            "enabled": true,
                                            "uid": "4nHPZ4PIh1XBQ0PbiVpzi"
                                        }
                                    ],
                                    "tests": "",
                                    "docs": ""
                                },
                                "filename": "test xml response.bru",
                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/response-parsing/test xml response.bru",
                                "draft": null,
                                "partial": false,
                                "loading": false,
                                "size": 0.00028705596923828125,
                                "depth": 2
                            }
                        ],
                        "depth": 1
                    },
                    {
                        "uid": "4knXF80o6QLeKiGeCj5dZ",
                        "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting",
                        "name": "scripting",
                        "seq": 1,
                        "filename": "scripting",
                        "collapsed": true,
                        "type": "folder",
                        "items": [
                            {
                                "uid": "HI5HWRQIfMKrDIJ7I8x3k",
                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/api",
                                "name": "api",
                                "seq": 1,
                                "filename": "api",
                                "collapsed": true,
                                "type": "folder",
                                "items": [
                                    {
                                        "uid": "tTH6SOLbqvSus2XIES2QI",
                                        "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/api/bru",
                                        "name": "bru",
                                        "seq": 1,
                                        "filename": "bru",
                                        "collapsed": true,
                                        "type": "folder",
                                        "items": [
                                            {
                                                "uid": "uFpmSuHnEnWLd7vWJocn9",
                                                "name": "getCollectionName",
                                                "type": "http-request",
                                                "seq": 13,
                                                "request": {
                                                    "method": "GET",
                                                    "url": "{{host}}/ping",
                                                    "params": [],
                                                    "headers": [],
                                                    "auth": {
                                                        "mode": "inherit"
                                                    },
                                                    "body": {
                                                        "mode": "none"
                                                    },
                                                    "script": {},
                                                    "vars": {},
                                                    "assertions": [],
                                                    "tests": "test(\"Check if collection name is bruno-testbench\", function () {\n    expect(bru.getCollectionName()).to.eql(\"bruno-testbench\");\n});",
                                                    "docs": ""
                                                },
                                                "filename": "getCollectionName.bru",
                                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/api/bru/getCollectionName.bru",
                                                "draft": null,
                                                "partial": false,
                                                "loading": false,
                                                "size": 0.00025463104248046875,
                                                "depth": 4
                                            },
                                            {
                                                "uid": "1wkubg3khPwiS6UmqfSwv",
                                                "name": "getCollectionVar",
                                                "type": "http-request",
                                                "seq": 9,
                                                "request": {
                                                    "method": "GET",
                                                    "url": "{{host}}/ping",
                                                    "params": [],
                                                    "headers": [],
                                                    "auth": {
                                                        "mode": "none"
                                                    },
                                                    "body": {
                                                        "mode": "none"
                                                    },
                                                    "script": {},
                                                    "vars": {},
                                                    "assertions": [],
                                                    "tests": "test(\"should get collection var in scripts\", function() {\n  const testVar = bru.getCollectionVar(\"collection-var\");\n  expect(testVar).to.equal(\"collection-var-value\");\n});",
                                                    "docs": ""
                                                },
                                                "filename": "getCollectionVar.bru",
                                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/api/bru/getCollectionVar.bru",
                                                "draft": null,
                                                "partial": false,
                                                "loading": false,
                                                "size": 0.00028896331787109375,
                                                "depth": 4
                                            },
                                            {
                                                "uid": "ttBJwdvpUqJybvY91U0YU",
                                                "name": "getEnvName",
                                                "type": "http-request",
                                                "seq": 1,
                                                "request": {
                                                    "method": "GET",
                                                    "url": "{{host}}/ping",
                                                    "params": [],
                                                    "headers": [],
                                                    "auth": {
                                                        "mode": "none"
                                                    },
                                                    "body": {
                                                        "mode": "none"
                                                    },
                                                    "script": {
                                                        "req": "const envName = bru.getEnvName();\nbru.setVar(\"testEnvName\", envName);"
                                                    },
                                                    "vars": {},
                                                    "assertions": [],
                                                    "tests": "test(\"should get env name in scripts\", function() {\n  const testEnvName = bru.getVar(\"testEnvName\");\n  expect(testEnvName).to.equal(\"Prod\");\n});",
                                                    "docs": ""
                                                },
                                                "filename": "getEnvName.bru",
                                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/api/bru/getEnvName.bru",
                                                "draft": null,
                                                "partial": false,
                                                "loading": false,
                                                "size": 0.0003509521484375,
                                                "depth": 4
                                            },
                                            {
                                                "uid": "WKUz25kNW4QKJ2AAhLZy5",
                                                "name": "getEnvVar",
                                                "type": "http-request",
                                                "seq": 2,
                                                "request": {
                                                    "method": "GET",
                                                    "url": "{{host}}/ping",
                                                    "params": [],
                                                    "headers": [],
                                                    "auth": {
                                                        "mode": "none"
                                                    },
                                                    "body": {
                                                        "mode": "none"
                                                    },
                                                    "script": {},
                                                    "vars": {},
                                                    "assertions": [],
                                                    "tests": "test(\"should get env var in scripts\", function() {\n  const host = bru.getEnvVar(\"host\")\n  expect(host).to.equal(\"https://testbench-sanity.usebruno.com\");\n});",
                                                    "docs": ""
                                                },
                                                "filename": "getEnvVar.bru",
                                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/api/bru/getEnvVar.bru",
                                                "draft": null,
                                                "partial": false,
                                                "loading": false,
                                                "size": 0.0002689361572265625,
                                                "depth": 4
                                            },
                                            {
                                                "uid": "jEXzMcRenY6Rmt95J4lUf",
                                                "name": "getFolderVar",
                                                "type": "http-request",
                                                "seq": 8,
                                                "request": {
                                                    "method": "GET",
                                                    "url": "{{host}}/ping",
                                                    "params": [],
                                                    "headers": [],
                                                    "auth": {
                                                        "mode": "none"
                                                    },
                                                    "body": {
                                                        "mode": "none"
                                                    },
                                                    "script": {},
                                                    "vars": {},
                                                    "assertions": [],
                                                    "tests": "test(\"should get folder var in scripts\", function() {\n  const testVar = bru.getFolderVar(\"folder-var\");\n  expect(testVar).to.equal(\"folder-var-value\");\n});",
                                                    "docs": ""
                                                },
                                                "filename": "getFolderVar.bru",
                                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/api/bru/getFolderVar.bru",
                                                "draft": null,
                                                "partial": false,
                                                "loading": false,
                                                "size": 0.00026988983154296875,
                                                "depth": 4
                                            },
                                            {
                                                "uid": "AN0Px2xnnjoq7ebJJlHmr",
                                                "name": "getProcessEnv",
                                                "type": "http-request",
                                                "seq": 6,
                                                "request": {
                                                    "method": "GET",
                                                    "url": "{{host}}/ping",
                                                    "params": [],
                                                    "headers": [],
                                                    "auth": {
                                                        "mode": "none"
                                                    },
                                                    "body": {
                                                        "mode": "none"
                                                    },
                                                    "script": {},
                                                    "vars": {},
                                                    "assertions": [],
                                                    "tests": "test(\"bru.getProcessEnv()\", function() {\n  const v = bru.getProcessEnv(\"PROC_ENV_VAR\");\n  expect(v).to.equal(\"woof\");\n});",
                                                    "docs": ""
                                                },
                                                "filename": "getProcessEnv.bru",
                                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/api/bru/getProcessEnv.bru",
                                                "draft": null,
                                                "partial": false,
                                                "loading": false,
                                                "size": 0.0002384185791015625,
                                                "depth": 4
                                            },
                                            {
                                                "uid": "JOmH3CwaLP8nGqdSeyZ4n",
                                                "name": "getRequestVar",
                                                "type": "http-request",
                                                "seq": 7,
                                                "request": {
                                                    "method": "GET",
                                                    "url": "{{host}}/ping",
                                                    "params": [],
                                                    "headers": [],
                                                    "auth": {
                                                        "mode": "none"
                                                    },
                                                    "body": {
                                                        "mode": "none"
                                                    },
                                                    "script": {},
                                                    "vars": {
                                                        "req": [
                                                            {
                                                                "name": "request-var",
                                                                "value": "request-var-value",
                                                                "enabled": true,
                                                                "local": false,
                                                                "uid": "1R8gv95Qo9UjAwLJ9lXyP"
                                                            }
                                                        ]
                                                    },
                                                    "assertions": [],
                                                    "tests": "test(\"should get request var in scripts\", function() {\n  const testVar = bru.getRequestVar(\"request-var\");\n  expect(testVar).to.equal(\"request-var-value\");\n});",
                                                    "docs": ""
                                                },
                                                "filename": "getRequestVar.bru",
                                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/api/bru/getRequestVar.bru",
                                                "draft": null,
                                                "partial": false,
                                                "loading": false,
                                                "size": 0.00032711029052734375,
                                                "depth": 4
                                            },
                                            {
                                                "uid": "wGjAIntySuIofwoISu3O8",
                                                "name": "getVar",
                                                "type": "http-request",
                                                "seq": 5,
                                                "request": {
                                                    "method": "GET",
                                                    "url": "{{host}}/ping",
                                                    "params": [],
                                                    "headers": [],
                                                    "auth": {
                                                        "mode": "none"
                                                    },
                                                    "body": {
                                                        "mode": "none"
                                                    },
                                                    "script": {},
                                                    "vars": {},
                                                    "assertions": [],
                                                    "tests": "test(\"should get var in scripts\", function() {\n  const testSetVar = bru.getVar(\"testSetVar\");\n  expect(testSetVar).to.equal(\"bruno-test-87267\");\n});",
                                                    "docs": ""
                                                },
                                                "filename": "getVar.bru",
                                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/api/bru/getVar.bru",
                                                "draft": null,
                                                "partial": false,
                                                "loading": false,
                                                "size": 0.0002574920654296875,
                                                "depth": 4
                                            },
                                            {
                                                "uid": "4XBOUQFtagj8MfMZLVs8n",
                                                "name": "interpolate",
                                                "type": "http-request",
                                                "seq": 13,
                                                "request": {
                                                    "method": "GET",
                                                    "url": "{{host}}/ping",
                                                    "params": [],
                                                    "headers": [],
                                                    "auth": {
                                                        "mode": "none"
                                                    },
                                                    "body": {
                                                        "mode": "none"
                                                    },
                                                    "script": {},
                                                    "vars": {},
                                                    "assertions": [],
                                                    "tests": "test(\"should interpolate envs\", function() {\n  const interpolated = bru.interpolate(\"url: {{host}}\")\n  expect(interpolated).to.equal(\"url: https://testbench-sanity.usebruno.com\");\n});\n\ntest(\"should interpolate random variables\", function() {\n  const a = bru.interpolate(\"{{$randomInt}}\")\n  const b = bru.interpolate(\"{{$randomInt}}\")\n  expect(a).to.not.equal(b)\n});\n\nconst randomObj = {\n  host: \"{{host}}\",\n  int: \"{{$randomInt}}\",\n  timestamp: \"{{$timestamp}}\"\n}\n\ntest(\"should interpolate objects with vars, random vars\", function() {\n  const objA = bru.interpolate(randomObj)\n  const objB = bru.interpolate(randomObj)\n  \n  expect(objA).to.be.an(\"object\")\n  expect(objB).to.be.an(\"object\")\n  expect(objA).to.not.deep.eql(objB)\n});",
                                                    "docs": ""
                                                },
                                                "filename": "interpolate.bru",
                                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/api/bru/interpolate.bru",
                                                "draft": null,
                                                "partial": false,
                                                "loading": false,
                                                "size": 0.0008592605590820312,
                                                "depth": 4
                                            },
                                            {
                                                "uid": "f5dTlrEvDSXbhpiHjiCQH",
                                                "name": "runRequest-1",
                                                "type": "http-request",
                                                "seq": 10,
                                                "request": {
                                                    "method": "POST",
                                                    "url": "{{echo-host}}",
                                                    "params": [],
                                                    "headers": [],
                                                    "auth": {
                                                        "mode": "none"
                                                    },
                                                    "body": {
                                                        "text": "bruno",
                                                        "mode": "text"
                                                    },
                                                    "script": {
                                                        "req": "// reset values\nbru.setVar('run-request-runtime-var', null);\nbru.setEnvVar('run-request-env-var', null);\nbru.setGlobalEnvVar('run-request-global-env-var', null);\n\n// the above vars will be set in the below request\nconst resp = await bru.runRequest('scripting/api/bru/runRequest-2');\n\nbru.setVar('run-request-resp', {\n  data: resp?.data,\n  statusText: resp?.statusText,\n  status: resp?.status\n});"
                                                    },
                                                    "vars": {},
                                                    "assertions": [],
                                                    "tests": "test(\"should get runtime var set in runRequest-2\", function() {\n  const val = bru.getVar(\"run-request-runtime-var\");\n  expect(val).to.equal(\"run-request-runtime-var-value\");\n});\n\ntest(\"should get env var set in runRequest-2\", function() {\n  const val = bru.getEnvVar(\"run-request-env-var\");\n  expect(val).to.equal(\"run-request-env-var-value\");\n});\n\ntest(\"should get global env var set in runRequest-2\", function() {\n  const val = bru.getGlobalEnvVar(\"run-request-global-env-var\");\n  const executionMode = req.getExecutionMode();\n  if (executionMode == 'runner') {\n    expect(val).to.equal(\"run-request-global-env-var-value\");\n  }\n});\n\ntest(\"should get response of runRequest-2\", function() {\n  const val = bru.getVar('run-request-resp');\n  expect(JSON.stringify(val)).to.equal(JSON.stringify({\n      \"data\": \"bruno\",\n      \"statusText\": \"OK\",\n      \"status\": 200\n    }));\n});",
                                                    "docs": ""
                                                },
                                                "filename": "runRequest-1.bru",
                                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/api/bru/runRequest-1.bru",
                                                "draft": null,
                                                "partial": false,
                                                "loading": false,
                                                "size": 0.0014476776123046875,
                                                "depth": 4
                                            },
                                            {
                                                "uid": "FZAtlRYkXWNeupdkVZM8n",
                                                "name": "runRequest-2",
                                                "type": "http-request",
                                                "seq": 11,
                                                "request": {
                                                    "method": "POST",
                                                    "url": "{{echo-host}}",
                                                    "params": [],
                                                    "headers": [],
                                                    "auth": {
                                                        "mode": "none"
                                                    },
                                                    "body": {
                                                        "text": "bruno",
                                                        "mode": "text"
                                                    },
                                                    "script": {
                                                        "req": "bru.setVar('run-request-runtime-var', 'run-request-runtime-var-value');\nbru.setEnvVar('run-request-env-var', 'run-request-env-var-value');\nbru.setGlobalEnvVar('run-request-global-env-var', 'run-request-global-env-var-value');"
                                                    },
                                                    "vars": {},
                                                    "assertions": [],
                                                    "tests": "",
                                                    "docs": ""
                                                },
                                                "filename": "runRequest-2.bru",
                                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/api/bru/runRequest-2.bru",
                                                "draft": null,
                                                "partial": false,
                                                "loading": false,
                                                "size": 0.00037097930908203125,
                                                "depth": 4
                                            },
                                            {
                                                "uid": "fdgLvmXoLsq44SaXcRDLM",
                                                "name": "runRequest",
                                                "type": "http-request",
                                                "seq": 2,
                                                "request": {
                                                    "method": "POST",
                                                    "url": "{{host}}/api/echo/json",
                                                    "params": [],
                                                    "headers": [
                                                        {
                                                            "name": "foo",
                                                            "value": "bar",
                                                            "enabled": true,
                                                            "uid": "znaCiajhraFp8R6DdHkJU"
                                                        }
                                                    ],
                                                    "auth": {
                                                        "basic": {
                                                            "username": "asd",
                                                            "password": "j"
                                                        },
                                                        "bearer": {
                                                            "token": ""
                                                        },
                                                        "mode": "none"
                                                    },
                                                    "body": {
                                                        "json": "{\n  \"hello\": \"bruno\"\n}",
                                                        "mode": "json"
                                                    },
                                                    "script": {
                                                        "req": "bru.setVar(\"runRequest-ping-res-1\", null);\nbru.setVar(\"runRequest-ping-res-2\", null);\nbru.setVar(\"runRequest-ping-res-3\", null);\n\nlet pingRes = await bru.runRequest('ping');\nbru.setVar('runRequest-ping-res-1', {\n  data: pingRes?.data,\n  statusText: pingRes?.statusText,\n  status: pingRes?.status\n});",
                                                        "res": "let pingRes = await bru.runRequest('ping');\nbru.setVar('runRequest-ping-res-2', {\n  data: pingRes?.data,\n  statusText: pingRes?.statusText,\n  status: pingRes?.status\n});"
                                                    },
                                                    "vars": {},
                                                    "assertions": [
                                                        {
                                                            "name": "res.status",
                                                            "value": "eq 200",
                                                            "enabled": true,
                                                            "uid": "Cajxbq0CXHPugqYTute7x"
                                                        }
                                                    ],
                                                    "tests": "const pingRes = await bru.runRequest('ping');\nbru.setVar('runRequest-ping-res-3', {\n  data: pingRes?.data,\n  statusText: pingRes?.statusText,\n  status: pingRes?.status\n});\n\ntest(\"should run request and return valid response in pre-request script\", function() {\n  const expectedPingRes = {\n    data: \"pong\",\n    statusText: \"OK\",\n    status: 200\n  };\n  const pingRes = bru.getVar('runRequest-ping-res-1');\n  expect(pingRes).to.eql(expectedPingRes);\n});\n\ntest(\"should run request and return valid response in post-response script\", function() {\n  const expectedPingRes = {\n    data: \"pong\",\n    statusText: \"OK\",\n    status: 200\n  };\n  const pingRes = bru.getVar('runRequest-ping-res-2');\n  expect(pingRes).to.eql(expectedPingRes);\n});\n\ntest(\"should run request and return valid response in tests script\", function() {\n  const expectedPingRes = {\n    data: \"pong\",\n    statusText: \"OK\",\n    status: 200\n  };\n  const pingRes = bru.getVar('runRequest-ping-res-3');\n  expect(pingRes).to.eql(expectedPingRes);\n});\n",
                                                    "docs": ""
                                                },
                                                "filename": "runRequest.bru",
                                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/api/bru/runRequest.bru",
                                                "draft": null,
                                                "partial": false,
                                                "loading": false,
                                                "size": 0.0018463134765625,
                                                "depth": 4
                                            },
                                            {
                                                "uid": "GqM4HcVljYOujTjgxV8KD",
                                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/api/bru/runner",
                                                "name": "runner",
                                                "seq": 1,
                                                "filename": "runner",
                                                "collapsed": true,
                                                "type": "folder",
                                                "items": [
                                                    {
                                                        "uid": "2RAhLEMvgTaOqMNJpOwpr",
                                                        "name": "1",
                                                        "type": "http-request",
                                                        "seq": 1,
                                                        "request": {
                                                            "method": "POST",
                                                            "url": "https://echo.usebruno.com",
                                                            "params": [],
                                                            "headers": [],
                                                            "auth": {
                                                                "mode": "none"
                                                            },
                                                            "body": {
                                                                "mode": "none"
                                                            },
                                                            "script": {
                                                                "req": "bru.setVar('bru-runner-req', 1);",
                                                                "res": "bru.setVar('bru.runner.skipRequest', true);"
                                                            },
                                                            "vars": {},
                                                            "assertions": [],
                                                            "tests": "",
                                                            "docs": ""
                                                        },
                                                        "filename": "1.bru",
                                                        "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/api/bru/runner/1.bru",
                                                        "draft": null,
                                                        "partial": false,
                                                        "loading": false,
                                                        "size": 0.00022983551025390625,
                                                        "depth": 5
                                                    },
                                                    {
                                                        "uid": "jh9yCdRrZestLG38wn96L",
                                                        "name": "2",
                                                        "type": "http-request",
                                                        "seq": 2,
                                                        "request": {
                                                            "method": "POST",
                                                            "url": "https://echo.usebruno.com",
                                                            "params": [],
                                                            "headers": [],
                                                            "auth": {
                                                                "mode": "none"
                                                            },
                                                            "body": {
                                                                "mode": "none"
                                                            },
                                                            "script": {
                                                                "req": "bru.runner.skipRequest();",
                                                                "res": "bru.setVar('bru.runner.skipRequest', false);"
                                                            },
                                                            "vars": {},
                                                            "assertions": [],
                                                            "tests": "",
                                                            "docs": ""
                                                        },
                                                        "filename": "2.bru",
                                                        "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/api/bru/runner/2.bru",
                                                        "draft": null,
                                                        "partial": false,
                                                        "loading": false,
                                                        "size": 0.00022411346435546875,
                                                        "depth": 5
                                                    },
                                                    {
                                                        "uid": "At5c7KAKLJPfPFBsqZyXg",
                                                        "name": "3",
                                                        "type": "http-request",
                                                        "seq": 3,
                                                        "request": {
                                                            "method": "POST",
                                                            "url": "https://echo.usebruno.com",
                                                            "params": [],
                                                            "headers": [],
                                                            "auth": {
                                                                "mode": "none"
                                                            },
                                                            "body": {
                                                                "mode": "none"
                                                            },
                                                            "script": {},
                                                            "vars": {},
                                                            "assertions": [],
                                                            "tests": "",
                                                            "docs": ""
                                                        },
                                                        "filename": "3.bru",
                                                        "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/api/bru/runner/3.bru",
                                                        "draft": null,
                                                        "partial": false,
                                                        "loading": false,
                                                        "size": 0.0001049041748046875,
                                                        "depth": 5
                                                    }
                                                ],
                                                "depth": 4
                                            },
                                            {
                                                "uid": "s37etIRjfCsWaQNZE9N29",
                                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/api/bru/send-request",
                                                "name": "send-request",
                                                "seq": 16,
                                                "filename": "send-request",
                                                "collapsed": true,
                                                "type": "folder",
                                                "items": [
                                                    {
                                                        "uid": "5sbJWgy5b8UhMFju52XNw",
                                                        "name": "get-url-string",
                                                        "type": "http-request",
                                                        "seq": 1,
                                                        "request": {
                                                            "method": "GET",
                                                            "url": "https://www.example.com",
                                                            "params": [],
                                                            "headers": [],
                                                            "auth": {
                                                                "mode": "inherit"
                                                            },
                                                            "body": {
                                                                "mode": "none"
                                                            },
                                                            "script": {},
                                                            "vars": {},
                                                            "assertions": [],
                                                            "tests": "// await test(\"send request with a get url string\", async () => {\n//   const res = await bru.sendRequest(\"https://testbench-sanity.usebruno.com/ping\");\n//   expect(res.data).to.eql('pong');\n// });\n\nawait test(\"post request with async/await - success case\", async () => {\n  const res = await bru.sendRequest({\n    url: 'https://self-signed.badssl.com',\n    method: 'GET',\n    timeout: 5000\n  });\n  expect(res.data).to.eql('ping');\n});\n\nawait test(\"post request with async/await - success case\", async () => {\n  const res = await bru.sendRequest({\n    url: 'http://localhost:8090',\n    method: 'GET',\n    timeout: 5000\n  }).catch(err => {\n    console.log({ err });\n  });\n  console.log({ res });\n//   expect(res.data).to.eql('ping');\n});",
                                                            "docs": ""
                                                        },
                                                        "filename": "get-url-string.bru",
                                                        "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/api/bru/send-request/get-url-string.bru",
                                                        "draft": null,
                                                        "partial": false,
                                                        "loading": false,
                                                        "size": 0.0008764266967773438,
                                                        "depth": 5
                                                    },
                                                    {
                                                        "uid": "IIvFiZ0WFhA1FYizowq5F",
                                                        "name": "usage-patterns",
                                                        "type": "http-request",
                                                        "seq": 1,
                                                        "request": {
                                                            "method": "POST",
                                                            "url": "https://echo.usebruno.com",
                                                            "params": [],
                                                            "headers": [],
                                                            "auth": {
                                                                "mode": "inherit"
                                                            },
                                                            "body": {
                                                                "mode": "none"
                                                            },
                                                            "script": {},
                                                            "vars": {},
                                                            "assertions": [],
                                                            "tests": "// // pattern 1: using async/await\n// await test(\"post request with async/await - success case\", async () => {\n//   const res = await bru.sendRequest({\n//     url: 'https://echo.usebruno.com',\n//     method: 'POST',\n//     data: 'ping'\n//   });\n//   expect(res.data).to.eql('ping');\n// });\n\n// await test(\"post request with async/await - error case\", async () => {\n//   try {\n//     await bru.sendRequest({\n//       url: 'https://echo.usebruno.com/invalid',\n//       method: 'POST',\n//       data: 'ping'\n//     }); \n//   }\n//   catch(err) {\n//     expect(err.status).to.eql(404);\n//   }\n// });\n\n// await test(\"post request with async/await - error case - invalid url\", async () => {\n//   try {\n//     await bru.sendRequest({\n//       url: 'invalid',\n//       method: 'POST',\n//       data: 'ping'\n//     }); \n//   }\n//   catch(err) {\n//     expect(err.code).to.eql('ERR_INVALID_URL');\n//   }\n// });\n\n// // pattern 2: using promise (.then/.catch)\n// await test(\"post request with promise chain - success case\", async () => {\n//   await bru.sendRequest({\n//     url: 'https://echo.usebruno.com',\n//     method: 'POST',\n//     data: 'ping'\n//   })\n//   .then(res => {\n//     expect(res.data).to.eql('ping');\n//   });\n// });\n\n// await test(\"post request with promise chain - error case\", async () => {\n//   await bru.sendRequest({\n//     url: 'https://echo.usebruno.com/invalid',\n//     method: 'POST',\n//     data: 'ping'\n//   })\n//   .catch(err => {\n//     expect(err.status).to.eql(404);\n//   });\n// });\n\n// await test(\"post request with promise chain - error case - invalid url\", async () => {\n//   await bru.sendRequest({\n//     url: 'invalid',\n//     method: 'POST',\n//     data: 'ping'\n//   })\n//   .catch(err => {\n//     expect(err.code).to.eql('ERR_INVALID_URL');\n//   });\n// });\n\n// // pattern 3: using callbacks\n// await test(\"post request with callback - success case\", async () => {\n//   await bru.sendRequest({\n//     url: 'https://echo.usebruno.com',\n//     method: 'POST',\n//     data: 'ping'\n//   }, function(error, response) {\n//     expect(response.data).to.eql('ping');\n//   });\n// });\n\n// await test(\"post request with callback - error case\", async () => {\n//   await bru.sendRequest({\n//     url: 'https://echo.usebruno.com/invalid',\n//     method: 'POST',\n//     data: 'ping'\n//   }, function(error, response) {\n//     expect(error.status).to.eql(404);\n//   });\n// });\n\n// await test(\"post request with callback - error case - invalid url\", async () => {\n//   await bru.sendRequest({\n//     url: 'invalid',\n//     method: 'POST',\n//     data: 'ping'\n//   }, function(error, response) {\n//     expect(error.code).to.eql('ERR_INVALID_URL');\n//   });\n// });\n\n\n// await test(\"post request with callback - error case - invalid url\", async () => {\n//   await bru.sendRequest({\n//     url: 'https://localhost:42424',\n//     method: 'GET',\n//   }, function(error, response) {\n//     expect(error.code).to.eql('ECONNREFUSED');\n//   });\n// });",
                                                            "docs": ""
                                                        },
                                                        "filename": "usage-patterns.bru",
                                                        "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/api/bru/send-request/usage-patterns.bru",
                                                        "draft": null,
                                                        "partial": false,
                                                        "loading": false,
                                                        "size": 0.0031576156616210938,
                                                        "depth": 5
                                                    },
                                                    {
                                                        "uid": "uzrmxuRJyHBCi7OIc99Qj",
                                                        "name": "usage-patterns_fail_test",
                                                        "type": "http-request",
                                                        "seq": 3,
                                                        "request": {
                                                            "method": "POST",
                                                            "url": "https://echo.usebruno.com",
                                                            "params": [],
                                                            "headers": [],
                                                            "auth": {
                                                                "mode": "inherit"
                                                            },
                                                            "body": {
                                                                "mode": "none"
                                                            },
                                                            "script": {},
                                                            "vars": {},
                                                            "assertions": [],
                                                            "tests": "// pattern 1: using async/await\nawait test(\"post request with async/await - success case\", async () => {\n  const res = await bru.sendRequest({\n    url: 'https://echo.usebruno.com',\n    method: 'POST',\n    data: 'ping'\n  });\n  expect(res.data).to.eql('pin');\n});\n\nawait test(\"post request with async/await - error case\", async () => {\n  try {\n    await bru.sendRequest({\n      url: 'https://echo.usebruno.com/invalid',\n      method: 'POST',\n      data: 'ping'\n    }); \n  }\n  catch(err) {\n    expect(err.status).to.eql(40);\n  }\n});\n\nawait test(\"post request with async/await - error case - invalid url\", async () => {\n  try {\n    await bru.sendRequest({\n      url: 'invalid',\n      method: 'POST',\n      data: 'ping'\n    }); \n  }\n  catch(err) {\n    expect(err.code).to.eql('ERR_INVALID_UR');\n  }\n});\n\n// pattern 2: using promise (.then/.catch)\nawait test(\"post request with promise chain - success case\", async () => {\n  await bru.sendRequest({\n    url: 'https://echo.usebruno.com',\n    method: 'POST',\n    data: 'ping'\n  })\n  .then(res => {\n    expect(res.data).to.eql('pin');\n  });\n});\n\nawait test(\"post request with promise chain - error case\", async () => {\n  await bru.sendRequest({\n    url: 'https://echo.usebruno.com/invalid',\n    method: 'POST',\n    data: 'ping'\n  })\n  .catch(err => {\n    expect(err.status).to.eql(40);\n  });\n});\n\nawait test(\"post request with promise chain - error case - invalid url\", async () => {\n  await bru.sendRequest({\n    url: 'invalid',\n    method: 'POST',\n    data: 'ping'\n  })\n  .catch(err => {\n    expect(err.code).to.eql('ERR_INVALID_UR');\n  });\n});\n\n// pattern 3: using callbacks\nawait test(\"post request with callback - success case\", async () => {\n  await bru.sendRequest({\n    url: 'https://echo.usebruno.com',\n    method: 'POST',\n    data: 'ping'\n  }, function(error, response) {\n    expect(response.data).to.eql('pin');\n  });\n});\n\nawait test(\"post request with callback - error case\", async () => {\n  await bru.sendRequest({\n    url: 'https://echo.usebruno.com/invalid',\n    method: 'POST',\n    data: 'ping'\n  }, function(error, response) {\n    expect(error.status).to.eql(40);\n  });\n});\n\nawait test(\"post request with callback - error case - invalid url\", async () => {\n  await bru.sendRequest({\n    url: 'invalid',\n    method: 'POST',\n    data: 'ping'\n  }, function(error, response) {\n    expect(error.code).to.eql('ERR_INVALID_UR');\n  });\n});\n\nawait test(\"post request with callback - error case - invalid url\", async () => {\n  await bru.sendRequest({\n    url: 'invalid',\n    method: 'GET',\n  }, function(error, response) {\n    expect(error.code).to.eql('ERR_INVALID_UR');\n  });\n});\n\nawait test(\"post request with callback - error case - invalid url\", async () => {\n  await bru.sendRequest({\n    url: 'https://localhost:42424',\n    method: 'GET',\n  }, function(error, response) {\n    expect(error.code).to.eql('ECONNREFUSE');\n  });\n});",
                                                            "docs": ""
                                                        },
                                                        "filename": "usage-patterns_fail_test.bru",
                                                        "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/api/bru/send-request/usage-patterns_fail_test.bru",
                                                        "draft": null,
                                                        "partial": false,
                                                        "loading": false,
                                                        "size": 0.0031147003173828125,
                                                        "depth": 5
                                                    }
                                                ],
                                                "depth": 4,
                                                "root": {
                                                    "request": {
                                                        "headers": [],
                                                        "auth": {
                                                            "mode": "inherit"
                                                        },
                                                        "script": {},
                                                        "vars": {},
                                                        "tests": ""
                                                    },
                                                    "docs": "",
                                                    "meta": {
                                                        "name": "send-request",
                                                        "seq": 16
                                                    }
                                                }
                                            },
                                            {
                                                "uid": "1kM9pUN7UVK1QuxUxikUD",
                                                "name": "setEnvVar",
                                                "type": "http-request",
                                                "seq": 3,
                                                "request": {
                                                    "method": "GET",
                                                    "url": "{{host}}/ping",
                                                    "params": [],
                                                    "headers": [],
                                                    "auth": {
                                                        "mode": "none"
                                                    },
                                                    "body": {
                                                        "mode": "none"
                                                    },
                                                    "script": {
                                                        "res": "bru.setEnvVar(\"testSetEnvVar\", \"bruno-29653\")"
                                                    },
                                                    "vars": {},
                                                    "assertions": [],
                                                    "tests": "test(\"should set env var in scripts\", function() {\n  const testSetEnvVar = bru.getEnvVar(\"testSetEnvVar\")\n  expect(testSetEnvVar).to.equal(\"bruno-29653\");\n});",
                                                    "docs": ""
                                                },
                                                "filename": "setEnvVar.bru",
                                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/api/bru/setEnvVar.bru",
                                                "draft": null,
                                                "partial": false,
                                                "loading": false,
                                                "size": 0.00034046173095703125,
                                                "depth": 4
                                            },
                                            {
                                                "uid": "Cbfuc5eC2Nn2hfkT3abgN",
                                                "name": "setVar",
                                                "type": "http-request",
                                                "seq": 4,
                                                "request": {
                                                    "method": "GET",
                                                    "url": "{{host}}/ping",
                                                    "params": [],
                                                    "headers": [],
                                                    "auth": {
                                                        "mode": "none"
                                                    },
                                                    "body": {
                                                        "mode": "none"
                                                    },
                                                    "script": {
                                                        "res": "bru.setVar(\"testSetVar\", \"bruno-test-87267\")"
                                                    },
                                                    "vars": {},
                                                    "assertions": [],
                                                    "tests": "test(\"should get var in scripts\", function() {\n  const testSetVar = bru.getVar(\"testSetVar\");\n  expect(testSetVar).to.equal(\"bruno-test-87267\");\n});",
                                                    "docs": ""
                                                },
                                                "filename": "setVar.bru",
                                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/api/bru/setVar.bru",
                                                "draft": null,
                                                "partial": false,
                                                "loading": false,
                                                "size": 0.00032711029052734375,
                                                "depth": 4
                                            }
                                        ],
                                        "depth": 3,
                                        "root": {
                                            "request": {
                                                "headers": [],
                                                "auth": {},
                                                "script": {},
                                                "vars": {
                                                    "req": [
                                                        {
                                                            "name": "folder-var",
                                                            "value": "folder-var-value",
                                                            "enabled": true,
                                                            "local": false,
                                                            "uid": "XrT49dE4Tur5erchQAG7V"
                                                        }
                                                    ]
                                                },
                                                "tests": ""
                                            },
                                            "docs": "",
                                            "meta": {
                                                "name": "bru",
                                                "seq": 1
                                            }
                                        }
                                    },
                                    {
                                        "uid": "4QXT8hAdFjb0ICvPzn2pG",
                                        "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/api/req",
                                        "name": "req",
                                        "seq": 1,
                                        "filename": "req",
                                        "collapsed": true,
                                        "type": "folder",
                                        "items": [
                                            {
                                                "uid": "OMPTBY8fGkde6iB5R2BTM",
                                                "name": "getBody",
                                                "type": "http-request",
                                                "seq": 9,
                                                "request": {
                                                    "method": "POST",
                                                    "url": "{{host}}/api/echo/json",
                                                    "params": [],
                                                    "headers": [],
                                                    "auth": {
                                                        "basic": {
                                                            "username": "asd",
                                                            "password": "j"
                                                        },
                                                        "bearer": {
                                                            "token": ""
                                                        },
                                                        "mode": "none"
                                                    },
                                                    "body": {
                                                        "json": "{\n  \"hello\": \"bruno\"\n}",
                                                        "mode": "json"
                                                    },
                                                    "script": {},
                                                    "vars": {},
                                                    "assertions": [
                                                        {
                                                            "name": "res.status",
                                                            "value": "eq 200",
                                                            "enabled": true,
                                                            "uid": "Rah0AbOkqjifKl9WjmI2U"
                                                        }
                                                    ],
                                                    "tests": "test(\"req.getBody()\", function() {\n  const data = res.getBody();\n  expect(data).to.eql({\n    \"hello\": \"bruno\"\n  });\n});\n",
                                                    "docs": ""
                                                },
                                                "filename": "getBody.bru",
                                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/api/req/getBody.bru",
                                                "draft": null,
                                                "partial": false,
                                                "loading": false,
                                                "size": 0.00039005279541015625,
                                                "depth": 4
                                            },
                                            {
                                                "uid": "ChuStTYQ7BLZj56GSAfOe",
                                                "name": "getHeader",
                                                "type": "http-request",
                                                "seq": 5,
                                                "request": {
                                                    "method": "GET",
                                                    "url": "{{host}}/ping",
                                                    "params": [],
                                                    "headers": [
                                                        {
                                                            "name": "bruno",
                                                            "value": "is-awesome",
                                                            "enabled": true,
                                                            "uid": "OP9xoOrpAAmRY7MSiS0Cl"
                                                        }
                                                    ],
                                                    "auth": {
                                                        "mode": "none"
                                                    },
                                                    "body": {
                                                        "mode": "none"
                                                    },
                                                    "script": {},
                                                    "vars": {},
                                                    "assertions": [
                                                        {
                                                            "name": "res.status",
                                                            "value": "eq 200",
                                                            "enabled": true,
                                                            "uid": "x1ZSLxBXlmPSTQPSPSyDC"
                                                        },
                                                        {
                                                            "name": "res.body",
                                                            "value": "eq pong",
                                                            "enabled": true,
                                                            "uid": "3stxCxewVVcaGqYgfSJi9"
                                                        }
                                                    ],
                                                    "tests": "test(\"req.getHeader(name)\", function() {\n  const h = req.getHeader('bruno');\n  expect(h).to.equal(\"is-awesome\");\n});",
                                                    "docs": ""
                                                },
                                                "filename": "getHeader.bru",
                                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/api/req/getHeader.bru",
                                                "draft": null,
                                                "partial": false,
                                                "loading": false,
                                                "size": 0.00031185150146484375,
                                                "depth": 4
                                            },
                                            {
                                                "uid": "yRBWU8SNvW7bhwlBETEB2",
                                                "name": "getHeaders",
                                                "type": "http-request",
                                                "seq": 7,
                                                "request": {
                                                    "method": "GET",
                                                    "url": "{{host}}/ping",
                                                    "params": [],
                                                    "headers": [
                                                        {
                                                            "name": "bruno",
                                                            "value": "is-awesome",
                                                            "enabled": true,
                                                            "uid": "9rm9hZRKT3RvHS7pz1fdK"
                                                        },
                                                        {
                                                            "name": "della",
                                                            "value": "is-beautiful",
                                                            "enabled": true,
                                                            "uid": "W7h2xyyTq7iqSkXFCqR5q"
                                                        }
                                                    ],
                                                    "auth": {
                                                        "mode": "none"
                                                    },
                                                    "body": {
                                                        "mode": "none"
                                                    },
                                                    "script": {},
                                                    "vars": {},
                                                    "assertions": [
                                                        {
                                                            "name": "res.status",
                                                            "value": "eq 200",
                                                            "enabled": true,
                                                            "uid": "g9ShgRYGPbej77GsLafqq"
                                                        },
                                                        {
                                                            "name": "res.body",
                                                            "value": "eq pong",
                                                            "enabled": true,
                                                            "uid": "tajslsFslSNOFh9Zw9Iav"
                                                        }
                                                    ],
                                                    "tests": "test(\"req.getHeaders()\", function() {\n  const h = req.getHeaders();\n  expect(h.bruno).to.equal(\"is-awesome\");\n  expect(h.della).to.equal(\"is-beautiful\");\n});",
                                                    "docs": ""
                                                },
                                                "filename": "getHeaders.bru",
                                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/api/req/getHeaders.bru",
                                                "draft": null,
                                                "partial": false,
                                                "loading": false,
                                                "size": 0.00037479400634765625,
                                                "depth": 4
                                            },
                                            {
                                                "uid": "KLdKJsw7TT8yzg68kNEos",
                                                "name": "getMethod",
                                                "type": "http-request",
                                                "seq": 3,
                                                "request": {
                                                    "method": "GET",
                                                    "url": "{{host}}/ping",
                                                    "params": [],
                                                    "headers": [],
                                                    "auth": {
                                                        "mode": "none"
                                                    },
                                                    "body": {
                                                        "mode": "none"
                                                    },
                                                    "script": {},
                                                    "vars": {},
                                                    "assertions": [
                                                        {
                                                            "name": "res.status",
                                                            "value": "eq 200",
                                                            "enabled": true,
                                                            "uid": "fDC2KeKGEAdue9Fw1j6xc"
                                                        },
                                                        {
                                                            "name": "res.body",
                                                            "value": "eq pong",
                                                            "enabled": true,
                                                            "uid": "JtdTpIFNxAA2QjajSp4TL"
                                                        }
                                                    ],
                                                    "tests": "test(\"req.getMethod()()\", function() {\n  const method = req.getMethod();\n  expect(method).to.equal(\"GET\");\n});",
                                                    "docs": ""
                                                },
                                                "filename": "getMethod.bru",
                                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/api/req/getMethod.bru",
                                                "draft": null,
                                                "partial": false,
                                                "loading": false,
                                                "size": 0.000274658203125,
                                                "depth": 4
                                            },
                                            {
                                                "uid": "iyjhPARvpFrEDD8afKWSU",
                                                "name": "getName",
                                                "type": "http-request",
                                                "seq": 11,
                                                "request": {
                                                    "method": "GET",
                                                    "url": "{{host}}/ping",
                                                    "params": [],
                                                    "headers": [],
                                                    "auth": {
                                                        "mode": "inherit"
                                                    },
                                                    "body": {
                                                        "mode": "none"
                                                    },
                                                    "script": {},
                                                    "vars": {},
                                                    "assertions": [],
                                                    "tests": "test(\"Check if request name is getName\", function () {\n    expect(req.getName()).to.eql(\"getName\");\n});",
                                                    "docs": ""
                                                },
                                                "filename": "getName.bru",
                                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/api/req/getName.bru",
                                                "draft": null,
                                                "partial": false,
                                                "loading": false,
                                                "size": 0.000217437744140625,
                                                "depth": 4
                                            },
                                            {
                                                "uid": "3y3cGOcEHMXRfKN1JGMFc",
                                                "name": "getUrl",
                                                "type": "http-request",
                                                "seq": 1,
                                                "request": {
                                                    "method": "GET",
                                                    "url": "{{host}}/ping",
                                                    "params": [],
                                                    "headers": [],
                                                    "auth": {
                                                        "mode": "none"
                                                    },
                                                    "body": {
                                                        "mode": "none"
                                                    },
                                                    "script": {},
                                                    "vars": {},
                                                    "assertions": [
                                                        {
                                                            "name": "res.status",
                                                            "value": "eq 200",
                                                            "enabled": true,
                                                            "uid": "j6woOe12ECXVw9jnMotJK"
                                                        },
                                                        {
                                                            "name": "res.body",
                                                            "value": "eq pong",
                                                            "enabled": true,
                                                            "uid": "oF0SIl7hUy0kxPu5fk5PY"
                                                        }
                                                    ],
                                                    "tests": "test(\"req.getUrl()\", function() {\n  const url = req.getUrl();\n  expect(url).to.equal(\"https://testbench-sanity.usebruno.com/ping\");\n});",
                                                    "docs": ""
                                                },
                                                "filename": "getUrl.bru",
                                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/api/req/getUrl.bru",
                                                "draft": null,
                                                "partial": false,
                                                "loading": false,
                                                "size": 0.0002956390380859375,
                                                "depth": 4
                                            },
                                            {
                                                "uid": "adl0dKYpzbftM4eAGYFuR",
                                                "name": "setBody",
                                                "type": "http-request",
                                                "seq": 10,
                                                "request": {
                                                    "method": "POST",
                                                    "url": "{{host}}/api/echo/json",
                                                    "params": [],
                                                    "headers": [],
                                                    "auth": {
                                                        "basic": {
                                                            "username": "asd",
                                                            "password": "j"
                                                        },
                                                        "bearer": {
                                                            "token": ""
                                                        },
                                                        "mode": "none"
                                                    },
                                                    "body": {
                                                        "json": "{\n  \"hello\": \"bruno\"\n}",
                                                        "mode": "json"
                                                    },
                                                    "script": {
                                                        "req": "req.setBody({\n  \"bruno\": \"is awesome\"\n});"
                                                    },
                                                    "vars": {},
                                                    "assertions": [
                                                        {
                                                            "name": "res.status",
                                                            "value": "eq 200",
                                                            "enabled": true,
                                                            "uid": "caVb7uPUgKX6sCQrone9X"
                                                        }
                                                    ],
                                                    "tests": "test(\"req.setBody()\", function() {\n  const data = res.getBody();\n  expect(data).to.eql({\n    \"bruno\": \"is awesome\"\n  });\n});\n",
                                                    "docs": ""
                                                },
                                                "filename": "setBody.bru",
                                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/api/req/setBody.bru",
                                                "draft": null,
                                                "partial": false,
                                                "loading": false,
                                                "size": 0.00046443939208984375,
                                                "depth": 4
                                            },
                                            {
                                                "uid": "ZOGUIEeXh5wrjkA2N6GGc",
                                                "name": "setHeader",
                                                "type": "http-request",
                                                "seq": 6,
                                                "request": {
                                                    "method": "GET",
                                                    "url": "{{host}}/ping",
                                                    "params": [],
                                                    "headers": [
                                                        {
                                                            "name": "bruno",
                                                            "value": "is-awesome",
                                                            "enabled": true,
                                                            "uid": "kk0uWcSfhxW81ikThpXFV"
                                                        }
                                                    ],
                                                    "auth": {
                                                        "mode": "none"
                                                    },
                                                    "body": {
                                                        "mode": "none"
                                                    },
                                                    "script": {
                                                        "req": "req.setHeader('bruno', 'is-the-future');"
                                                    },
                                                    "vars": {},
                                                    "assertions": [
                                                        {
                                                            "name": "res.status",
                                                            "value": "eq 200",
                                                            "enabled": true,
                                                            "uid": "0Js9jjpUQDo8DssPTgbel"
                                                        },
                                                        {
                                                            "name": "res.body",
                                                            "value": "eq pong",
                                                            "enabled": true,
                                                            "uid": "A2JxQqlyT8yMZLq2Zszl1"
                                                        }
                                                    ],
                                                    "tests": "test(\"req.setHeader(name)\", function() {\n  const h = req.getHeader('bruno');\n  expect(h).to.equal(\"is-the-future\");\n});",
                                                    "docs": ""
                                                },
                                                "filename": "setHeader.bru",
                                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/api/req/setHeader.bru",
                                                "draft": null,
                                                "partial": false,
                                                "loading": false,
                                                "size": 0.00037860870361328125,
                                                "depth": 4
                                            },
                                            {
                                                "uid": "WkMmdvhCYlAZNkuQOjOk2",
                                                "name": "setHeaders",
                                                "type": "http-request",
                                                "seq": 8,
                                                "request": {
                                                    "method": "GET",
                                                    "url": "{{host}}/ping",
                                                    "params": [],
                                                    "headers": [
                                                        {
                                                            "name": "bruno",
                                                            "value": "is-awesome",
                                                            "enabled": true,
                                                            "uid": "5byhwF7pXAhLg4QqX0hQX"
                                                        },
                                                        {
                                                            "name": "della",
                                                            "value": "is-beautiful",
                                                            "enabled": true,
                                                            "uid": "Y2S7Hxkqur6l0n7HoIUpp"
                                                        }
                                                    ],
                                                    "auth": {
                                                        "mode": "none"
                                                    },
                                                    "body": {
                                                        "mode": "none"
                                                    },
                                                    "script": {
                                                        "req": "req.setHeaders({\n  \"content-type\": \"application/text\",\n  \"transaction-id\": \"foobar\"\n});"
                                                    },
                                                    "vars": {},
                                                    "assertions": [
                                                        {
                                                            "name": "res.status",
                                                            "value": "eq 200",
                                                            "enabled": true,
                                                            "uid": "yikT7BX0Wq1fBSeIXkQuz"
                                                        },
                                                        {
                                                            "name": "res.body",
                                                            "value": "eq pong",
                                                            "enabled": true,
                                                            "uid": "levGEP9rj1uRTyXiGO5LT"
                                                        }
                                                    ],
                                                    "tests": "test(\"req.setHeaders()\", function() {\n  const h = req.getHeaders();\n  expect(h['content-type']).to.equal(\"application/text\");\n  expect(h['transaction-id']).to.equal(\"foobar\");\n});",
                                                    "docs": ""
                                                },
                                                "filename": "setHeaders.bru",
                                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/api/req/setHeaders.bru",
                                                "draft": null,
                                                "partial": false,
                                                "loading": false,
                                                "size": 0.0005102157592773438,
                                                "depth": 4
                                            },
                                            {
                                                "uid": "nHNbYZ37BimY33vjedHDj",
                                                "name": "setMethod",
                                                "type": "http-request",
                                                "seq": 4,
                                                "request": {
                                                    "method": "POST",
                                                    "url": "{{host}}/ping",
                                                    "params": [],
                                                    "headers": [],
                                                    "auth": {
                                                        "mode": "none"
                                                    },
                                                    "body": {
                                                        "mode": "none"
                                                    },
                                                    "script": {
                                                        "req": "req.setMethod(\"GET\");"
                                                    },
                                                    "vars": {},
                                                    "assertions": [
                                                        {
                                                            "name": "res.status",
                                                            "value": "eq 200",
                                                            "enabled": true,
                                                            "uid": "pkkjBOXq8KOJHazhVmint"
                                                        },
                                                        {
                                                            "name": "res.body",
                                                            "value": "eq pong",
                                                            "enabled": true,
                                                            "uid": "bfRuCkiILiZh2CFatFf0G"
                                                        }
                                                    ],
                                                    "tests": "test(\"req.setMethod()()\", function() {\n  const method = req.getMethod();\n  expect(method).to.equal(\"GET\");\n});",
                                                    "docs": ""
                                                },
                                                "filename": "setMethod.bru",
                                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/api/req/setMethod.bru",
                                                "draft": null,
                                                "partial": false,
                                                "loading": false,
                                                "size": 0.00032138824462890625,
                                                "depth": 4
                                            },
                                            {
                                                "uid": "3VmoJ2o1tfWBuL8xPN53w",
                                                "name": "setUrl",
                                                "type": "http-request",
                                                "seq": 2,
                                                "request": {
                                                    "method": "GET",
                                                    "url": "{{host}}/ping/invalid",
                                                    "params": [],
                                                    "headers": [],
                                                    "auth": {
                                                        "mode": "none"
                                                    },
                                                    "body": {
                                                        "mode": "none"
                                                    },
                                                    "script": {
                                                        "req": "req.setUrl(\"https://testbench-sanity.usebruno.com/ping\");"
                                                    },
                                                    "vars": {},
                                                    "assertions": [
                                                        {
                                                            "name": "res.status",
                                                            "value": "eq 200",
                                                            "enabled": true,
                                                            "uid": "eEwfCrltjbGz4AKzmhYoC"
                                                        },
                                                        {
                                                            "name": "res.body",
                                                            "value": "eq pong",
                                                            "enabled": true,
                                                            "uid": "wwJkGtcJCGnq1UerswjqH"
                                                        }
                                                    ],
                                                    "tests": "test(\"req.setUrl()\", function() {\n  const url = req.getUrl();\n  expect(url).to.equal(\"https://testbench-sanity.usebruno.com/ping\");\n});",
                                                    "docs": ""
                                                },
                                                "filename": "setUrl.bru",
                                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/api/req/setUrl.bru",
                                                "draft": null,
                                                "partial": false,
                                                "loading": false,
                                                "size": 0.0003833770751953125,
                                                "depth": 4
                                            }
                                        ],
                                        "depth": 3
                                    },
                                    {
                                        "uid": "jsRDvGHzwQirKkKPWE2lo",
                                        "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/api/res",
                                        "name": "res",
                                        "seq": 1,
                                        "filename": "res",
                                        "collapsed": true,
                                        "type": "folder",
                                        "items": [
                                            {
                                                "uid": "0h0vOhuuGpPSVieFKy8mW",
                                                "name": "getBody",
                                                "type": "http-request",
                                                "seq": 4,
                                                "request": {
                                                    "method": "POST",
                                                    "url": "{{host}}/api/echo/json",
                                                    "params": [],
                                                    "headers": [],
                                                    "auth": {
                                                        "basic": {
                                                            "username": "asd",
                                                            "password": "j"
                                                        },
                                                        "bearer": {
                                                            "token": ""
                                                        },
                                                        "mode": "none"
                                                    },
                                                    "body": {
                                                        "json": "{\n  \"hello\": \"bruno\"\n}",
                                                        "mode": "json"
                                                    },
                                                    "script": {},
                                                    "vars": {},
                                                    "assertions": [
                                                        {
                                                            "name": "res.status",
                                                            "value": "eq 200",
                                                            "enabled": true,
                                                            "uid": "M0reTICXXWdgK5VFEtWJP"
                                                        }
                                                    ],
                                                    "tests": "test(\"res.getBody()\", function() {\n  const data = res.getBody();\n  expect(data).to.eql({\n    \"hello\": \"bruno\"\n  });\n});\n",
                                                    "docs": ""
                                                },
                                                "filename": "getBody.bru",
                                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/api/res/getBody.bru",
                                                "draft": null,
                                                "partial": false,
                                                "loading": false,
                                                "size": 0.00039005279541015625,
                                                "depth": 4
                                            },
                                            {
                                                "uid": "nYqd8lzdc8jBYGYfkr7Pf",
                                                "name": "getHeader",
                                                "type": "http-request",
                                                "seq": 2,
                                                "request": {
                                                    "method": "POST",
                                                    "url": "{{host}}/api/echo/json",
                                                    "params": [],
                                                    "headers": [],
                                                    "auth": {
                                                        "basic": {
                                                            "username": "asd",
                                                            "password": "j"
                                                        },
                                                        "bearer": {
                                                            "token": ""
                                                        },
                                                        "mode": "none"
                                                    },
                                                    "body": {
                                                        "json": "{\n  \"hello\": \"bruno\"\n}",
                                                        "mode": "json"
                                                    },
                                                    "script": {},
                                                    "vars": {},
                                                    "assertions": [
                                                        {
                                                            "name": "res.status",
                                                            "value": "eq 200",
                                                            "enabled": true,
                                                            "uid": "xkarusNHFh9kh0kZiyypP"
                                                        }
                                                    ],
                                                    "tests": "test(\"res.getHeader(name)\", function() {\n  const server = res.getHeader('x-powered-by');\n  expect(server).to.eql('Express');\n});\n",
                                                    "docs": ""
                                                },
                                                "filename": "getHeader.bru",
                                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/api/res/getHeader.bru",
                                                "draft": null,
                                                "partial": false,
                                                "loading": false,
                                                "size": 0.000396728515625,
                                                "depth": 4
                                            },
                                            {
                                                "uid": "A7R2BKIc4Ddcz6YVDljj3",
                                                "name": "getHeaders",
                                                "type": "http-request",
                                                "seq": 3,
                                                "request": {
                                                    "method": "POST",
                                                    "url": "{{host}}/api/echo/json",
                                                    "params": [],
                                                    "headers": [],
                                                    "auth": {
                                                        "basic": {
                                                            "username": "asd",
                                                            "password": "j"
                                                        },
                                                        "bearer": {
                                                            "token": ""
                                                        },
                                                        "mode": "none"
                                                    },
                                                    "body": {
                                                        "json": "{\n  \"hello\": \"bruno\"\n}",
                                                        "mode": "json"
                                                    },
                                                    "script": {},
                                                    "vars": {},
                                                    "assertions": [
                                                        {
                                                            "name": "res.status",
                                                            "value": "eq 200",
                                                            "enabled": true,
                                                            "uid": "PrkqD8a5hmnEJfMuWVs3i"
                                                        }
                                                    ],
                                                    "tests": "test(\"res.getHeaders(name)\", function() {\n  const h = res.getHeaders();\n  expect(h['x-powered-by']).to.eql('Express');\n  expect(h['content-length']).to.eql('17');\n});\n",
                                                    "docs": ""
                                                },
                                                "filename": "getHeaders.bru",
                                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/api/res/getHeaders.bru",
                                                "draft": null,
                                                "partial": false,
                                                "loading": false,
                                                "size": 0.00043582916259765625,
                                                "depth": 4
                                            },
                                            {
                                                "uid": "UNDxnNgvU2aCM2viNUsDi",
                                                "name": "getResponseTime",
                                                "type": "http-request",
                                                "seq": 5,
                                                "request": {
                                                    "method": "POST",
                                                    "url": "{{host}}/api/echo/json",
                                                    "params": [],
                                                    "headers": [],
                                                    "auth": {
                                                        "basic": {
                                                            "username": "asd",
                                                            "password": "j"
                                                        },
                                                        "bearer": {
                                                            "token": ""
                                                        },
                                                        "mode": "none"
                                                    },
                                                    "body": {
                                                        "json": "{\n  \"hello\": \"bruno\"\n}",
                                                        "mode": "json"
                                                    },
                                                    "script": {},
                                                    "vars": {},
                                                    "assertions": [
                                                        {
                                                            "name": "res.status",
                                                            "value": "eq 200",
                                                            "enabled": true,
                                                            "uid": "bx56yCxcrtigLu7qFDd3w"
                                                        }
                                                    ],
                                                    "tests": "test(\"res.getResponseTime()\", function() {\n  const responseTime = res.getResponseTime();\n  expect(typeof responseTime).to.eql(\"number\");\n  expect(responseTime > 0).to.be.true;\n});\n",
                                                    "docs": ""
                                                },
                                                "filename": "getResponseTime.bru",
                                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/api/res/getResponseTime.bru",
                                                "draft": null,
                                                "partial": false,
                                                "loading": false,
                                                "size": 0.00045299530029296875,
                                                "depth": 4
                                            },
                                            {
                                                "uid": "QooLvj46I58wlArnT4Iwx",
                                                "name": "getStatus",
                                                "type": "http-request",
                                                "seq": 1,
                                                "request": {
                                                    "method": "GET",
                                                    "url": "{{host}}/ping",
                                                    "params": [],
                                                    "headers": [],
                                                    "auth": {
                                                        "mode": "none"
                                                    },
                                                    "body": {
                                                        "mode": "none"
                                                    },
                                                    "script": {},
                                                    "vars": {},
                                                    "assertions": [
                                                        {
                                                            "name": "res.status",
                                                            "value": "eq 200",
                                                            "enabled": true,
                                                            "uid": "HGoD8uQ6qHeQRO6mVGYWa"
                                                        },
                                                        {
                                                            "name": "res.body",
                                                            "value": "eq pong",
                                                            "enabled": true,
                                                            "uid": "Wjy8npbyahgmmY7jE4etC"
                                                        }
                                                    ],
                                                    "tests": "test(\"res.getStatus()\", function() {\n  const status = res.getStatus()\n  expect(status).to.equal(200);\n});",
                                                    "docs": ""
                                                },
                                                "filename": "getStatus.bru",
                                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/api/res/getStatus.bru",
                                                "draft": null,
                                                "partial": false,
                                                "loading": false,
                                                "size": 0.00026988983154296875,
                                                "depth": 4
                                            },
                                            {
                                                "uid": "3fJx1HR52X4KqivkutZkR",
                                                "name": "getStatusText",
                                                "type": "http-request",
                                                "seq": 6,
                                                "request": {
                                                    "method": "GET",
                                                    "url": "{{host}}/ping",
                                                    "params": [],
                                                    "headers": [],
                                                    "auth": {
                                                        "mode": "none"
                                                    },
                                                    "body": {
                                                        "mode": "none"
                                                    },
                                                    "script": {},
                                                    "vars": {},
                                                    "assertions": [
                                                        {
                                                            "name": "res.statusText",
                                                            "value": "eq OK",
                                                            "enabled": true,
                                                            "uid": "gtRXyUSR1IHyqbY7FzHoA"
                                                        },
                                                        {
                                                            "name": "res.body",
                                                            "value": "eq pong",
                                                            "enabled": true,
                                                            "uid": "Lj9hUHXpBQoc0NCyoVX4E"
                                                        }
                                                    ],
                                                    "tests": "test(\"res.getStatusText()\", function() {\n  const statusText = res.getStatusText()\n  expect(statusText).to.equal('OK');\n});",
                                                    "docs": ""
                                                },
                                                "filename": "getStatusText.bru",
                                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/api/res/getStatusText.bru",
                                                "draft": null,
                                                "partial": false,
                                                "loading": false,
                                                "size": 0.00029277801513671875,
                                                "depth": 4
                                            },
                                            {
                                                "uid": "vGlBJiR0iB6slHqtP5S9a",
                                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/api/res/setBody",
                                                "name": "setBody",
                                                "seq": 1,
                                                "filename": "setBody",
                                                "collapsed": true,
                                                "type": "folder",
                                                "items": [
                                                    {
                                                        "uid": "UwQcneWgZ34TsyRvcrulM",
                                                        "name": "array",
                                                        "type": "http-request",
                                                        "seq": 6,
                                                        "request": {
                                                            "method": "POST",
                                                            "url": "{{host}}/api/echo/json",
                                                            "params": [],
                                                            "headers": [],
                                                            "auth": {
                                                                "mode": "none"
                                                            },
                                                            "body": {
                                                                "json": "{\n  \"hello\": \"bruno\"\n}",
                                                                "mode": "json"
                                                            },
                                                            "script": {
                                                                "res": "const obj = {\n  hello : \"hello from post-res\"\n}\n// Safe mode, Dev mode behaves differently, null is getting converted to undefined, although both have null in the response, tests with undefined fails in safe mode, this needs to be investigated,, undefined is not a valid JSON\nres.setBody([\"hello\",1, null, undefined, true, obj])"
                                                            },
                                                            "vars": {},
                                                            "assertions": [
                                                                {
                                                                    "name": "res.status",
                                                                    "value": "eq 200",
                                                                    "enabled": true,
                                                                    "uid": "wyvmV7dGTaCIDaQ2tpDYv"
                                                                }
                                                            ],
                                                            "tests": "test(\"res.setBody(array)\", function() {\n  const body = res.getBody();\n  expect(body.length).to.eql(6);\n  expect(body[0]).to.eql(\"hello\")\n  expect(body[1]).to.eql(1)\n  expect(body[2]).to.be.null\n// Safe mode, Dev mode behaves differently, null is getting converted to undefined, although both have null in the response, tests with undefined fails in safe mode, this needs to be investigated,, undefined is not a valid JSON\n  expect(body[3]).to.be.undefined;\n  expect(body[4]).to.eql(true)\n  expect(body[5].hello).to.eql(\"hello from post-res\")\n  \n});\n",
                                                            "docs": ""
                                                        },
                                                        "filename": "array.bru",
                                                        "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/api/res/setBody/array.bru",
                                                        "draft": null,
                                                        "partial": false,
                                                        "loading": false,
                                                        "size": 0.001087188720703125,
                                                        "depth": 5
                                                    },
                                                    {
                                                        "uid": "rfemvmRo7GyAxD6PLjFj5",
                                                        "name": "boolean",
                                                        "type": "http-request",
                                                        "seq": 7,
                                                        "request": {
                                                            "method": "POST",
                                                            "url": "{{host}}/api/echo/json",
                                                            "params": [],
                                                            "headers": [],
                                                            "auth": {
                                                                "mode": "none"
                                                            },
                                                            "body": {
                                                                "json": "{\n  \"hello\": \"bruno\"\n}",
                                                                "mode": "json"
                                                            },
                                                            "script": {
                                                                "res": "res.setBody(true)"
                                                            },
                                                            "vars": {},
                                                            "assertions": [
                                                                {
                                                                    "name": "res.status",
                                                                    "value": "eq 200",
                                                                    "enabled": true,
                                                                    "uid": "NUVzGtyoFNyKOi3rZLTNR"
                                                                }
                                                            ],
                                                            "tests": "test(\"res.setBody(boolean)\", function() {\n  const body = res.getBody();\n  expect(body).to.be.true;\n});\n",
                                                            "docs": ""
                                                        },
                                                        "filename": "boolean.bru",
                                                        "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/api/res/setBody/boolean.bru",
                                                        "draft": null,
                                                        "partial": false,
                                                        "loading": false,
                                                        "size": 0.00034427642822265625,
                                                        "depth": 5
                                                    },
                                                    {
                                                        "uid": "1SwtPPhbqzedeb01ldhU4",
                                                        "name": "null",
                                                        "type": "http-request",
                                                        "seq": 6,
                                                        "request": {
                                                            "method": "POST",
                                                            "url": "{{host}}/api/echo/json",
                                                            "params": [],
                                                            "headers": [],
                                                            "auth": {
                                                                "mode": "none"
                                                            },
                                                            "body": {
                                                                "json": "{\n  \"hello\": \"bruno\"\n}",
                                                                "mode": "json"
                                                            },
                                                            "script": {
                                                                "res": "res.setBody(null)"
                                                            },
                                                            "vars": {},
                                                            "assertions": [
                                                                {
                                                                    "name": "res.status",
                                                                    "value": "eq 200",
                                                                    "enabled": true,
                                                                    "uid": "anVt52V8l2xrLZCNYMoAR"
                                                                }
                                                            ],
                                                            "tests": "test(\"res.setBody(null)\", function() {\n  const body = res.getBody();\n  expect(body).to.be.null;\n});\n",
                                                            "docs": ""
                                                        },
                                                        "filename": "null.bru",
                                                        "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/api/res/setBody/null.bru",
                                                        "draft": null,
                                                        "partial": false,
                                                        "loading": false,
                                                        "size": 0.00033855438232421875,
                                                        "depth": 5
                                                    },
                                                    {
                                                        "uid": "mAg4TZnzxqw93oE6zvV6D",
                                                        "name": "number",
                                                        "type": "http-request",
                                                        "seq": 3,
                                                        "request": {
                                                            "method": "POST",
                                                            "url": "{{host}}/api/echo/json",
                                                            "params": [],
                                                            "headers": [],
                                                            "auth": {
                                                                "mode": "none"
                                                            },
                                                            "body": {
                                                                "json": "{\n  \"hello\": \"bruno\"\n}",
                                                                "mode": "json"
                                                            },
                                                            "script": {
                                                                "res": "res.setBody(2)"
                                                            },
                                                            "vars": {},
                                                            "assertions": [
                                                                {
                                                                    "name": "res.status",
                                                                    "value": "eq 200",
                                                                    "enabled": true,
                                                                    "uid": "lZGRaFwbS3QC6usa0pPbj"
                                                                }
                                                            ],
                                                            "tests": "test(\"res.setBody(number)\", function() {\n  const body = res.getBody();\n  expect(body).to.eql(2);\n});\n",
                                                            "docs": ""
                                                        },
                                                        "filename": "number.bru",
                                                        "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/api/res/setBody/number.bru",
                                                        "draft": null,
                                                        "partial": false,
                                                        "loading": false,
                                                        "size": 0.00033855438232421875,
                                                        "depth": 5
                                                    },
                                                    {
                                                        "uid": "XQOEaOl4PrrecK3aTTw2R",
                                                        "name": "object",
                                                        "type": "http-request",
                                                        "seq": 1,
                                                        "request": {
                                                            "method": "POST",
                                                            "url": "{{host}}/api/echo/json",
                                                            "params": [],
                                                            "headers": [],
                                                            "auth": {
                                                                "mode": "none"
                                                            },
                                                            "body": {
                                                                "json": "{\n  \"hello\": \"bruno\"\n}",
                                                                "mode": "json"
                                                            },
                                                            "script": {
                                                                "res": "res.setBody({\n  hello : \"hello from post-res\"\n})"
                                                            },
                                                            "vars": {},
                                                            "assertions": [
                                                                {
                                                                    "name": "res.status",
                                                                    "value": "eq 200",
                                                                    "enabled": true,
                                                                    "uid": "29BkJSOmkErTO6CWHCkh9"
                                                                }
                                                            ],
                                                            "tests": "test(\"res.setBody(object)\", function() {\n  const body = res.getBody();\n  expect(body.hello).to.eql(\"hello from post-res\");\n});\n",
                                                            "docs": ""
                                                        },
                                                        "filename": "object.bru",
                                                        "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/api/res/setBody/object.bru",
                                                        "draft": null,
                                                        "partial": false,
                                                        "loading": false,
                                                        "size": 0.00039958953857421875,
                                                        "depth": 5
                                                    },
                                                    {
                                                        "uid": "des8iahdczJPJ66Vo116h",
                                                        "name": "string",
                                                        "type": "http-request",
                                                        "seq": 4,
                                                        "request": {
                                                            "method": "POST",
                                                            "url": "{{host}}/api/echo/json",
                                                            "params": [],
                                                            "headers": [],
                                                            "auth": {
                                                                "mode": "none"
                                                            },
                                                            "body": {
                                                                "json": "{\n  \"hello\": \"bruno\"\n}",
                                                                "mode": "json"
                                                            },
                                                            "script": {
                                                                "res": "res.setBody(\"hello from post-res\")"
                                                            },
                                                            "vars": {},
                                                            "assertions": [
                                                                {
                                                                    "name": "res.status",
                                                                    "value": "eq 200",
                                                                    "enabled": true,
                                                                    "uid": "dwZayVRb3MO52FBLkOGJA"
                                                                }
                                                            ],
                                                            "tests": "test(\"res.setBody(string)\", function() {\n  const body = res.getBody();\n  expect(body).to.eql(\"hello from post-res\");\n});\n",
                                                            "docs": ""
                                                        },
                                                        "filename": "string.bru",
                                                        "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/api/res/setBody/string.bru",
                                                        "draft": null,
                                                        "partial": false,
                                                        "loading": false,
                                                        "size": 0.00037670135498046875,
                                                        "depth": 5
                                                    },
                                                    {
                                                        "uid": "jsubxVrGBCY0O6XdpOHma",
                                                        "name": "undefined",
                                                        "type": "http-request",
                                                        "seq": 7,
                                                        "request": {
                                                            "method": "POST",
                                                            "url": "{{host}}/api/echo/json",
                                                            "params": [],
                                                            "headers": [],
                                                            "auth": {
                                                                "mode": "none"
                                                            },
                                                            "body": {
                                                                "json": "{\n  \"hello\": \"bruno\"\n}",
                                                                "mode": "json"
                                                            },
                                                            "script": {
                                                                "res": "// if undefined  is not passed to res.setBody() the test fails in only safe-mode, needs to check, undefined is not a valid JSON\n// Safe mode, Dev mode behaves differently, null is getting converted to undefined, although both have null in the response, tests with undefined fails in safe mode, this needs to be investigated, undefined is not a valid JSON\nres.setBody(undefined)"
                                                            },
                                                            "vars": {},
                                                            "assertions": [
                                                                {
                                                                    "name": "res.status",
                                                                    "value": "eq 200",
                                                                    "enabled": true,
                                                                    "uid": "omcgJIQ5XHOq8u3qYQbUo"
                                                                }
                                                            ],
                                                            "tests": "test(\"res.setBody(undefined)\", function() {\n  const body = res.getBody();\n// Safe mode, Dev mode behaves differently, null is getting converted to undefined, although both have null in the response, tests with undefined fails in safe mode, this needs to be investigated, undefined is not a valid JSON\n  expect(body).to.be.undefined;\n});\n",
                                                            "docs": ""
                                                        },
                                                        "filename": "undefined.bru",
                                                        "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/api/res/setBody/undefined.bru",
                                                        "draft": null,
                                                        "partial": false,
                                                        "loading": false,
                                                        "size": 0.0009183883666992188,
                                                        "depth": 5
                                                    }
                                                ],
                                                "depth": 4,
                                                "root": {
                                                    "request": {
                                                        "headers": [],
                                                        "auth": {},
                                                        "script": {},
                                                        "vars": {},
                                                        "tests": ""
                                                    },
                                                    "docs": "",
                                                    "meta": {
                                                        "name": "setBody",
                                                        "seq": 1
                                                    }
                                                }
                                            }
                                        ],
                                        "depth": 3
                                    }
                                ],
                                "depth": 2
                            },
                            {
                                "uid": "cemxi474OggYozE3UmgHx",
                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/inbuilt modules",
                                "name": "inbuilt modules",
                                "seq": 1,
                                "filename": "inbuilt modules",
                                "collapsed": true,
                                "type": "folder",
                                "items": [
                                    {
                                        "uid": "gsESW45JBF2bNkIFlZV7f",
                                        "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/inbuilt modules/axios",
                                        "name": "axios",
                                        "seq": 1,
                                        "filename": "axios",
                                        "collapsed": true,
                                        "type": "folder",
                                        "items": [
                                            {
                                                "uid": "iQwssRPEJoBy3AH8QsBU7",
                                                "name": "axios-pre-req-script",
                                                "type": "http-request",
                                                "seq": 1,
                                                "request": {
                                                    "method": "GET",
                                                    "url": "{{host}}/ping",
                                                    "params": [],
                                                    "headers": [],
                                                    "auth": {
                                                        "mode": "none"
                                                    },
                                                    "body": {
                                                        "mode": "none"
                                                    },
                                                    "script": {
                                                        "req": "const axios = require(\"axios\");\n\nconst url = \"https://testbench-sanity.usebruno.com/api/echo/json\";\nconst response = await axios.post(url, {\n  \"hello\": \"bruno\"\n});\n\nreq.setBody(response.data);\nreq.setMethod(\"POST\");\nreq.setUrl(url);"
                                                    },
                                                    "vars": {},
                                                    "assertions": [],
                                                    "tests": "test(\"req.getBody()\", function() {\n  const data = res.getBody();\n  expect(data).to.eql({\n    \"hello\": \"bruno\"\n  });\n});\n",
                                                    "docs": ""
                                                },
                                                "filename": "axios-pre-req-script.bru",
                                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/inbuilt modules/axios/axios-pre-req-script.bru",
                                                "draft": null,
                                                "partial": false,
                                                "loading": false,
                                                "size": 0.0005140304565429688,
                                                "depth": 4
                                            }
                                        ],
                                        "depth": 3
                                    },
                                    {
                                        "uid": "pZQbPCBYty1MzvGk89KS4",
                                        "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/inbuilt modules/cheerio",
                                        "name": "cheerio",
                                        "seq": 1,
                                        "filename": "cheerio",
                                        "collapsed": true,
                                        "type": "folder",
                                        "items": [
                                            {
                                                "uid": "kGxUhKoxDv9Qgpm8Nv8tm",
                                                "name": "cheerio",
                                                "type": "http-request",
                                                "seq": 1,
                                                "request": {
                                                    "method": "POST",
                                                    "url": "https://echo.usebruno.com",
                                                    "params": [],
                                                    "headers": [],
                                                    "auth": {
                                                        "mode": "none"
                                                    },
                                                    "body": {
                                                        "text": "<h2 class=\"title\">Hello Bruno!</h2>",
                                                        "mode": "text"
                                                    },
                                                    "script": {
                                                        "req": "const cheerio = require('cheerio');\n\nconst $ = cheerio.load('<h2 class=\"title\">Hello world</h2>');\n\n$('h2.title').text('Hello pre-request!');\n$('h2').addClass('welcome');\n\nbru.setVar(\"cheerio-test-pre-request\", $.html());",
                                                        "res": "const cheerio = require('cheerio');\n\nconst $ = cheerio.load('<h2 class=\"title\">Hello world</h2>');\n\n$('h2.title').text('Hello post-response!');\n$('h2').addClass('welcome');\n\nbru.setVar(\"cheerio-test-post-response\", $.html());"
                                                    },
                                                    "vars": {},
                                                    "assertions": [],
                                                    "tests": "const cheerio = require('cheerio');\n\ntest(\"cheerio html - from pre request script\", function() {\n  const expected = '<html><head></head><body><h2 class=\"title welcome\">Hello pre-request!</h2></body></html>';\n  const html = bru.getVar('cheerio-test-pre-request');\n  expect(html).to.eql(expected);\n});\n\ntest(\"cheerio html - from post response script\", function() {\n  const expected = '<html><head></head><body><h2 class=\"title welcome\">Hello post-response!</h2></body></html>';\n  const html = bru.getVar('cheerio-test-post-response');\n  expect(html).to.eql(expected);\n});\n\ntest(\"cheerio html - from tests\", function() {\n  const expected = '<html><head></head><body><h2 class=\"title\">Hello Bruno!</h2></body></html>';\n  const $ = cheerio.load(res.body);\n  expect($.html()).to.eql(expected);\n});",
                                                    "docs": ""
                                                },
                                                "filename": "cheerio.bru",
                                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/inbuilt modules/cheerio/cheerio.bru",
                                                "draft": null,
                                                "partial": false,
                                                "loading": false,
                                                "size": 0.001461029052734375,
                                                "depth": 4
                                            }
                                        ],
                                        "depth": 3
                                    },
                                    {
                                        "uid": "nVtVKFUhkUie9tpwDfXae",
                                        "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/inbuilt modules/crypto-js",
                                        "name": "crypto-js",
                                        "seq": 1,
                                        "filename": "crypto-js",
                                        "collapsed": true,
                                        "type": "folder",
                                        "items": [
                                            {
                                                "uid": "lyX0KxlBUe9AUaRwQRYVS",
                                                "name": "crypto-js-pre-request-script",
                                                "type": "http-request",
                                                "seq": 1,
                                                "request": {
                                                    "method": "GET",
                                                    "url": "{{host}}/ping",
                                                    "params": [],
                                                    "headers": [],
                                                    "auth": {
                                                        "mode": "none"
                                                    },
                                                    "body": {
                                                        "mode": "none"
                                                    },
                                                    "script": {
                                                        "req": "var CryptoJS = require(\"crypto-js\");\n\n// Encrypt\nvar ciphertext = CryptoJS.AES.encrypt('my message', 'secret key 123').toString();\n\n// Decrypt\nvar bytes  = CryptoJS.AES.decrypt(ciphertext, 'secret key 123');\nvar originalText = bytes.toString(CryptoJS.enc.Utf8);\n\nbru.setVar('crypto-test-message', originalText);"
                                                    },
                                                    "vars": {},
                                                    "assertions": [],
                                                    "tests": "test(\"crypto message\", function() {\n  const data = bru.getVar('crypto-test-message');\n  bru.setVar('crypto-test-message', null);\n  expect(data).to.eql('my message');\n});\n",
                                                    "docs": ""
                                                },
                                                "filename": "crypto-js-pre-request-script.bru",
                                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/inbuilt modules/crypto-js/crypto-js-pre-request-script.bru",
                                                "draft": null,
                                                "partial": false,
                                                "loading": false,
                                                "size": 0.0006427764892578125,
                                                "depth": 4
                                            }
                                        ],
                                        "depth": 3
                                    },
                                    {
                                        "uid": "7N04lCx5TR8aQWKBjdGDF",
                                        "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/inbuilt modules/nanoid",
                                        "name": "nanoid",
                                        "seq": 1,
                                        "filename": "nanoid",
                                        "collapsed": true,
                                        "type": "folder",
                                        "items": [
                                            {
                                                "uid": "1eo51xGc4FnmyVpkZMjaH",
                                                "name": "nanoid",
                                                "type": "http-request",
                                                "seq": 1,
                                                "request": {
                                                    "method": "GET",
                                                    "url": "{{host}}/ping",
                                                    "params": [],
                                                    "headers": [],
                                                    "auth": {
                                                        "mode": "none"
                                                    },
                                                    "body": {
                                                        "mode": "none"
                                                    },
                                                    "script": {
                                                        "req": "const { nanoid } = require(\"nanoid\");\n \nbru.setVar(\"nanoid-test-id\", nanoid());"
                                                    },
                                                    "vars": {},
                                                    "assertions": [],
                                                    "tests": "test(\"nanoid var\", function() {\n  const id = bru.getVar('nanoid-test-id');\n  let isValidNanoid = /^[a-zA-Z0-9_-]{21}$/.test(id)\n  bru.setVar('nanoid-test-id', null);\n  expect(isValidNanoid).to.eql(true);\n});",
                                                    "docs": ""
                                                },
                                                "filename": "nanoid.bru",
                                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/inbuilt modules/nanoid/nanoid.bru",
                                                "draft": null,
                                                "partial": false,
                                                "loading": false,
                                                "size": 0.00042247772216796875,
                                                "depth": 4
                                            }
                                        ],
                                        "depth": 3
                                    },
                                    {
                                        "uid": "nCl2akBavo6guCi8UGJBJ",
                                        "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/inbuilt modules/tv4",
                                        "name": "tv4",
                                        "seq": 1,
                                        "filename": "tv4",
                                        "collapsed": true,
                                        "type": "folder",
                                        "items": [
                                            {
                                                "uid": "LovTCTcMXCuLBsZhm9Wzi",
                                                "name": "tv4",
                                                "type": "http-request",
                                                "seq": 1,
                                                "request": {
                                                    "method": "POST",
                                                    "url": "{{host}}/api/echo/json",
                                                    "params": [],
                                                    "headers": [],
                                                    "auth": {
                                                        "mode": "inherit"
                                                    },
                                                    "body": {
                                                        "json": "{\n  \"name\": \"John\",\n  \"age\": 30\n}",
                                                        "mode": "json"
                                                    },
                                                    "script": {},
                                                    "vars": {},
                                                    "assertions": [],
                                                    "tests": "const tv4 = require(\"tv4\")\n\nconst schema = {\n  type: 'object',\n  properties: {\n    name: { type: 'string' },\n    age: { type: 'number' }\n  }\n};\n\nlet responseData = res.getBody();\n\nlet isValid = tv4.validate(responseData, schema);\n\ntest(\"Response body matches expected schema\", function () {\n    expect(isValid, tv4.error ? tv4.error.message : \"\").to.be.true;\n});\n",
                                                    "docs": ""
                                                },
                                                "filename": "tv4.bru",
                                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/inbuilt modules/tv4/tv4.bru",
                                                "draft": null,
                                                "partial": false,
                                                "loading": false,
                                                "size": 0.000553131103515625,
                                                "depth": 4
                                            }
                                        ],
                                        "depth": 3,
                                        "root": {
                                            "request": {
                                                "headers": [],
                                                "auth": {},
                                                "script": {},
                                                "vars": {},
                                                "tests": ""
                                            },
                                            "docs": "",
                                            "meta": {
                                                "name": "tv4",
                                                "seq": 1
                                            }
                                        }
                                    },
                                    {
                                        "uid": "IBjpd7jn5NggjwKtDjImI",
                                        "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/inbuilt modules/uuid",
                                        "name": "uuid",
                                        "seq": 1,
                                        "filename": "uuid",
                                        "collapsed": true,
                                        "type": "folder",
                                        "items": [
                                            {
                                                "uid": "V0mwQOdrT44g54HtmXIHM",
                                                "name": "uuid",
                                                "type": "http-request",
                                                "seq": 1,
                                                "request": {
                                                    "method": "GET",
                                                    "url": "{{host}}/ping",
                                                    "params": [],
                                                    "headers": [],
                                                    "auth": {
                                                        "mode": "none"
                                                    },
                                                    "body": {
                                                        "mode": "none"
                                                    },
                                                    "script": {
                                                        "req": "const { v4 } = require(\"uuid\");\n \nbru.setVar(\"uuid-test-id\", v4());"
                                                    },
                                                    "vars": {},
                                                    "assertions": [],
                                                    "tests": "test(\"uuid var\", function() {\n  const id = bru.getVar('uuid-test-id');\n  let isValidUuid = /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(id);\n  bru.setVar('uuid-test-id', null);\n  expect(isValidUuid).to.eql(true);\n});",
                                                    "docs": ""
                                                },
                                                "filename": "uuid.bru",
                                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/inbuilt modules/uuid/uuid.bru",
                                                "draft": null,
                                                "partial": false,
                                                "loading": false,
                                                "size": 0.00044918060302734375,
                                                "depth": 4
                                            }
                                        ],
                                        "depth": 3
                                    },
                                    {
                                        "uid": "Yg2UnjwHYeGtIis0ndmH7",
                                        "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/inbuilt modules/xml2js",
                                        "name": "xml2js",
                                        "seq": 1,
                                        "filename": "xml2js",
                                        "collapsed": true,
                                        "type": "folder",
                                        "items": [
                                            {
                                                "uid": "8ygzCvXEHZEzMyvgaNYg7",
                                                "name": "xml2js",
                                                "type": "http-request",
                                                "seq": 1,
                                                "request": {
                                                    "method": "GET",
                                                    "url": "{{host}}/ping",
                                                    "params": [],
                                                    "headers": [],
                                                    "auth": {
                                                        "mode": "none"
                                                    },
                                                    "body": {
                                                        "mode": "none"
                                                    },
                                                    "script": {
                                                        "req": "var parseString = require('xml2js').parseString;\nvar xml = \"<root>Hello xml2js - pre request!</root>\"\nparseString(xml, function (err, result) {\n   bru.setVar(\"xml2js-test-result-pre-request\", result); \n});",
                                                        "res": "var parseString = require('xml2js').parseString;\nvar xml = \"<root>Hello xml2js - post response!</root>\"\nparseString(xml, function (err, result) {\n   bru.setVar(\"xml2js-test-result-post-response\", result);\n});"
                                                    },
                                                    "vars": {},
                                                    "assertions": [],
                                                    "tests": "var parseString = require('xml2js').parseString;\n\ntest(\"xml2js parseString in scripts - pre request\", function() {\n  const expected = {\n    root: 'Hello xml2js - pre request!'\n  };\n  const result = bru.getVar('xml2js-test-result-pre-request');\n  expect(result).to.eql(expected);\n});\n\ntest(\"xml2js parseString in scripts - post response\", function() {\n  const expected = {\n    root: 'Hello xml2js - post response!'\n  };\n  const result = bru.getVar('xml2js-test-result-post-response');\n  expect(result).to.eql(expected);\n});\n\ntest(\"xml2js parseString in tests\", async function() {\n  var xml = \"<root>Hello inside test!</root>\"\n  const expected = {\n    root: 'Hello inside test!'\n  };\n  parseString(xml, function (err, result) {\n    expect(result).to.eql(expected);\n  });\n});",
                                                    "docs": ""
                                                },
                                                "filename": "xml2js.bru",
                                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/inbuilt modules/xml2js/xml2js.bru",
                                                "draft": null,
                                                "partial": false,
                                                "loading": false,
                                                "size": 0.0013570785522460938,
                                                "depth": 4
                                            }
                                        ],
                                        "depth": 3
                                    }
                                ],
                                "depth": 2
                            },
                            {
                                "uid": "bGonsOq0gHPzCIFbijGwS",
                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/js",
                                "name": "js",
                                "seq": 1,
                                "filename": "js",
                                "collapsed": true,
                                "type": "folder",
                                "items": [
                                    {
                                        "uid": "zYOgS82NpvmMHKAXDmeMf",
                                        "name": "data types - request vars",
                                        "type": "http-request",
                                        "seq": 3,
                                        "request": {
                                            "method": "POST",
                                            "url": "{{host}}/api/echo/json",
                                            "params": [],
                                            "headers": [],
                                            "auth": {
                                                "mode": "none"
                                            },
                                            "body": {
                                                "json": "{\n  \"boolean\": false,\n  \"number_1\": 1,\n  \"number_2\": 0,\n  \"number_3\": -1,\n  \"string\": \"bruno\",\n  \"array\": [1, 2, 3, 4, 5],\n  \"object\": {\n    \"hello\": \"bruno\"\n  },\n  \"null\": null\n}",
                                                "mode": "json"
                                            },
                                            "script": {},
                                            "vars": {},
                                            "assertions": [
                                                {
                                                    "name": "req.body.boolean",
                                                    "value": "isBoolean false",
                                                    "enabled": true,
                                                    "uid": "XEpoZapV4Mo20rzevqe45"
                                                },
                                                {
                                                    "name": "req.body.number_1",
                                                    "value": "isNumber 1",
                                                    "enabled": true,
                                                    "uid": "KYN8JAVeibSWFHxy5wWxo"
                                                },
                                                {
                                                    "name": "req.body.undefined",
                                                    "value": "isUndefined undefined",
                                                    "enabled": true,
                                                    "uid": "oNXTFLQenYcLWP2nHC7LP"
                                                },
                                                {
                                                    "name": "req.body.string",
                                                    "value": "isString bruno",
                                                    "enabled": true,
                                                    "uid": "qUdlbDvpnY1BQqiJPeGOU"
                                                },
                                                {
                                                    "name": "req.body.null",
                                                    "value": "isNull null",
                                                    "enabled": true,
                                                    "uid": "l2pKcYR56JH2wPJZVEbDS"
                                                },
                                                {
                                                    "name": "req.body.array",
                                                    "value": "isArray",
                                                    "enabled": true,
                                                    "uid": "fYYbtgfDHNdIxnNrPigFo"
                                                },
                                                {
                                                    "name": "req.body.boolean",
                                                    "value": "eq false",
                                                    "enabled": true,
                                                    "uid": "gdG366mdKAYe4oBFqhHVx"
                                                },
                                                {
                                                    "name": "req.body.number_1",
                                                    "value": "eq 1",
                                                    "enabled": true,
                                                    "uid": "TeQaBykimH37uZDoAO0sN"
                                                },
                                                {
                                                    "name": "req.body.undefined",
                                                    "value": "eq undefined",
                                                    "enabled": true,
                                                    "uid": "UHJAtsTLGbLOHX2jENx3Y"
                                                },
                                                {
                                                    "name": "req.body.string",
                                                    "value": "eq bruno",
                                                    "enabled": true,
                                                    "uid": "zPNYKy9jHjDCsxmVjykBs"
                                                },
                                                {
                                                    "name": "req.body.null",
                                                    "value": "eq null",
                                                    "enabled": true,
                                                    "uid": "a7xhiES8YSb9KpAik6fu2"
                                                },
                                                {
                                                    "name": "req.body.number_2",
                                                    "value": "eq 0",
                                                    "enabled": true,
                                                    "uid": "w8pNa5R88EQOOOAY4yKpb"
                                                },
                                                {
                                                    "name": "req.body.number_3",
                                                    "value": "eq -1",
                                                    "enabled": true,
                                                    "uid": "t3a1y8dagJMdVSUc1VUkj"
                                                },
                                                {
                                                    "name": "req.body.number_2",
                                                    "value": "isNumber",
                                                    "enabled": true,
                                                    "uid": "NScANx3ksGuQdzEZ9QozG"
                                                },
                                                {
                                                    "name": "req.body.number_3",
                                                    "value": "isNumber",
                                                    "enabled": true,
                                                    "uid": "j19rEKL7O7b0rjXB8OOAf"
                                                }
                                            ],
                                            "tests": "",
                                            "docs": ""
                                        },
                                        "filename": "data types - request vars.bru",
                                        "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/js/data types - request vars.bru",
                                        "draft": null,
                                        "partial": false,
                                        "loading": false,
                                        "size": 0.0007810592651367188,
                                        "depth": 3
                                    },
                                    {
                                        "uid": "hDfwdFmeJSW9bsHe8zAln",
                                        "name": "data types",
                                        "type": "http-request",
                                        "seq": 2,
                                        "request": {
                                            "method": "POST",
                                            "url": "{{host}}/api/echo/json",
                                            "params": [],
                                            "headers": [],
                                            "auth": {
                                                "mode": "none"
                                            },
                                            "body": {
                                                "json": "{\n  \"boolean\": false,\n  \"number\": 1,\n  \"string\": \"bruno\",\n  \"array\": [1, 2, 3, 4, 5],\n  \"object\": {\n    \"hello\": \"bruno\"\n  },\n  \"null\": null\n}",
                                                "mode": "json"
                                            },
                                            "script": {
                                                "req": "const reqBody = req.getBody();\n\nbru.setVar(\"dataTypeVarTest\", {\n  ...reqBody,\n  \"undefined\": undefined\n});"
                                            },
                                            "vars": {},
                                            "assertions": [],
                                            "tests": "test(\"data types check via bru var\", function() {\n  let v = bru.getVar(\"dataTypeVarTest\");\n  v = {\n    ...v,\n    \"undefined\": undefined\n  };\n  expect(v).to.eql({\n    \"boolean\": false,\n    \"number\": 1,\n    \"string\": \"bruno\",\n    \"array\": [1, 2, 3, 4, 5],\n    \"object\": {\n      \"hello\": \"bruno\"\n    },\n    \"null\": null,\n    \"undefined\": undefined\n  })\n});",
                                            "docs": ""
                                        },
                                        "filename": "data types.bru",
                                        "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/js/data types.bru",
                                        "draft": null,
                                        "partial": false,
                                        "loading": false,
                                        "size": 0.0007991790771484375,
                                        "depth": 3
                                    },
                                    {
                                        "uid": "4FLSuOiCjxo62mvOUxRSW",
                                        "name": "folder-collection script-tests pre",
                                        "type": "http-request",
                                        "seq": 4,
                                        "request": {
                                            "method": "POST",
                                            "url": "{{echo-host}}",
                                            "params": [],
                                            "headers": [],
                                            "auth": {
                                                "mode": "none"
                                            },
                                            "body": {
                                                "mode": "none"
                                            },
                                            "script": {
                                                "req": "bru.setVar('should-test-collection-scripts', true);\nbru.setVar('should-test-folder-scripts', true);"
                                            },
                                            "vars": {},
                                            "assertions": [],
                                            "tests": "",
                                            "docs": ""
                                        },
                                        "filename": "folder-collection script-tests pre.bru",
                                        "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/js/folder-collection script-tests pre.bru",
                                        "draft": null,
                                        "partial": false,
                                        "loading": false,
                                        "size": 0.00024700164794921875,
                                        "depth": 3
                                    },
                                    {
                                        "uid": "328MCaEaKRw9KH4CIgnBG",
                                        "name": "folder-collection script-tests",
                                        "type": "http-request",
                                        "seq": 5,
                                        "request": {
                                            "method": "POST",
                                            "url": "{{echo-host}}",
                                            "params": [],
                                            "headers": [],
                                            "auth": {
                                                "mode": "none"
                                            },
                                            "body": {
                                                "mode": "none"
                                            },
                                            "script": {
                                                "req": "// do not delete - the collection/folder scripts/tests run during this request execution"
                                            },
                                            "vars": {},
                                            "assertions": [],
                                            "tests": "const collectionHeader = req.getHeader(\"collection-header\");\nconst folderHeader = req.getHeader(\"folder-header\");\n\ntest(\"should get the header value set at collection level\", function() {\n  expect(collectionHeader).to.equal(\"collection-header-value\");\n});\n\ntest(\"should get the header value set at folder level\", function() {\n  expect(folderHeader).to.equal(\"folder-header-value\");\n});",
                                            "docs": ""
                                        },
                                        "filename": "folder-collection script-tests.bru",
                                        "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/js/folder-collection script-tests.bru",
                                        "draft": null,
                                        "partial": false,
                                        "loading": false,
                                        "size": 0.0006284713745117188,
                                        "depth": 3
                                    },
                                    {
                                        "uid": "HIPrqFvqkpKGM5kylMuVh",
                                        "name": "setTimeout",
                                        "type": "http-request",
                                        "seq": 1,
                                        "request": {
                                            "method": "GET",
                                            "url": "{{host}}/ping",
                                            "params": [],
                                            "headers": [],
                                            "auth": {
                                                "mode": "none"
                                            },
                                            "body": {
                                                "mode": "none"
                                            },
                                            "script": {
                                                "req": "bru.setVar(\"test-js-set-timeout\", \"\");\nawait new Promise((resolve, reject) => {\n  setTimeout(() => {\n    bru.setVar(\"test-js-set-timeout\", \"bruno\");\n    resolve();\n  }, 1000);\n});\n\nconst v = bru.getVar(\"test-js-set-timeout\");\nbru.setVar(\"test-js-set-timeout\", v + \"-is-awesome\");\n"
                                            },
                                            "vars": {},
                                            "assertions": [],
                                            "tests": "test(\"setTimeout()\", function() {\n  const v = bru.getVar(\"test-js-set-timeout\")\n  expect(v).to.eql(\"bruno-is-awesome\");\n});",
                                            "docs": ""
                                        },
                                        "filename": "setTimeout.bru",
                                        "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/js/setTimeout.bru",
                                        "draft": null,
                                        "partial": false,
                                        "loading": false,
                                        "size": 0.00054931640625,
                                        "depth": 3
                                    }
                                ],
                                "depth": 2,
                                "root": {
                                    "request": {
                                        "headers": [
                                            {
                                                "name": "folder-header",
                                                "value": "folder-header-value",
                                                "enabled": true,
                                                "uid": "5YyMqtNoZJCQXakba6if5"
                                            }
                                        ],
                                        "auth": {},
                                        "script": {
                                            "req": "// used by `scripting/js/folder-collection script-tests`\nconst shouldTestFolderScripts = bru.getVar('should-test-folder-scripts');\nif(shouldTestFolderScripts) {\n bru.setVar('folder-var-set-by-folder-script', 'folder-var-value-set-by-folder-script');\n}"
                                        },
                                        "vars": {},
                                        "tests": "// used by `scripting/js/folder-collection script-tests`\nconst shouldTestFolderScripts = bru.getVar('should-test-folder-scripts');\nconst folderVar = bru.getVar(\"folder-var-set-by-folder-script\");\nif (shouldTestFolderScripts && folderVar) {\n  test(\"folder level test - should get the var that was set by the folder script\", function() {\n    expect(folderVar).to.equal(\"folder-var-value-set-by-folder-script\");\n  }); \n  bru.setVar('folder-var-set-by-folder-script', null); \n  bru.setVar('should-test-folder-scripts', null);\n}"
                                    },
                                    "docs": "",
                                    "meta": {
                                        "name": "js",
                                        "seq": 1
                                    }
                                }
                            },
                            {
                                "uid": "cW0Un8XJtjxSTvf1LOvFz",
                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/local modules",
                                "name": "local modules",
                                "seq": 1,
                                "filename": "local modules",
                                "collapsed": true,
                                "type": "folder",
                                "items": [
                                    {
                                        "uid": "Afa7jb86sa5xgIlj1Aiyw",
                                        "name": "invalid and valid module imports",
                                        "type": "http-request",
                                        "seq": 3,
                                        "request": {
                                            "method": "GET",
                                            "url": "{{host}}/ping",
                                            "params": [],
                                            "headers": [],
                                            "auth": {
                                                "mode": "none"
                                            },
                                            "body": {
                                                "mode": "none"
                                            },
                                            "script": {
                                                "req": "try {\n  bru.setVar('invalid_module_error_thrown', false);\n  // should throw an error\n  const invalid = require(\"./lib/invalid\");\n}\ncatch(error) {\n  bru.setVar('invalid_module_error_thrown', true);\n}\n\n\ntry {\n  bru.setVar('valid_module_no_error', true);\n  // should not throw an error\n  const math = require(\"./lib/math\");\n}\ncatch(error) {\n  bru.setVar('valid_module_no_error', false);\n}"
                                            },
                                            "vars": {},
                                            "assertions": [
                                                {
                                                    "name": "invalid_module_error_thrown",
                                                    "value": "eq true",
                                                    "enabled": true,
                                                    "uid": "k1vBJJN4aH5w5Rm0MfjLC"
                                                },
                                                {
                                                    "name": "valid_module_no_error",
                                                    "value": "eq true",
                                                    "enabled": true,
                                                    "uid": "YfuLZ9mCb4YHJYp7nJkTg"
                                                }
                                            ],
                                            "tests": "",
                                            "docs": ""
                                        },
                                        "filename": "invalid and valid module imports.bru",
                                        "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/local modules/invalid and valid module imports.bru",
                                        "draft": null,
                                        "partial": false,
                                        "loading": false,
                                        "size": 0.0006275177001953125,
                                        "depth": 3
                                    },
                                    {
                                        "uid": "3qmH5NsJXEk8fhk4tORxs",
                                        "name": "sum (without js extn)",
                                        "type": "http-request",
                                        "seq": 2,
                                        "request": {
                                            "method": "POST",
                                            "url": "{{host}}/api/echo/json",
                                            "params": [],
                                            "headers": [],
                                            "auth": {
                                                "mode": "none"
                                            },
                                            "body": {
                                                "json": "{\n  \"a\": 1,\n  \"b\": 2\n}",
                                                "mode": "json"
                                            },
                                            "script": {
                                                "req": "const math = require(\"./lib/math\");\nconsole.log(math, 'math');\n\nconst body = req.getBody();\nbody.sum = math.sum(body.a, body.b);\nbody.areaOfCircle = math.areaOfCircle(2);\n\nreq.setBody(body);"
                                            },
                                            "vars": {},
                                            "assertions": [
                                                {
                                                    "name": "res.status",
                                                    "value": "eq 200",
                                                    "enabled": true,
                                                    "uid": "Xz8klsXr07E3YNHn0pw72"
                                                }
                                            ],
                                            "tests": "test(\"should return json\", function() {\n  const data = res.getBody();\n  expect(res.getBody()).to.eql({\n    \"a\": 1,\n    \"b\": 2,\n    \"sum\": 3,\n    \"areaOfCircle\": 12.56\n  });\n});",
                                            "docs": ""
                                        },
                                        "filename": "sum (without js extn).bru",
                                        "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/local modules/sum (without js extn).bru",
                                        "draft": null,
                                        "partial": false,
                                        "loading": false,
                                        "size": 0.0006132125854492188,
                                        "depth": 3
                                    },
                                    {
                                        "uid": "EdOIYsAQmPAtsLbays05b",
                                        "name": "sum",
                                        "type": "http-request",
                                        "seq": 1,
                                        "request": {
                                            "method": "POST",
                                            "url": "{{host}}/api/echo/json",
                                            "params": [],
                                            "headers": [],
                                            "auth": {
                                                "mode": "none"
                                            },
                                            "body": {
                                                "json": "{\n  \"a\": 1,\n  \"b\": 2\n}",
                                                "mode": "json"
                                            },
                                            "script": {
                                                "req": "const math = require(\"./lib/math.js\");  \nconst body = req.getBody();\nbody.sum = math.sum(body.a, body.b);\n\nreq.setBody(body);"
                                            },
                                            "vars": {},
                                            "assertions": [
                                                {
                                                    "name": "res.status",
                                                    "value": "eq 200",
                                                    "enabled": true,
                                                    "uid": "bK8GdGBIPj81tgyCL5J0f"
                                                }
                                            ],
                                            "tests": "test(\"should return json\", function() {\n  const data = res.getBody();\n  expect(res.getBody()).to.eql({\n    \"a\": 1,\n    \"b\": 2,\n    \"sum\": 3\n  });\n});\n\ntest(\"should return json\", function() {\n  const data = res.getBody();\n  expect(res.getBody()).to.eql({\n    \"a\": 1,\n    \"b\": 2,\n    \"sum\": 3\n  });\n});\n\ntest(\"should return json\", function() {\n  const data = res.getBody();\n  expect(res.getBody()).to.eql({\n    \"a\": 1,\n    \"b\": 2,\n    \"sum\": 3\n  });\n});",
                                            "docs": ""
                                        },
                                        "filename": "sum.bru",
                                        "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/local modules/sum.bru",
                                        "draft": null,
                                        "partial": false,
                                        "loading": false,
                                        "size": 0.0008230209350585938,
                                        "depth": 3
                                    }
                                ],
                                "depth": 2
                            },
                            {
                                "uid": "fqRtAiPGVhN0sWEEHUvvr",
                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/npm modules",
                                "name": "npm modules",
                                "seq": 1,
                                "filename": "npm modules",
                                "collapsed": true,
                                "type": "folder",
                                "items": [
                                    {
                                        "uid": "LGDNs2LJ4uNy1HGGacQoo",
                                        "name": "fakerjs",
                                        "type": "http-request",
                                        "seq": 1,
                                        "request": {
                                            "method": "POST",
                                            "url": "{{host}}/api/echo/json",
                                            "params": [],
                                            "headers": [],
                                            "auth": {
                                                "mode": "none"
                                            },
                                            "body": {
                                                "json": "{\n  \"hello\": \"bruno\"\n}",
                                                "mode": "json"
                                            },
                                            "script": {
                                                "req": "const { faker } = require('@faker-js/faker');\nconst uuid = faker.string.uuid();\n\nconst data = req.getBody();\ndata.uuid = uuid;\n\nreq.setBody(data);"
                                            },
                                            "vars": {},
                                            "assertions": [
                                                {
                                                    "name": "res.status",
                                                    "value": "eq 200",
                                                    "enabled": true,
                                                    "uid": "F53rDOxFh2jGQdp21vEYC"
                                                }
                                            ],
                                            "tests": "test(\"should return json\", function() {\n  const data = res.getBody();\n  const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n  const isUUID = (inputString) => {\n    return uuidRegex.test(inputString);\n  };\n  \n  expect(data.hello).to.equal(\"bruno\");\n  expect(isUUID(data.uuid)).to.be.true;\n});\n",
                                            "docs": ""
                                        },
                                        "filename": "fakerjs.bru",
                                        "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/scripting/npm modules/fakerjs.bru",
                                        "draft": null,
                                        "partial": false,
                                        "loading": false,
                                        "size": 0.0007104873657226562,
                                        "depth": 3
                                    }
                                ],
                                "depth": 2
                            }
                        ],
                        "depth": 1
                    },
                    {
                        "uid": "00K11OuLV1TPcJrz1xlSO",
                        "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/string interpolation",
                        "name": "string interpolation",
                        "seq": 1,
                        "filename": "string interpolation",
                        "collapsed": true,
                        "type": "folder",
                        "items": [
                            {
                                "uid": "Xaa7YHuIJcD06TrPqhvtq",
                                "name": "env vars",
                                "type": "http-request",
                                "seq": 2,
                                "request": {
                                    "method": "POST",
                                    "url": "{{host}}/api/echo/json",
                                    "params": [],
                                    "headers": [],
                                    "auth": {
                                        "basic": {
                                            "username": "asd",
                                            "password": "j"
                                        },
                                        "bearer": {
                                            "token": ""
                                        },
                                        "mode": "none"
                                    },
                                    "body": {
                                        "json": "{\n  \"envVar1\": \"{{env.var1}}\",\n  \"envVar2\": \"{{env-var2}}\"\n}",
                                        "mode": "json"
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [
                                        {
                                            "name": "res.status",
                                            "value": "eq 200",
                                            "enabled": true,
                                            "uid": "mpvSUaNUetbMdNt2lvMOB"
                                        }
                                    ],
                                    "tests": "test(\"should return json\", function() {\n  expect(res.getBody()).to.eql({\n    \"envVar1\": \"envVar1\",\n    \"envVar2\": \"envVar2\"\n  });\n});\n",
                                    "docs": ""
                                },
                                "filename": "env vars.bru",
                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/string interpolation/env vars.bru",
                                "draft": null,
                                "partial": false,
                                "loading": false,
                                "size": 0.0004425048828125,
                                "depth": 2
                            },
                            {
                                "uid": "Ib9ItT4jcWPAaZmlBg0r6",
                                "name": "missing values",
                                "type": "http-request",
                                "seq": 1,
                                "request": {
                                    "method": "POST",
                                    "url": "{{host}}/api/echo/json?foo={{undefinedVar}}",
                                    "params": [
                                        {
                                            "name": "foo",
                                            "value": "{{undefinedVar}}",
                                            "enabled": true,
                                            "type": "query",
                                            "uid": "UJ9LiaJi5jb95RtVPsBMI"
                                        }
                                    ],
                                    "headers": [],
                                    "auth": {
                                        "basic": {
                                            "username": "asd",
                                            "password": "j"
                                        },
                                        "bearer": {
                                            "token": ""
                                        },
                                        "mode": "none"
                                    },
                                    "body": {
                                        "json": "{\n  \"hello\": \"{{undefinedVar2}}\"\n}",
                                        "mode": "json"
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [
                                        {
                                            "name": "res.status",
                                            "value": "eq 200",
                                            "enabled": true,
                                            "uid": "y0c9lUcmQD8reen0u2I3O"
                                        }
                                    ],
                                    "tests": "test(\"should return json\", function() {\n  const url = req.getUrl();\n  const query = url.split(\"?\")[1];\n  expect(query).to.equal(\"foo={{undefinedVar}}\");\n\n  const data = res.getBody();\n  expect(res.getBody()).to.eql({\n    \"hello\": \"{{undefinedVar2}}\"\n  });\n});\n",
                                    "docs": ""
                                },
                                "filename": "missing values.bru",
                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/string interpolation/missing values.bru",
                                "draft": null,
                                "partial": false,
                                "loading": false,
                                "size": 0.00060272216796875,
                                "depth": 2
                            },
                            {
                                "uid": "3VS3uPnWFzzIhpqRWcRdn",
                                "name": "objects/arrays interpolation",
                                "type": "http-request",
                                "seq": 5,
                                "request": {
                                    "method": "POST",
                                    "url": "https://echo.usebruno.com",
                                    "params": [],
                                    "headers": [],
                                    "auth": {
                                        "mode": "none"
                                    },
                                    "body": {
                                        "json": "{\n \"undefined\": \"{{obj.undefined}}\",\n \"null\": {{obj.null}},\n \"number\": {{obj.number}},\n \"boolean\": {{obj.boolean}},\n \"array\": {{arr}},\n \"array[0]\": {{arr[0]}},\n \"object\": {{obj}},\n \"object.foo\": {{obj.foo}},\n \"object.foo.bar\": {{obj.foo.bar}},\n \"object.foo.bar.baz\": {{obj.foo.bar.baz}}\n}",
                                        "mode": "json"
                                    },
                                    "script": {
                                        "req": "bru.setVar(\"arr\", [1,2,3,4,5]);\n\nbru.setVar(\"obj\", {\n  \"null\": null,\n  \"number\": 1,\n  \"boolean\": true,\n  \"foo\": {\n    \"bar\": {\n      \"baz\": 1\n    }\n  }\n});"
                                    },
                                    "vars": {},
                                    "assertions": [],
                                    "tests": "test(\"should interpolate arrays and objects in request payload body\", () => {\n  const resBody = res.getBody();\n  const expectedOutput = {\n    \"undefined\": \"{{obj.undefined}}\",\n    \"null\": null,\n    \"number\": 1,\n    \"boolean\": true,\n    \"array\": [\n      1,\n      2,\n      3,\n      4,\n      5\n    ],\n    \"array[0]\": 1,\n    \"object\": {\n      \"null\": null,\n      \"number\": 1,\n      \"boolean\": true,\n      \"foo\": {\n        \"bar\": {\n          \"baz\": 1\n        }\n      }\n    },\n    \"object.foo\": {\n      \"bar\": {\n        \"baz\": 1\n      }\n    },\n    \"object.foo.bar\": {\n      \"baz\": 1\n    },\n    \"object.foo.bar.baz\": 1\n  };\n  expect(resBody).to.be.eql(expectedOutput);\n})",
                                    "docs": ""
                                },
                                "filename": "objects-arrays interpolation.bru",
                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/string interpolation/objects-arrays interpolation.bru",
                                "draft": null,
                                "partial": false,
                                "loading": false,
                                "size": 0.0013532638549804688,
                                "depth": 2
                            },
                            {
                                "uid": "zuDT1ECcfoTOyIjqbxivz",
                                "name": "process env vars",
                                "type": "http-request",
                                "seq": 4,
                                "request": {
                                    "method": "POST",
                                    "url": "{{host}}/api/echo/json",
                                    "params": [],
                                    "headers": [],
                                    "auth": {
                                        "basic": {
                                            "username": "asd",
                                            "password": "j"
                                        },
                                        "bearer": {
                                            "token": ""
                                        },
                                        "mode": "none"
                                    },
                                    "body": {
                                        "json": "{\n  \"bark\": \"{{bark}}\",\n  \"bark2\": \"{{process.env.PROC_ENV_VAR}}\"\n}",
                                        "mode": "json"
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [
                                        {
                                            "name": "res.status",
                                            "value": "eq 200",
                                            "enabled": true,
                                            "uid": "PUH3vQWo4ZH1RzpnqhY4I"
                                        }
                                    ],
                                    "tests": "test(\"should return json\", function() {\n  expect(res.getBody()).to.eql({\n    \"bark\": \"woof\",\n    \"bark2\": \"woof\"\n  });\n});\n",
                                    "docs": ""
                                },
                                "filename": "process env vars.bru",
                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/string interpolation/process env vars.bru",
                                "draft": null,
                                "partial": false,
                                "loading": false,
                                "size": 0.000446319580078125,
                                "depth": 2
                            },
                            {
                                "uid": "jeF7DWD5ot3OiP9MCUB0f",
                                "name": "runtime vars",
                                "type": "http-request",
                                "seq": 3,
                                "request": {
                                    "method": "POST",
                                    "url": "{{host}}/api/echo/text",
                                    "params": [],
                                    "headers": [],
                                    "auth": {
                                        "basic": {
                                            "username": "asd",
                                            "password": "j"
                                        },
                                        "bearer": {
                                            "token": ""
                                        },
                                        "mode": "none"
                                    },
                                    "body": {
                                        "json": "{\n  \"envVar1\": \"{{env.var1}}\",\n  \"envVar2\": \"{{env-var2}}\"\n}",
                                        "text": "Hi, I am {{rUser.full_name}},\nI am {{rUser.age}} years old.\nMy favorite food is {{rUser.fav-food[0]}} and {{rUser.fav-food[1]}}.\nI like attention: {{rUser['want.attention']}}",
                                        "mode": "text"
                                    },
                                    "script": {
                                        "req": "bru.setVar(\"rUser\", {\n  full_name: 'Bruno',\n  age: 5,\n  'fav-food': ['egg', 'meat'],\n  'want.attention': true\n});"
                                    },
                                    "vars": {},
                                    "assertions": [
                                        {
                                            "name": "res.status",
                                            "value": "eq 200",
                                            "enabled": true,
                                            "uid": "MHmLRmUdiyXxTizQ4xmfm"
                                        }
                                    ],
                                    "tests": "test(\"should return json\", function() {\n  const expectedResponse = `Hi, I am Bruno,\nI am 5 years old.\nMy favorite food is egg and meat.\nI like attention: true`;\n  expect(res.getBody()).to.equal(expectedResponse);\n});\n",
                                    "docs": ""
                                },
                                "filename": "runtime vars.bru",
                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/string interpolation/runtime vars.bru",
                                "draft": null,
                                "partial": false,
                                "loading": false,
                                "size": 0.0008592605590820312,
                                "depth": 2
                            }
                        ],
                        "depth": 1,
                        "root": {
                            "request": {
                                "headers": [],
                                "auth": {},
                                "script": {},
                                "vars": {
                                    "req": [
                                        {
                                            "name": "folder_pre_var",
                                            "value": "folder_pre_var_value",
                                            "enabled": true,
                                            "local": false,
                                            "uid": "Ga50UFfRGrXHFSuWXXH6E"
                                        },
                                        {
                                            "name": "folder_pre_var_2",
                                            "value": "{{env.var1}}",
                                            "enabled": true,
                                            "local": false,
                                            "uid": "HQpu6AWlwLpDKLd5ucut8"
                                        }
                                    ]
                                },
                                "tests": ""
                            },
                            "docs": "",
                            "meta": {
                                "name": "string interpolation",
                                "seq": 1
                            }
                        }
                    },
                    {
                        "uid": "EDEtoIDWgAMrumEtG0McK",
                        "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/url-serialization",
                        "name": "url-serialization",
                        "seq": 13,
                        "filename": "url-serialization",
                        "collapsed": true,
                        "type": "folder",
                        "items": [
                            {
                                "uid": "1tiUg44iR4eOi9MHfcsy7",
                                "name": "Duplicate Keys",
                                "type": "http-request",
                                "seq": 1,
                                "request": {
                                    "method": "POST",
                                    "url": "https://echo.usebruno.com",
                                    "params": [],
                                    "headers": [
                                        {
                                            "name": "Content-Type",
                                            "value": "application/x-www-form-urlencoded",
                                            "enabled": true,
                                            "uid": "6fPzoJp4Sji4IAqpUxqCR"
                                        }
                                    ],
                                    "auth": {
                                        "mode": "none"
                                    },
                                    "body": {
                                        "formUrlEncoded": [
                                            {
                                                "name": "tags",
                                                "value": "frontend",
                                                "enabled": true,
                                                "uid": "UmF0on50w30hscSqbkmBq"
                                            },
                                            {
                                                "name": "tags",
                                                "value": "api",
                                                "enabled": true,
                                                "uid": "cjQDf0s1ed0TJtmBVvidq"
                                            },
                                            {
                                                "name": "user",
                                                "value": "john",
                                                "enabled": true,
                                                "uid": "tYKiZYfMbGGZ9ioay1BVg"
                                            }
                                        ],
                                        "mode": "formUrlEncoded"
                                    },
                                    "script": {
                                        "res": "test('Response body matches expected value', function () {\n    expect(res.getBody()).to.eql(\"tags=frontend&tags=api&user=john\");\n});"
                                    },
                                    "vars": {},
                                    "assertions": [],
                                    "tests": "",
                                    "docs": ""
                                },
                                "filename": "Duplicate Keys.bru",
                                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/bruno_testbench/url-serialization/Duplicate Keys.bru",
                                "draft": null,
                                "partial": false,
                                "loading": false,
                                "size": 0.00040912628173828125,
                                "depth": 2
                            }
                        ],
                        "depth": 1,
                        "root": {
                            "request": {
                                "headers": [],
                                "auth": {
                                    "mode": "inherit"
                                },
                                "script": {},
                                "vars": {},
                                "tests": ""
                            },
                            "docs": "",
                            "meta": {
                                "name": "url-serialization",
                                "seq": 13
                            }
                        }
                    }
                ],
                "runtimeVariables": {},
                "brunoConfig": {
                    "version": "1",
                    "name": "bruno-testbench",
                    "type": "collection",
                    "proxy": {
                        "enabled": false,
                        "protocol": "https",
                        "hostname": "localhost",
                        "port": 4000,
                        "auth": {
                            "enabled": false,
                            "username": "",
                            "password": ""
                        },
                        "bypassProxy": ""
                    },
                    "scripts": {
                        "moduleWhitelist": [
                            "crypto",
                            "buffer",
                            "form-data"
                        ],
                        "filesystemAccess": {
                            "allow": true
                        }
                    },
                    "clientCertificates": {
                        "enabled": true,
                        "certs": []
                    },
                    "presets": {
                        "requestType": "http",
                        "requestUrl": "http://localhost:6000"
                    },
                    "ignore": [
                        "node_modules",
                        ".git"
                    ],
                    "size": 0.06427669525146484,
                    "filesCount": 130
                },
                "securityConfig": {
                    "jsSandboxMode": "developer"
                },
                "settingsSelectedTab": "overview",
                "folderLevelSettingsSelectedTab": {},
                "mountStatus": "mounted",
                "importedAt": 1752332156850,
                "lastAction": null,
                "collapsed": false,
                "processEnvVariables": {
                    "PROC_ENV_VAR": "woof"
                },
                "root": {
                    "request": {
                        "headers": [
                            {
                                "name": "check",
                                "value": "again",
                                "enabled": true,
                                "uid": "ZyWaT24Z4Xb7Undqx4Npb"
                            },
                            {
                                "name": "token",
                                "value": "{{collection_pre_var_token}}",
                                "enabled": true,
                                "uid": "JUYEkkKTiAvGrsk5kfdCI"
                            },
                            {
                                "name": "collection-header",
                                "value": "collection-header-value",
                                "enabled": true,
                                "uid": "U4fy361gzYpm1Q8ChFSwe"
                            }
                        ],
                        "auth": {
                            "mode": "bearer",
                            "bearer": {
                                "token": "{{bearer_auth_token}}"
                            }
                        },
                        "script": {
                            "req": "// used by `scripting/js/folder-collection script-tests`\nconst shouldTestCollectionScripts = bru.getVar('should-test-collection-scripts');\nif(shouldTestCollectionScripts) {\n bru.setVar('collection-var-set-by-collection-script', 'collection-var-value-set-by-collection-script');\n}"
                        },
                        "vars": {
                            "req": [
                                {
                                    "name": "collection_pre_var",
                                    "value": "collection_pre_var_value",
                                    "enabled": true,
                                    "local": false,
                                    "uid": "XvAtY4XpObIXm42R3Bla4"
                                },
                                {
                                    "name": "collection_pre_var_token",
                                    "value": "{{request_pre_var_token}}",
                                    "enabled": true,
                                    "local": false,
                                    "uid": "PkXayFIHYMmQAVvjxKzGh"
                                },
                                {
                                    "name": "collection-var",
                                    "value": "collection-var-value",
                                    "enabled": true,
                                    "local": false,
                                    "uid": "3jA6Wsh5AskndEmYJF8Sl"
                                }
                            ]
                        },
                        "tests": "// used by `scripting/js/folder-collection script-tests`\nconst shouldTestCollectionScripts = bru.getVar('should-test-collection-scripts');\nconst collectionVar = bru.getVar(\"collection-var-set-by-collection-script\");\nif (shouldTestCollectionScripts && collectionVar) {\n  test(\"collection level test - should get the var that was set by the collection script\", function() {\n    expect(collectionVar).to.equal(\"collection-var-value-set-by-collection-script\");\n  }); \n  bru.setVar('collection-var-set-by-collection-script', null); \n  bru.setVar('should-test-collection-scripts', null);\n}"
                    },
                    "docs": "# bruno-testbench 🐶\n\nThis is a test collection that I am using to test various functionalities around bruno"
                },
                "environments": [
                    {
                        "variables": [
                            {
                                "name": "host",
                                "value": "http://localhost:8080",
                                "enabled": true,
                                "secret": false,
                                "type": "text",
                                "uid": "RoZw8E82M705NMqAvi5oW"
                            },
                            {
                                "name": "httpfaker",
                                "value": "https://www.httpfaker.org",
                                "enabled": true,
                                "secret": false,
                                "type": "text",
                                "uid": "Irp2IXLpq8zPpPeGHzG7Q"
                            },
                            {
                                "name": "bearer_auth_token",
                                "value": "your_secret_token",
                                "enabled": true,
                                "secret": false,
                                "type": "text",
                                "uid": "YEkA1j75K12RfneLykYrK"
                            },
                            {
                                "name": "basic_auth_password",
                                "value": "della",
                                "enabled": true,
                                "secret": false,
                                "type": "text",
                                "uid": "63zpmFGPHUVSASOf45XF7"
                            },
                            {
                                "name": "env.var1",
                                "value": "envVar1",
                                "enabled": true,
                                "secret": false,
                                "type": "text",
                                "uid": "V4jcYDUAReA5GcIIGxKyf"
                            },
                            {
                                "name": "env-var2",
                                "value": "envVar2",
                                "enabled": true,
                                "secret": false,
                                "type": "text",
                                "uid": "LXIRhdKrZQdp7zXecoWnQ"
                            },
                            {
                                "name": "bark",
                                "value": "{{process.env.PROC_ENV_VAR}}",
                                "enabled": true,
                                "secret": false,
                                "type": "text",
                                "uid": "wdAuNBd3T7hJPZ0JDi8RF"
                            },
                            {
                                "name": "foo",
                                "value": "bar",
                                "enabled": true,
                                "secret": false,
                                "type": "text",
                                "uid": "RCsUMTImrDWrBEOSceuAk"
                            },
                            {
                                "name": "testSetEnvVar",
                                "value": "bruno-29653",
                                "enabled": true,
                                "secret": false,
                                "type": "text",
                                "uid": "8gn0Pg7WM7JrFUUNt5E0S"
                            },
                            {
                                "name": "echo-host",
                                "value": "https://echo.usebruno.com",
                                "enabled": true,
                                "secret": false,
                                "type": "text",
                                "uid": "ZIwLnB4ThizsAztlr2Rth"
                            },
                            {
                                "name": "client_id",
                                "value": "client_id_1",
                                "enabled": true,
                                "secret": false,
                                "type": "text",
                                "uid": "JGHSfNykpACl67oZc4gUv"
                            },
                            {
                                "name": "client_secret",
                                "value": "client_secret_1",
                                "enabled": true,
                                "secret": false,
                                "type": "text",
                                "uid": "GXOlFYUCSs4MMD3nclwjH"
                            },
                            {
                                "name": "auth_url",
                                "value": "http://localhost:8080/api/auth/oauth2/authorization_code/authorize",
                                "enabled": true,
                                "secret": false,
                                "type": "text",
                                "uid": "N4VX4fuzeeOnjV6caYTxT"
                            },
                            {
                                "name": "callback_url",
                                "value": "http://localhost:8080/api/auth/oauth2/authorization_code/callback",
                                "enabled": true,
                                "secret": false,
                                "type": "text",
                                "uid": "OANbTsSOYEK0JncqmJhgn"
                            },
                            {
                                "name": "access_token_url",
                                "value": "http://localhost:8080/api/auth/oauth2/authorization_code/token",
                                "enabled": true,
                                "secret": false,
                                "type": "text",
                                "uid": "vnaCuemUNeHh3nOos9dt8"
                            },
                            {
                                "name": "passwordCredentials_username",
                                "value": "foo",
                                "enabled": true,
                                "secret": false,
                                "type": "text",
                                "uid": "JpRn33ffAt7p2NRgkT0aQ"
                            },
                            {
                                "name": "passwordCredentials_password",
                                "value": "bar",
                                "enabled": true,
                                "secret": false,
                                "type": "text",
                                "uid": "gypE4p52nH4C2RPzrVIey"
                            },
                            {
                                "name": "github_authorize_url",
                                "value": "https://github.com/login/oauth/authorize",
                                "enabled": true,
                                "secret": false,
                                "type": "text",
                                "uid": "yXnBSBH8upUJSlC7qWf6x"
                            },
                            {
                                "name": "github_access_token_url",
                                "value": "https://github.com/login/oauth/access_token",
                                "enabled": true,
                                "secret": false,
                                "type": "text",
                                "uid": "WofyI8P90jlM9kNyreEee"
                            },
                            {
                                "name": "google_auth_url",
                                "value": "https://accounts.google.com/o/oauth2/auth",
                                "enabled": true,
                                "secret": false,
                                "type": "text",
                                "uid": "eoVs3st0Yso5jIvFfA9RY"
                            },
                            {
                                "name": "google_access_token_url",
                                "value": "https://accounts.google.com/o/oauth2/token",
                                "enabled": true,
                                "secret": false,
                                "type": "text",
                                "uid": "tUSJYJe1lfAMdMYHHof9Y"
                            },
                            {
                                "name": "google_scope",
                                "value": "https://www.googleapis.com/auth/userinfo.email",
                                "enabled": true,
                                "secret": false,
                                "type": "text",
                                "uid": "lIfQGulNMwUT570yrcX4W"
                            },
                            {
                                "name": "github_client_secret",
                                "value": "",
                                "enabled": true,
                                "secret": true,
                                "type": "text",
                                "uid": "vTRI0DCdw2yrcMv48p2R3"
                            },
                            {
                                "name": "github_client_id",
                                "value": "",
                                "enabled": true,
                                "secret": true,
                                "type": "text",
                                "uid": "6tyXnZPVQgMi78gZ1SG6F"
                            },
                            {
                                "name": "google_client_id",
                                "value": "",
                                "enabled": true,
                                "secret": true,
                                "type": "text",
                                "uid": "qBjzvnUbWttJpuW41La9y"
                            },
                            {
                                "name": "google_client_secret",
                                "value": "",
                                "enabled": true,
                                "secret": true,
                                "type": "text",
                                "uid": "EMlRAKXIDVUdzYoVN3Esx"
                            },
                            {
                                "name": "github_authorization_code",
                                "value": "",
                                "enabled": true,
                                "secret": true,
                                "type": "text",
                                "uid": "mkviwi2AebFQpfXMA1TTD"
                            },
                            {
                                "name": "passwordCredentials_access_token",
                                "value": "",
                                "enabled": true,
                                "secret": true,
                                "type": "text",
                                "uid": "jHiWzQeNeteJIN45FHkf7"
                            },
                            {
                                "name": "client_credentials_access_token",
                                "value": "",
                                "enabled": true,
                                "secret": true,
                                "type": "text",
                                "uid": "260Im5AW4wLKE8MOdvca7"
                            },
                            {
                                "name": "authorization_code_access_token",
                                "value": "",
                                "enabled": true,
                                "secret": true,
                                "type": "text",
                                "uid": "SZA3xCJbfk6Rzg1eg24gl"
                            },
                            {
                                "name": "github_access_token",
                                "value": "",
                                "enabled": true,
                                "secret": true,
                                "type": "text",
                                "uid": "mxGABQws3zkJ9jBEqah7A"
                            }
                        ],
                        "name": "Local",
                        "uid": "G1pUDM8RQwUjl2HROsjd2"
                    },
                    {
                        "variables": [
                            {
                                "name": "host",
                                "value": "https://testbench-sanity.usebruno.com",
                                "enabled": true,
                                "secret": false,
                                "type": "text",
                                "uid": "y0HIyqKvIEQblJS0FMeAV"
                            },
                            {
                                "name": "httpfaker",
                                "value": "https://www.httpfaker.org",
                                "enabled": true,
                                "secret": false,
                                "type": "text",
                                "uid": "i8nWs7yAesJeeQqZ9vmTS"
                            },
                            {
                                "name": "bearer_auth_token",
                                "value": "your_secret_token",
                                "enabled": true,
                                "secret": false,
                                "type": "text",
                                "uid": "GfsaWaax7tFhH2Cjhmf8A"
                            },
                            {
                                "name": "basic_auth_password",
                                "value": "della",
                                "enabled": true,
                                "secret": false,
                                "type": "text",
                                "uid": "v3UAp8j09dQ6c8gd4Tyq9"
                            },
                            {
                                "name": "env.var1",
                                "value": "envVar1",
                                "enabled": true,
                                "secret": false,
                                "type": "text",
                                "uid": "4UaoYQmrAEMDRFh7JKiUd"
                            },
                            {
                                "name": "env-var2",
                                "value": "envVar2",
                                "enabled": true,
                                "secret": false,
                                "type": "text",
                                "uid": "zGvVn5Qgfx8EHGzCVN0hX"
                            },
                            {
                                "name": "bark",
                                "value": "{{process.env.PROC_ENV_VAR}}",
                                "enabled": true,
                                "secret": false,
                                "type": "text",
                                "uid": "4QvOS7rD3XuofyPeJTY18"
                            },
                            {
                                "name": "foo",
                                "value": "bar",
                                "enabled": true,
                                "secret": false,
                                "type": "text",
                                "uid": "cJSVA2g6IHLN4m29ljims"
                            },
                            {
                                "name": "testSetEnvVar",
                                "value": "bruno-29653",
                                "enabled": true,
                                "secret": false,
                                "type": "text",
                                "uid": "pg4WLhFdBI76EUKlTFG1p"
                            },
                            {
                                "name": "echo-host",
                                "value": "https://echo.usebruno.com",
                                "enabled": true,
                                "secret": false,
                                "type": "text",
                                "uid": "YeGDmldGI2rHcVTUY9qGk"
                            },
                            {
                                "name": "proxy_url",
                                "value": "http://localhost:42424",
                                "enabled": true,
                                "secret": false,
                                "type": "text",
                                "uid": "lhTFtoBahOvc9Kay6e5T3"
                            },
                            {
                                "name": "proxy_hostname",
                                "value": "localhost",
                                "enabled": true,
                                "secret": false,
                                "type": "text",
                                "uid": "0h6UxiMoV1nNv6f3608lK"
                            }
                        ],
                        "name": "Prod",
                        "uid": "lyCt4A9lU4p9hlRUEMsEH"
                    }
                ],
                "activeEnvironmentUid": "lyCt4A9lU4p9hlRUEMsEH"
            },
            {
                "version": "1",
                "uid": "jjkrzp000000000000000",
                "name": "GCF",
                "pathname": "/Users/lohit/Downloads/Archive (1)/Reorder",
                "items": [],
                "runtimeVariables": {},
                "brunoConfig": {
                    "version": "1",
                    "name": "GCF",
                    "type": "collection",
                    "ignore": [
                        "node_modules",
                        ".git",
                        "files",
                        "logs",
                        "Services/Global Web API for GCF/environments",
                        "Services/Global Web API for GCF/collection.bru",
                        "Services/Reservation Service/environments",
                        "Services/Reservation Service/collection.bru",
                        "Services/Resident Service/environments",
                        "Services/Resident Service/collection.bru",
                        "Services/User Service/environments",
                        "Services/User Service/collection.bru",
                        "Services/Site Service/environments",
                        "Services/Site Service/collection.bru",
                        "Services/Document Service/environments",
                        "Services/Document Service/collection.bru"
                    ],
                    "scripts": {
                        "filesystemAccess": {
                            "allow": true
                        }
                    },
                    "size": 0.3871917724609375,
                    "filesCount": 2030
                },
                "securityConfig": {
                    "jsSandboxMode": "safe"
                },
                "settingsSelectedTab": "overview",
                "folderLevelSettingsSelectedTab": {},
                "mountStatus": "unmounted",
                "importedAt": 1752332156868,
                "lastAction": null,
                "collapsed": true
            },
            {
                "version": "1",
                "uid": "ptymzt000000000000000",
                "name": "keycloak-authorization_code",
                "pathname": "/Users/lohit/Documents/code/bruno-golden-edition-canonical/packages/bruno-tests/keycloak-authorization_code",
                "items": [],
                "runtimeVariables": {},
                "brunoConfig": {
                    "version": "1",
                    "name": "keycloak-authorization_code",
                    "type": "collection",
                    "ignore": [
                        "node_modules",
                        ".git"
                    ],
                    "size": 0.001644134521484375,
                    "filesCount": 5
                },
                "securityConfig": {
                    "jsSandboxMode": "developer"
                },
                "settingsSelectedTab": "overview",
                "folderLevelSettingsSelectedTab": {},
                "mountStatus": "unmounted",
                "importedAt": 1752332156877,
                "lastAction": null,
                "collapsed": true
            },
            {
                "version": "1",
                "uid": "13yu4fk00000000000000",
                "name": "keycloak-client-credentials",
                "pathname": "/Users/lohit/Documents/code/bruno-golden-edition-canonical/packages/bruno-tests/keycloak-client-credentials",
                "items": [],
                "runtimeVariables": {},
                "brunoConfig": {
                    "version": "1",
                    "name": "keycloak-client-credentials",
                    "type": "collection",
                    "ignore": [
                        "node_modules",
                        ".git"
                    ],
                    "size": 0.001361846923828125,
                    "filesCount": 5
                },
                "securityConfig": {
                    "jsSandboxMode": "developer"
                },
                "settingsSelectedTab": "overview",
                "folderLevelSettingsSelectedTab": {},
                "mountStatus": "unmounted",
                "importedAt": 1752332156881,
                "lastAction": null,
                "collapsed": true
            },
            {
                "version": "1",
                "uid": "1gftgsg00000000000000",
                "name": "keycloak-password-credentials",
                "pathname": "/Users/lohit/Documents/code/bruno-golden-edition-canonical/packages/bruno-tests/keycloak-password-credentials",
                "items": [],
                "runtimeVariables": {},
                "brunoConfig": {
                    "version": "1",
                    "name": "keycloak-password-credentials",
                    "type": "collection",
                    "ignore": [
                        "node_modules",
                        ".git"
                    ],
                    "size": 0.0014104843139648438,
                    "filesCount": 5
                },
                "securityConfig": {
                    "jsSandboxMode": "safe"
                },
                "settingsSelectedTab": "overview",
                "folderLevelSettingsSelectedTab": {},
                "mountStatus": "unmounted",
                "importedAt": 1752332156881,
                "lastAction": null,
                "collapsed": true
            },
            {
                "version": "1",
                "uid": "11beko900000000000000",
                "name": "collection_runner_tags",
                "pathname": "/Users/lohit/Documents/code/_bruno/bruno_collections/collection_runner_tags copy",
                "items": [],
                "runtimeVariables": {},
                "brunoConfig": {
                    "version": "1",
                    "name": "collection_runner_tags",
                    "type": "collection",
                    "ignore": [
                        "node_modules",
                        ".git"
                    ],
                    "size": 0.00041484832763671875,
                    "filesCount": 2
                },
                "securityConfig": {
                    "jsSandboxMode": "safe"
                },
                "settingsSelectedTab": "overview",
                "folderLevelSettingsSelectedTab": {},
                "mountStatus": "unmounted",
                "importedAt": 1752332156885,
                "lastAction": null,
                "collapsed": true
            }
        ],
        "collectionSortOrder": "default"
    },
    "tabs": {
        "tabs": [
            {
                "uid": "olcycg000000000000000",
                "collectionUid": "olcycg000000000000000",
                "requestPaneWidth": null,
                "requestPaneTab": "params",
                "responsePaneTab": "response",
                "type": "collection-settings",
                "folderUid": "olcycg000000000000000",
                "preview": true
            }
        ],
        "activeTabUid": "olcycg000000000000000"
    },
    "notifications": {
        "notifications": [],
        "readNotificationIds": []
    },
    "globalEnvironments": {
        "globalEnvironments": [],
        "activeGlobalEnvironmentUid": null
    }
}